/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/static/bundle/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main/frontend/entry/index-with-irma-issuer.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../../afstuderen/irma-frontend-packages/irma-core/index.js":
/*!************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/irma-core/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar StateMachine = __webpack_require__(/*! ./state-machine */ \"../../../afstuderen/irma-frontend-packages/irma-core/state-machine.js\");\n\nvar userAgent = __webpack_require__(/*! ./user-agent */ \"../../../afstuderen/irma-frontend-packages/irma-core/user-agent.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function IrmaCore(options) {\n    var _this = this;\n\n    _classCallCheck(this, IrmaCore);\n\n    this._modules = [];\n    this._options = options || {};\n    this._userAgent = userAgent();\n    this._stateMachine = new StateMachine(this._options.debugging);\n\n    this._stateMachine.addStateChangeListener(function (s) {\n      return _this._stateChangeListener(s);\n    });\n  }\n\n  _createClass(IrmaCore, [{\n    key: \"use\",\n    value: function use(mod) {\n      this._modules.push(new mod({\n        stateMachine: this._stateMachine,\n        options: this._options\n      }));\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {\n        input[_key] = arguments[_key];\n      }\n\n      if (this._options.debugging) console.log(\"Starting session with options:\", this._options);\n      return new Promise(function (resolve, reject) {\n        _this2._resolve = resolve;\n        _this2._reject = reject;\n\n        _this2._modules.filter(function (m) {\n          return m.start;\n        }).forEach(function (m) {\n          return m.start.apply(m, input);\n        });\n      });\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this._stateMachine.currentState() != 'Uninitialized' && !this._stateMachine.isEndState()) {\n        if (this._options.debugging) console.log('ðŸ–¥ Manually aborting session instance');\n\n        this._stateMachine.transition('abort');\n      } else {\n        if (this._options.debugging) console.log('ðŸ–¥ Manual abort is not necessary');\n      }\n    }\n  }, {\n    key: \"_stateChangeListener\",\n    value: function _stateChangeListener(state) {\n      var _this3 = this;\n\n      this._modules.filter(function (m) {\n        return m.stateChange;\n      }).forEach(function (m) {\n        return m.stateChange(state);\n      });\n\n      var newState = state.newState,\n          payload = state.payload,\n          isFinal = state.isFinal;\n\n      switch (newState) {\n        case 'Success':\n          this._close().then(function (result) {\n            if (_this3._resolve) _this3._resolve(result);\n          });\n\n          break;\n\n        case 'MediumContemplation':\n          if (this._userAgentIsMobile()) this._stateMachine.transition('showIrmaButton', this._getSessionUrls(payload));else this._stateMachine.transition('showQRCode', this._getSessionUrls(payload));\n          break;\n\n        default:\n          if (isFinal) {\n            this._close().then(function (result) {\n              if (_this3._reject) result ? _this3._reject(result) : _this3._reject(newState);\n            });\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      return this._modules.filter(function (m) {\n        return m.close;\n      }).reduce(function (prev, m) {\n        return prev.then(function (returnValues) {\n          return m.close().then(function (res) {\n            if (res) returnValues.push(res);\n            return returnValues;\n          });\n        });\n      }, Promise.resolve([])).then(function (returnValues) {\n        return returnValues.length > 1 ? returnValues : returnValues[0];\n      });\n    }\n  }, {\n    key: \"_userAgentIsMobile\",\n    value: function _userAgentIsMobile() {\n      return this._userAgent == 'Android' || this._userAgent == 'iOS';\n    }\n  }, {\n    key: \"_getSessionUrls\",\n    value: function _getSessionUrls(sessionPtr) {\n      var json = JSON.stringify(sessionPtr);\n      var universalLink = \"https://irma.app/-/session#\".concat(encodeURIComponent(json));\n      var mobileLink;\n\n      switch (this._userAgent) {\n        case 'Android':\n          // Universal links are not stable in Android webviews and custom tabs, so always use intent links.\n          var intent = \"Intent;package=org.irmacard.cardemu;scheme=irma;l.timestamp=\".concat(Date.now());\n          var fallback = \"S.browser_fallback_url=\".concat(encodeURIComponent(universalLink));\n          mobileLink = \"intent://qr/json/\".concat(encodeURIComponent(json), \"#\").concat(intent, \";\").concat(fallback, \";end\");\n          break;\n\n        default:\n          mobileLink = universalLink;\n          break;\n      }\n\n      return {\n        // TODO: When old IRMA app is phased out, also return universal link for QRs.\n        qr: json,\n        mobile: mobileLink\n      };\n    }\n  }]);\n\n  return IrmaCore;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL2lybWEtY29yZS9pbmRleC5qcz8zZmNmIl0sIm5hbWVzIjpbIlN0YXRlTWFjaGluZSIsInJlcXVpcmUiLCJ1c2VyQWdlbnQiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsIl9tb2R1bGVzIiwiX29wdGlvbnMiLCJfdXNlckFnZW50IiwiX3N0YXRlTWFjaGluZSIsImRlYnVnZ2luZyIsImFkZFN0YXRlQ2hhbmdlTGlzdGVuZXIiLCJzIiwiX3N0YXRlQ2hhbmdlTGlzdGVuZXIiLCJtb2QiLCJwdXNoIiwic3RhdGVNYWNoaW5lIiwiaW5wdXQiLCJjb25zb2xlIiwibG9nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJmaWx0ZXIiLCJtIiwic3RhcnQiLCJmb3JFYWNoIiwiY3VycmVudFN0YXRlIiwiaXNFbmRTdGF0ZSIsInRyYW5zaXRpb24iLCJzdGF0ZSIsInN0YXRlQ2hhbmdlIiwibmV3U3RhdGUiLCJwYXlsb2FkIiwiaXNGaW5hbCIsIl9jbG9zZSIsInRoZW4iLCJyZXN1bHQiLCJfdXNlckFnZW50SXNNb2JpbGUiLCJfZ2V0U2Vzc2lvblVybHMiLCJjbG9zZSIsInJlZHVjZSIsInByZXYiLCJyZXR1cm5WYWx1ZXMiLCJyZXMiLCJsZW5ndGgiLCJzZXNzaW9uUHRyIiwianNvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bml2ZXJzYWxMaW5rIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibW9iaWxlTGluayIsImludGVudCIsIkRhdGUiLCJub3ciLCJmYWxsYmFjayIsInFyIiwibW9iaWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFNQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMsOEZBQUQsQ0FBNUI7O0FBQ0EsSUFBTUMsU0FBUyxHQUFNRCxtQkFBTyxDQUFDLHdGQUFELENBQTVCOztBQUVBRSxNQUFN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QkYsWUFBMUIsR0FBeUNBLFlBQVksQ0FBQyxDQUFELENBQXpEO0FBQUEsT0FSYixDQUFQO0FBU0Q7QUE3RUg7QUFBQTtBQUFBLHlDQStFdUI7QUFDbkIsYUFBTyxLQUFLckMsVUFBTCxJQUFrQixTQUFsQixJQUErQixLQUFLQSxVQUFMLElBQW1CLEtBQXpEO0FBQ0Q7QUFqRkg7QUFBQTtBQUFBLG9DQW1Ga0J3QyxVQW5GbEIsRUFtRjhCO0FBQzFCLFVBQUlDLElBQUksR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVILFVBQWYsQ0FBWDtBQUNBLFVBQUlJLGFBQWEsd0NBQWlDQyxrQkFBa0IsQ0FBQ0osSUFBRCxDQUFuRCxDQUFqQjtBQUNBLFVBQUlLLFVBQUo7O0FBQ0EsY0FBUSxLQUFLOUMsVUFBYjtBQUNFLGFBQUssU0FBTDtBQUNFO0FBQ0EsY0FBSStDLE1BQU0seUVBQWtFQyxJQUFJLENBQUNDLEdBQUwsRUFBbEUsQ0FBVjtBQUNBLGNBQUlDLFFBQVEsb0NBQTZCTCxrQkFBa0IsQ0FBQ0QsYUFBRCxDQUEvQyxDQUFaO0FBQ0FFLG9CQUFVLDhCQUF3QkQsa0JBQWtCLENBQUNKLElBQUQsQ0FBMUMsY0FBb0RNLE1BQXBELGNBQThERyxRQUE5RCxTQUFWO0FBQ0E7O0FBQ0Y7QUFDRUosb0JBQVUsR0FBR0YsYUFBYjtBQUNBO0FBVEo7O0FBV0EsYUFBTztBQUNMO0FBQ0FPLFVBQUUsRUFBRVYsSUFGQztBQUdMVyxjQUFNLEVBQUVOO0FBSEgsT0FBUDtBQUtEO0FBdkdIOztBQUFBO0FBQUEiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL2lybWEtY29yZS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFN0YXRlTWFjaGluZSA9IHJlcXVpcmUoJy4vc3RhdGUtbWFjaGluZScpO1xuY29uc3QgdXNlckFnZW50ICAgID0gcmVxdWlyZSgnLi91c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgSXJtYUNvcmUge1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9tb2R1bGVzID0gW107XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdGhpcy5fdXNlckFnZW50ID0gdXNlckFnZW50KCk7XG5cbiAgICB0aGlzLl9zdGF0ZU1hY2hpbmUgPSBuZXcgU3RhdGVNYWNoaW5lKHRoaXMuX29wdGlvbnMuZGVidWdnaW5nKTtcbiAgICB0aGlzLl9zdGF0ZU1hY2hpbmUuYWRkU3RhdGVDaGFuZ2VMaXN0ZW5lcigocykgPT4gdGhpcy5fc3RhdGVDaGFuZ2VMaXN0ZW5lcihzKSk7XG4gIH1cblxuICB1c2UobW9kKSB7XG4gICAgdGhpcy5fbW9kdWxlcy5wdXNoKG5ldyBtb2Qoe1xuICAgICAgc3RhdGVNYWNoaW5lOiB0aGlzLl9zdGF0ZU1hY2hpbmUsXG4gICAgICBvcHRpb25zOiAgICAgIHRoaXMuX29wdGlvbnNcbiAgICB9KSk7XG4gIH1cblxuICBzdGFydCguLi5pbnB1dCkge1xuICAgIGlmICh0aGlzLl9vcHRpb25zLmRlYnVnZ2luZylcbiAgICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgc2Vzc2lvbiB3aXRoIG9wdGlvbnM6XCIsIHRoaXMuX29wdGlvbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgdGhpcy5fcmVqZWN0ICA9IHJlamVjdDtcbiAgICAgIHRoaXMuX21vZHVsZXMuZmlsdGVyKG0gPT4gbS5zdGFydClcbiAgICAgICAgICAgICAgICAgICAuZm9yRWFjaChtID0+IG0uc3RhcnQoLi4uaW5wdXQpKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIGlmICh0aGlzLl9zdGF0ZU1hY2hpbmUuY3VycmVudFN0YXRlKCkgIT0gJ1VuaW5pdGlhbGl6ZWQnICYmICF0aGlzLl9zdGF0ZU1hY2hpbmUuaXNFbmRTdGF0ZSgpKSB7XG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5kZWJ1Z2dpbmcpIGNvbnNvbGUubG9nKCfwn5alIE1hbnVhbGx5IGFib3J0aW5nIHNlc3Npb24gaW5zdGFuY2UnKTtcbiAgICAgIHRoaXMuX3N0YXRlTWFjaGluZS50cmFuc2l0aW9uKCdhYm9ydCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5kZWJ1Z2dpbmcpIGNvbnNvbGUubG9nKCfwn5alIE1hbnVhbCBhYm9ydCBpcyBub3QgbmVjZXNzYXJ5Jyk7XG4gICAgfVxuICB9XG5cbiAgX3N0YXRlQ2hhbmdlTGlzdGVuZXIoc3RhdGUpIHtcbiAgICB0aGlzLl9tb2R1bGVzLmZpbHRlcihtID0+IG0uc3RhdGVDaGFuZ2UpXG4gICAgICAgICAgICAgICAgIC5mb3JFYWNoKG0gPT4gbS5zdGF0ZUNoYW5nZShzdGF0ZSkpO1xuXG4gICAgY29uc3Qge25ld1N0YXRlLCBwYXlsb2FkLCBpc0ZpbmFsfSA9IHN0YXRlO1xuXG4gICAgc3dpdGNoKG5ld1N0YXRlKSB7XG4gICAgICBjYXNlICdTdWNjZXNzJzpcbiAgICAgICAgdGhpcy5fY2xvc2UoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgaWYgKCB0aGlzLl9yZXNvbHZlICkgdGhpcy5fcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdNZWRpdW1Db250ZW1wbGF0aW9uJzpcbiAgICAgICAgaWYgKHRoaXMuX3VzZXJBZ2VudElzTW9iaWxlKCkpXG4gICAgICAgICAgdGhpcy5fc3RhdGVNYWNoaW5lLnRyYW5zaXRpb24oJ3Nob3dJcm1hQnV0dG9uJywgdGhpcy5fZ2V0U2Vzc2lvblVybHMocGF5bG9hZCkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgdGhpcy5fc3RhdGVNYWNoaW5lLnRyYW5zaXRpb24oJ3Nob3dRUkNvZGUnLCB0aGlzLl9nZXRTZXNzaW9uVXJscyhwYXlsb2FkKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCBpc0ZpbmFsICkge1xuICAgICAgICAgIHRoaXMuX2Nsb3NlKCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKCB0aGlzLl9yZWplY3QgKSByZXN1bHQgPyB0aGlzLl9yZWplY3QocmVzdWx0KSA6IHRoaXMuX3JlamVjdChuZXdTdGF0ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgX2Nsb3NlKCkge1xuICAgIHJldHVybiB0aGlzLl9tb2R1bGVzLmZpbHRlcihtID0+IG0uY2xvc2UpXG4gICAgICAucmVkdWNlKFxuICAgICAgICAocHJldiwgbSkgPT4gcHJldi50aGVuKHJldHVyblZhbHVlcyA9PiBtLmNsb3NlKCkudGhlbihyZXMgPT4ge1xuICAgICAgICAgIGlmIChyZXMpIHJldHVyblZhbHVlcy5wdXNoKHJlcylcbiAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICAgICAgICB9KSksXG4gICAgICAgIFByb21pc2UucmVzb2x2ZShbXSlcbiAgICAgIClcbiAgICAgIC50aGVuKHJldHVyblZhbHVlcyA9PiByZXR1cm5WYWx1ZXMubGVuZ3RoID4gMSA/IHJldHVyblZhbHVlcyA6IHJldHVyblZhbHVlc1swXSk7XG4gIH1cblxuICBfdXNlckFnZW50SXNNb2JpbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VzZXJBZ2VudCA9PSdBbmRyb2lkJyB8fCB0aGlzLl91c2VyQWdlbnQgPT0gJ2lPUyc7XG4gIH1cblxuICBfZ2V0U2Vzc2lvblVybHMoc2Vzc2lvblB0cikge1xuICAgIGxldCBqc29uID0gSlNPTi5zdHJpbmdpZnkoc2Vzc2lvblB0cik7XG4gICAgbGV0IHVuaXZlcnNhbExpbmsgPSBgaHR0cHM6Ly9pcm1hLmFwcC8tL3Nlc3Npb24jJHtlbmNvZGVVUklDb21wb25lbnQoanNvbil9YDtcbiAgICBsZXQgbW9iaWxlTGluaztcbiAgICBzd2l0Y2ggKHRoaXMuX3VzZXJBZ2VudCkge1xuICAgICAgY2FzZSAnQW5kcm9pZCc6XG4gICAgICAgIC8vIFVuaXZlcnNhbCBsaW5rcyBhcmUgbm90IHN0YWJsZSBpbiBBbmRyb2lkIHdlYnZpZXdzIGFuZCBjdXN0b20gdGFicywgc28gYWx3YXlzIHVzZSBpbnRlbnQgbGlua3MuXG4gICAgICAgIGxldCBpbnRlbnQgPSBgSW50ZW50O3BhY2thZ2U9b3JnLmlybWFjYXJkLmNhcmRlbXU7c2NoZW1lPWlybWE7bC50aW1lc3RhbXA9JHtEYXRlLm5vdygpfWA7XG4gICAgICAgIGxldCBmYWxsYmFjayA9IGBTLmJyb3dzZXJfZmFsbGJhY2tfdXJsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVuaXZlcnNhbExpbmspfWA7XG4gICAgICAgIG1vYmlsZUxpbmsgPSAgYGludGVudDovL3FyL2pzb24vJHtlbmNvZGVVUklDb21wb25lbnQoanNvbil9IyR7aW50ZW50fTske2ZhbGxiYWNrfTtlbmRgO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1vYmlsZUxpbmsgPSB1bml2ZXJzYWxMaW5rO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFRPRE86IFdoZW4gb2xkIElSTUEgYXBwIGlzIHBoYXNlZCBvdXQsIGFsc28gcmV0dXJuIHVuaXZlcnNhbCBsaW5rIGZvciBRUnMuXG4gICAgICBxcjoganNvbixcbiAgICAgIG1vYmlsZTogbW9iaWxlTGluayxcbiAgICB9O1xuICB9XG5cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/irma-core/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/irma-core/state-machine.js":
/*!********************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/irma-core/state-machine.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar transitions = __webpack_require__(/*! ./state-transitions */ \"../../../afstuderen/irma-frontend-packages/irma-core/state-transitions.js\");\n\nvar userAgent = __webpack_require__(/*! ./user-agent */ \"../../../afstuderen/irma-frontend-packages/irma-core/user-agent.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function StateMachine(debugging) {\n    _classCallCheck(this, StateMachine);\n\n    this._state = transitions.startState;\n    this._debugging = debugging;\n    this._listeners = [];\n    this._inEndState = false;\n    this._disabledTransitions = [];\n  }\n\n  _createClass(StateMachine, [{\n    key: \"currentState\",\n    value: function currentState() {\n      return this._state;\n    }\n  }, {\n    key: \"isEndState\",\n    value: function isEndState() {\n      return this._inEndState;\n    }\n  }, {\n    key: \"isValidTransition\",\n    value: function isValidTransition(transition) {\n      if (this._inEndState || this._disabledTransitions.includes(transition)) return false;\n      return transitions[this._state][transition] != undefined;\n    }\n  }, {\n    key: \"addStateChangeListener\",\n    value: function addStateChangeListener(func) {\n      this._listeners.push(func);\n    }\n  }, {\n    key: \"transition\",\n    value: function transition(_transition, payload) {\n      this._performTransition(_transition, false, payload);\n    }\n  }, {\n    key: \"finalTransition\",\n    value: function finalTransition(transition, payload) {\n      this._performTransition(transition, true, payload);\n    }\n  }, {\n    key: \"_performTransition\",\n    value: function _performTransition(transition, isFinal, payload) {\n      var _this = this;\n\n      var oldState = this._state;\n      if (this._inEndState) throw new Error(\"State machine is in an end state. No transitions are allowed from \".concat(oldState, \".\"));\n\n      var newState = this._getNewState(transition, isFinal);\n\n      if (transition === 'checkUserAgent') {\n        if (this._debugging) console.debug(\"\\uD83C\\uDFB0 Re-checking user agent\");\n        var agent = userAgent();\n        if (newState === 'ShowingQRCode' && ['Android', 'iOS'].includes(agent)) return;\n        if (['ShowingIrmaButton', 'ShowingQRCodeInstead'].includes(newState) && agent === 'Desktop') return;\n      }\n\n      if (transition == 'refused') {\n        newState == 'Uninitialized';\n      }\n\n      this._state = newState;\n      if (this._debugging) console.debug(\"\\uD83C\\uDFB0 State change: '\".concat(oldState, \"' \\u2192 '\").concat(this._state, \"' (because of '\").concat(transition, \"')\")); // State is also an end state when no transitions are available from that state. We exclude the\n      // abort transition since abort is only intended to turn a non end state into an end state.\n\n      var isEnabled = function isEnabled(t) {\n        return !_this._disabledTransitions.includes(t) && t != 'abort';\n      };\n\n      this._inEndState = isFinal || Object.keys(transitions[this._state]).filter(isEnabled).length == 0;\n      if (transition === 'initialize') this._disabledTransitions = payload.canRestart ? [] : ['restart'];\n\n      if (transition === 'restart') {\n        payload = _objectSpread(_objectSpread({}, payload), {}, {\n          canRestart: true\n        });\n      }\n\n      this._listeners.forEach(function (func) {\n        return func({\n          newState: _this._state,\n          oldState: oldState,\n          transition: transition,\n          isFinal: _this._inEndState,\n          payload: payload\n        });\n      });\n    }\n  }, {\n    key: \"_getNewState\",\n    value: function _getNewState(transition, isFinal) {\n      var newState = transitions[this._state][transition];\n\n      var isDisabled = this._disabledTransitions.includes(transition);\n\n      if (!newState || isDisabled) newState = transitions[this._state]['fail'];\n      if (!newState) throw new Error(\"Invalid transition '\".concat(transition, \"' from state '\").concat(this._state, \"' and could not find a \\\"fail\\\" transition to fall back on.\"));\n      if (isDisabled) throw new Error(\"Transition '\".concat(transition, \"' was disabled in state '\").concat(this._state, \"'\"));\n      if (isFinal && !transitions.endStates.includes(newState)) throw new Error(\"Transition '\".concat(transition, \"' from state '\").concat(this._state, \"' is marked as final, but resulting state \").concat(newState, \" cannot be an end state.\"));\n      return newState;\n    }\n  }]);\n\n  return StateMachine;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/irma-core/state-machine.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/irma-core/state-transitions.js":
/*!************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/irma-core/state-transitions.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * This file defines the states for the state machine, plus the different valid\n * transitions to other states from each state.\n *\n * The transition 'fail' is a special one, and will (also) be triggered if we\n * try to apply an invalid transition from that state.\n */\nmodule.exports = {\n  startState: 'Uninitialized',\n  endStates: ['BrowserNotSupported', 'Success', 'Aborted', 'Cancelled', 'TimedOut', 'Error'],\n  Uninitialized: {\n    initialize: 'Loading',\n    // Expected payload: {canRestart: true/false}\n    browserError: 'BrowserNotSupported',\n    // Expected payload: undefined\n    fail: 'Error' // Expected payload: error object\n\n  },\n  Loading: {\n    loaded: 'MediumContemplation',\n    // Expected payload: sessionPtr\n    abort: 'Aborted',\n    // Expected payload: undefined\n    fail: 'Error' // Expected payload: error object\n\n  },\n  MediumContemplation: {\n    showQRCode: 'ShowingQRCode',\n    // Expected payload: {qr: <payload for in QRs, mobile: <app link for launching the IRMA app>}\n    showIrmaButton: 'ShowingIrmaButton',\n    // Expected payload: {qr: <payload for in QRs, mobile: <app link for launching the IRMA app>}\n    abort: 'Aborted',\n    // Expected payload: undefined\n    fail: 'Error' // Expected payload: error object\n\n  },\n  ShowingQRCode: {\n    appConnected: 'ContinueOn2ndDevice',\n    // Expected payload: undefined\n    timeout: 'TimedOut',\n    // Expected payload: undefined\n    abort: 'Aborted',\n    // Expected payload: undefined\n    fail: 'Error',\n    // Expected payload: error object\n    // State change below is only performed if user agent actually changed.\n    checkUserAgent: 'ShowingIrmaButton' // Expected payload: {qr: <payload for in QRs, mobile: <app link for launching the IRMA app>}\n\n  },\n  ContinueOn2ndDevice: {\n    succeed: 'Success',\n    // Expected payload: session result (if any)\n    cancel: 'Cancelled',\n    // Expected payload: undefined\n    restart: 'Loading',\n    // Expected payload: undefined\n    timeout: 'TimedOut',\n    // Expected payload: undefined\n    abort: 'Aborted',\n    // Expected payload: undefined\n    fail: 'Error',\n    // Expected payload: error object\n    refused: 'Refused'\n  },\n  ShowingIrmaButton: {\n    chooseQR: 'ShowingQRCodeInstead',\n    // Expected payload: undefined\n    appConnected: 'ContinueInIrmaApp',\n    // Expected payload: undefined\n    abort: 'Aborted',\n    // Expected payload: undefined\n    fail: 'Error',\n    // Expected payload: error object\n    // We sometimes miss the appConnected transition\n    // on iOS, that's why these transitions are here\n    // too. So we don't 'fail' to the Error state.\n    succeed: 'Success',\n    // Expected payload: session result (if any)\n    cancel: 'Cancelled',\n    // Expected payload: undefined\n    timeout: 'TimedOut',\n    // Expected payload: undefined\n    // State change below is only performed if user agent actually changed.\n    checkUserAgent: 'ShowingQRCode' // Expected payload: {qr: <payload for in QRs, mobile: <app link for launching the IRMA app>}\n\n  },\n  ShowingQRCodeInstead: {\n    appConnected: 'ContinueOn2ndDevice',\n    // Expected payload: undefined\n    showIrmaButton: 'ShowingIrmaButton',\n    // Expected payload: undefined\n    timeout: 'TimedOut',\n    // Expected payload: undefined\n    abort: 'Aborted',\n    // Expected payload: undefined\n    fail: 'Error',\n    // Expected payload: error object\n    // State change below is only performed if user agent actually changed.\n    checkUserAgent: 'ShowingQRCode' // Expected payload: {qr: <payload for in QRs, mobile: <app link for launching the IRMA app>}\n\n  },\n  ContinueInIrmaApp: {\n    succeed: 'Success',\n    // Expected payload: session result (if any)\n    cancel: 'Cancelled',\n    // Expected payload: undefined\n    timeout: 'TimedOut',\n    // Expected payload: undefined\n    abort: 'Aborted',\n    // Expected payload: undefined\n    fail: 'Error' // Expected payload: error object\n\n  },\n  // Possible end states\n  Cancelled: {\n    abort: 'Aborted',\n    // Expected payload: undefined\n    restart: 'Loading' // Expected payload: undefined\n\n  },\n  TimedOut: {\n    abort: 'Aborted',\n    // Expected payload: undefined\n    restart: 'Loading' // Expected payload: undefined\n\n  },\n  Error: {\n    abort: 'Aborted',\n    // Expected payload: undefined\n    restart: 'Loading' // Expected payload: undefined\n\n  },\n  Refused: {\n    abort: 'Aborted',\n    // Expected payload: undefined\n    restart: 'Loading' // Expected payload: undefined\n\n  },\n  BrowserNotSupported: {},\n  Success: {},\n  Aborted: {}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/irma-core/state-transitions.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/irma-core/user-agent.js":
/*!*****************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/irma-core/user-agent.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function () {\n  if (typeof window === 'undefined') return 'nodejs'; // IE11 doesn't have window.navigator, test differently\n  // https://stackoverflow.com/questions/21825157/internet-explorer-11-detection\n\n  if (!!window.MSInputMethodContext && !!document.documentMode) return 'Desktop';\n\n  if (/Android/i.test(window.navigator.userAgent)) {\n    return 'Android';\n  } // https://stackoverflow.com/questions/9038625/detect-if-device-is-ios\n\n\n  if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) return 'iOS'; // https://stackoverflow.com/questions/57776001/how-to-detect-ipad-pro-as-ipad-using-javascript\n\n  if (/Macintosh/.test(navigator.userAgent) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2) return 'iOS'; // Neither Android nor iOS, assuming desktop\n\n  return 'Desktop';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL2lybWEtY29yZS91c2VyLWFnZW50LmpzPzViYmYiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndpbmRvdyIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnQiLCJkb2N1bWVudE1vZGUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiTVNTdHJlYW0iLCJtYXhUb3VjaFBvaW50cyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFNO0FBQ3JCLE1BQUssT0FBT0MsTUFBUCxLQUFrQixXQUF2QixFQUNFLE9BQU8sUUFBUCxDQUZtQixDQUlyQjtBQUNBOztBQUNBLE1BQUksQ0FBQyxDQUFDQSxNQUFNLENBQUNDLG9CQUFULElBQWlDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDQyxZQUFoRCxFQUNFLE9BQU8sU0FBUDs7QUFFRixNQUFJLFdBQVdDLElBQVgsQ0FBZ0JKLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQkMsU0FBakMsQ0FBSixFQUFpRDtBQUMvQyxXQUFPLFNBQVA7QUFDRCxHQVhvQixDQWFyQjs7O0FBQ0EsTUFBSSxtQkFBbUJGLElBQW5CLENBQXdCQyxTQUFTLENBQUNDLFNBQWxDLEtBQWdELENBQUNOLE1BQU0sQ0FBQ08sUUFBNUQsRUFDRSxPQUFPLEtBQVAsQ0FmbUIsQ0FpQnJCOztBQUNBLE1BQUksWUFBWUgsSUFBWixDQUFpQkMsU0FBUyxDQUFDQyxTQUEzQixLQUF5Q0QsU0FBUyxDQUFDRyxjQUFuRCxJQUFxRUgsU0FBUyxDQUFDRyxjQUFWLEdBQTJCLENBQXBHLEVBQ0UsT0FBTyxLQUFQLENBbkJtQixDQXFCckI7O0FBQ0EsU0FBTyxTQUFQO0FBQ0QsQ0F2QkQiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL2lybWEtY29yZS91c2VyLWFnZW50LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiB7XG4gIGlmICggdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgKVxuICAgIHJldHVybiAnbm9kZWpzJztcblxuICAvLyBJRTExIGRvZXNuJ3QgaGF2ZSB3aW5kb3cubmF2aWdhdG9yLCB0ZXN0IGRpZmZlcmVudGx5XG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIxODI1MTU3L2ludGVybmV0LWV4cGxvcmVyLTExLWRldGVjdGlvblxuICBpZiAoISF3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgISFkb2N1bWVudC5kb2N1bWVudE1vZGUpXG4gICAgcmV0dXJuICdEZXNrdG9wJztcblxuICBpZiAoL0FuZHJvaWQvaS50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgIHJldHVybiAnQW5kcm9pZCc7XG4gIH1cblxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85MDM4NjI1L2RldGVjdC1pZi1kZXZpY2UtaXMtaW9zXG4gIGlmICgvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtKVxuICAgIHJldHVybiAnaU9TJztcblxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81Nzc3NjAwMS9ob3ctdG8tZGV0ZWN0LWlwYWQtcHJvLWFzLWlwYWQtdXNpbmctamF2YXNjcmlwdFxuICBpZiAoL01hY2ludG9zaC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMilcbiAgICByZXR1cm4gJ2lPUyc7XG5cbiAgLy8gTmVpdGhlciBBbmRyb2lkIG5vciBpT1MsIGFzc3VtaW5nIGRlc2t0b3BcbiAgcmV0dXJuICdEZXNrdG9wJztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/irma-core/user-agent.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/index.js":
/*!**********************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/index.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar ServerSession = __webpack_require__(/*! ./server-session */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/server-session.js\");\n\nvar ServerState = __webpack_require__(/*! ./server-state */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/server-state.js\");\n\nvar merge = __webpack_require__(/*! deepmerge */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/deepmerge/dist/cjs.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function IrmaClient(_ref) {\n    var stateMachine = _ref.stateMachine,\n        options = _ref.options;\n\n    _classCallCheck(this, IrmaClient);\n\n    this._stateMachine = stateMachine;\n    this._options = this._sanitizeOptions(options);\n    this._session = this._options.session ? new ServerSession(this._options.session) : false;\n  }\n\n  _createClass(IrmaClient, [{\n    key: \"stateChange\",\n    value: function stateChange(_ref2) {\n      var newState = _ref2.newState,\n          payload = _ref2.payload;\n\n      switch (newState) {\n        case 'Loading':\n          this._canRestart = payload.canRestart;\n          return this._startNewSession();\n\n        case 'MediumContemplation':\n          return this._startWatchingServerState(payload);\n\n        case 'Success':\n          this._successPayload = payload;\n        // Fallthrough\n\n        case 'Cancelled':\n        case 'TimedOut':\n        case 'Error':\n        case 'Aborted':\n        case 'Refused':\n          this._serverCloseSession();\n\n          break;\n      }\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this._options.session) {\n        this._stateMachine.transition('initialize', {\n          canRestart: ![undefined, null, false].includes(this._options.session.start)\n        });\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._stateMachine.currentState() === 'Success') return Promise.resolve(this._successPayload);\n      return Promise.resolve();\n    }\n  }, {\n    key: \"_startNewSession\",\n    value: function _startNewSession() {\n      var _this = this;\n\n      if (this._session) {\n        this._session.start().then(function (sessionPtr) {\n          if (_this._stateMachine.currentState() == 'Loading') {\n            _this._stateMachine.transition('loaded', sessionPtr);\n          } else {\n            // State was changed while loading, so cancel again.\n            _this._serverState = new ServerState(sessionPtr.u, _this._options.state);\n\n            _this._serverState.cancel().catch(function (error) {\n              if (_this._options.debugging) console.error(\"Session could not be cancelled:\", error);\n            });\n          }\n        }).catch(function (error) {\n          if (_this._options.debugging) console.error(\"Error starting a new session on the server:\", error);\n\n          _this._handleNoSuccess('fail', error);\n        });\n      }\n    }\n  }, {\n    key: \"_startWatchingServerState\",\n    value: function _startWatchingServerState(payload) {\n      var _this2 = this;\n\n      this._serverState = new ServerState(payload.u, this._options.state);\n\n      try {\n        this._serverState.observe(function (s) {\n          return _this2._serverStateChange(s);\n        }, function (e) {\n          return _this2._serverHandleError(e);\n        });\n      } catch (error) {\n        if (this._options.debugging) console.error(\"Observing server state could not be started: \", error);\n\n        this._handleNoSuccess('fail', error);\n      }\n    }\n  }, {\n    key: \"_serverCloseSession\",\n    value: function _serverCloseSession() {\n      var _this3 = this;\n\n      if (this._serverState) {\n        if (this._serverState.close()) {\n          // If the server is still in an active state, we have to actively cancel.\n          this._serverState.cancel().catch(function (error) {\n            if (_this3._options.debugging) console.error(\"Session could not be cancelled:\", error);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_serverHandleError\",\n    value: function _serverHandleError(error) {\n      if (this._options.debugging) console.error(\"Error while observing server state: \", error);\n\n      this._handleNoSuccess('fail', error);\n    }\n  }, {\n    key: \"_serverStateChange\",\n    value: function _serverStateChange(newState) {\n      if (newState == 'CONNECTED') return this._stateMachine.transition('appConnected');\n\n      this._serverState.close();\n\n      switch (newState) {\n        case 'DONE':\n          // What we hope will happen ;)\n          return this._successStateReached();\n\n        case 'CANCELLED':\n          // This is a conscious choice by a user.\n          return this._handleNoSuccess('cancel');\n\n        case 'TIMEOUT':\n          // This is a known and understood error. We can be explicit to the user.\n          return this._handleNoSuccess('timeout');\n\n        case 'REFUSED':\n          return this._handleNoSuccess('refused');\n\n        default:\n          // Catch unknown errors and give generic error message. We never really\n          // want to get here.\n          if (this._options.debugging) console.error('Unknown state received from server:', newState);\n          return this._handleNoSuccess('fail', new Error('Unknown state received from server'));\n      }\n    }\n  }, {\n    key: \"_successStateReached\",\n    value: function _successStateReached() {\n      var _this4 = this;\n\n      if (this._session) {\n        return this._session.result().then(function (result) {\n          return _this4._stateMachine.transition('succeed', result);\n        }).catch(function (error) {\n          if (_this4._options.debugging) console.error(\"Error fetching session result from the server:\", error);\n\n          if (error.includes(\"403\")) {\n            console.log(\"handle refused\");\n            return _this4._handleNoSuccess('refused');\n          } else {\n            _this4._handleNoSuccess('fail', error);\n          }\n        });\n      }\n\n      this._stateMachine.transition('succeed');\n    }\n  }, {\n    key: \"_handleNoSuccess\",\n    value: function _handleNoSuccess(transition, payload) {\n      if (this._canRestart) return this._stateMachine.transition(transition, payload);\n\n      this._stateMachine.finalTransition(transition, payload);\n    }\n  }, {\n    key: \"_sanitizeOptions\",\n    value: function _sanitizeOptions(options) {\n      var defaults = {\n        session: {\n          url: '',\n          start: {\n            url: function url(o) {\n              return \"\".concat(o.url, \"/session\");\n            },\n            parseResponse: function parseResponse(r) {\n              return r.json();\n            } // And default custom settings for fetch()'s init parameter\n            // https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n\n          },\n          mapping: {\n            sessionPtr: function sessionPtr(r) {\n              return r.sessionPtr;\n            },\n            sessionToken: function sessionToken(r) {\n              return r.token;\n            }\n          },\n          result: {\n            url: function url(o, _ref3) {\n              var sessionToken = _ref3.sessionToken;\n              return \"\".concat(o.url, \"/session/\").concat(sessionToken, \"/result\");\n            },\n            parseResponse: function parseResponse(r) {\n              return r.json();\n            } // And default custom settings for fetch()'s init parameter\n            // https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n\n          }\n        },\n        state: {\n          debugging: options.debugging,\n          serverSentEvents: {\n            url: function url(o) {\n              return \"\".concat(o.url, \"/statusevents\");\n            },\n            timeout: 2000\n          },\n          polling: {\n            url: function url(o) {\n              return \"\".concat(o.url, \"/status\");\n            },\n            interval: 500,\n            startState: 'INITIALIZED'\n          },\n          cancel: {\n            url: function url(o) {\n              return o.url;\n            }\n          }\n        }\n      };\n      return merge(defaults, options);\n    }\n  }]);\n\n  return IrmaClient;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/deepmerge/dist/cjs.js":
/*!************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/deepmerge/dist/cjs.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isMergeableObject = function isMergeableObject(value) {\n  return isNonNullObject(value) && !isSpecial(value);\n};\n\nfunction isNonNullObject(value) {\n  return !!value && _typeof(value) === 'object';\n}\n\nfunction isSpecial(value) {\n  var stringValue = Object.prototype.toString.call(value);\n  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);\n} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\n\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n  return value.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nfunction emptyTarget(val) {\n  return Array.isArray(val) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\n\nfunction defaultArrayMerge(target, source, options) {\n  return target.concat(source).map(function (element) {\n    return cloneUnlessOtherwiseSpecified(element, options);\n  });\n}\n\nfunction getMergeFunction(key, options) {\n  if (!options.customMerge) {\n    return deepmerge;\n  }\n\n  var customMerge = options.customMerge(key);\n  return typeof customMerge === 'function' ? customMerge : deepmerge;\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n    return target.propertyIsEnumerable(symbol);\n  }) : [];\n}\n\nfunction getKeys(target) {\n  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\n\nfunction propertyIsOnObject(object, property) {\n  try {\n    return property in object;\n  } catch (_) {\n    return false;\n  }\n} // Protects from prototype poisoning and unexpected merging up the prototype chain.\n\n\nfunction propertyIsUnsafe(target, key) {\n  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n  var destination = {};\n\n  if (options.isMergeableObject(target)) {\n    getKeys(target).forEach(function (key) {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n    });\n  }\n\n  getKeys(source).forEach(function (key) {\n    if (propertyIsUnsafe(target, key)) {\n      return;\n    }\n\n    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n    } else {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n    }\n  });\n  return destination;\n}\n\nfunction deepmerge(target, source, options) {\n  options = options || {};\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n  options.isMergeableObject = options.isMergeableObject || isMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n  // implementations can use it. The caller may not replace it.\n\n  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n  var sourceIsArray = Array.isArray(source);\n  var targetIsArray = Array.isArray(target);\n  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options);\n  } else if (sourceIsArray) {\n    return options.arrayMerge(target, source, options);\n  } else {\n    return mergeObject(target, source, options);\n  }\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n  if (!Array.isArray(array)) {\n    throw new Error('first argument should be an array');\n  }\n\n  return array.reduce(function (prev, next) {\n    return deepmerge(prev, next, options);\n  }, {});\n};\n\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/deepmerge/dist/cjs.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/eventsource/lib/eventsource.js":
/*!*********************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/eventsource/lib/eventsource.js ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, Buffer) {var original = __webpack_require__(/*! original */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/original/index.js\");\n\nvar parse = __webpack_require__(/*! url */ \"./node_modules/url/url.js\").parse;\n\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n\nvar https = __webpack_require__(/*! https */ \"./node_modules/https-browserify/index.js\");\n\nvar http = __webpack_require__(/*! http */ \"./node_modules/stream-http/index.js\");\n\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar httpsOptions = ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'rejectUnauthorized', 'secureProtocol', 'servername', 'checkServerIdentity'];\nvar bom = [239, 187, 191];\nvar colon = 58;\nvar space = 32;\nvar lineFeed = 10;\nvar carriageReturn = 13;\n\nfunction hasBom(buf) {\n  return bom.every(function (charCode, index) {\n    return buf[index] === charCode;\n  });\n}\n/**\n * Creates a new EventSource object\n *\n * @param {String} url the URL to which to connect\n * @param {Object} [eventSourceInitDict] extra init params. See README for details.\n * @api public\n **/\n\n\nfunction EventSource(url, eventSourceInitDict) {\n  var readyState = EventSource.CONNECTING;\n  Object.defineProperty(this, 'readyState', {\n    get: function get() {\n      return readyState;\n    }\n  });\n  Object.defineProperty(this, 'url', {\n    get: function get() {\n      return url;\n    }\n  });\n  var self = this;\n  self.reconnectInterval = 1000;\n\n  function onConnectionClosed(message) {\n    if (readyState === EventSource.CLOSED) return;\n    readyState = EventSource.CONNECTING;\n\n    _emit('error', new Event('error', {\n      message: message\n    })); // The url may have been changed by a temporary\n    // redirect. If that's the case, revert it now.\n\n\n    if (reconnectUrl) {\n      url = reconnectUrl;\n      reconnectUrl = null;\n    }\n\n    setTimeout(function () {\n      if (readyState !== EventSource.CONNECTING) {\n        return;\n      }\n\n      connect();\n    }, self.reconnectInterval);\n  }\n\n  var req;\n  var lastEventId = '';\n\n  if (eventSourceInitDict && eventSourceInitDict.headers && eventSourceInitDict.headers['Last-Event-ID']) {\n    lastEventId = eventSourceInitDict.headers['Last-Event-ID'];\n    delete eventSourceInitDict.headers['Last-Event-ID'];\n  }\n\n  var discardTrailingNewline = false;\n  var data = '';\n  var eventName = '';\n  var reconnectUrl = null;\n\n  function connect() {\n    var options = parse(url);\n    var isSecure = options.protocol === 'https:';\n    options.headers = {\n      'Cache-Control': 'no-cache',\n      'Accept': 'text/event-stream'\n    };\n    if (lastEventId) options.headers['Last-Event-ID'] = lastEventId;\n\n    if (eventSourceInitDict && eventSourceInitDict.headers) {\n      for (var i in eventSourceInitDict.headers) {\n        var header = eventSourceInitDict.headers[i];\n\n        if (header) {\n          options.headers[i] = header;\n        }\n      }\n    } // Legacy: this should be specified as `eventSourceInitDict.https.rejectUnauthorized`,\n    // but for now exists as a backwards-compatibility layer\n\n\n    options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized); // If specify http proxy, make the request to sent to the proxy server,\n    // and include the original url in path and Host headers\n\n    var useProxy = eventSourceInitDict && eventSourceInitDict.proxy;\n\n    if (useProxy) {\n      var proxy = parse(eventSourceInitDict.proxy);\n      isSecure = proxy.protocol === 'https:';\n      options.protocol = isSecure ? 'https:' : 'http:';\n      options.path = url;\n      options.headers.Host = options.host;\n      options.hostname = proxy.hostname;\n      options.host = proxy.host;\n      options.port = proxy.port;\n    } // If https options are specified, merge them into the request options\n\n\n    if (eventSourceInitDict && eventSourceInitDict.https) {\n      for (var optName in eventSourceInitDict.https) {\n        if (httpsOptions.indexOf(optName) === -1) {\n          continue;\n        }\n\n        var option = eventSourceInitDict.https[optName];\n\n        if (option !== undefined) {\n          options[optName] = option;\n        }\n      }\n    } // Pass this on to the XHR\n\n\n    if (eventSourceInitDict && eventSourceInitDict.withCredentials !== undefined) {\n      options.withCredentials = eventSourceInitDict.withCredentials;\n    }\n\n    req = (isSecure ? https : http).request(options, function (res) {\n      // Handle HTTP errors\n      if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {\n        _emit('error', new Event('error', {\n          status: res.statusCode,\n          message: res.statusMessage\n        }));\n\n        onConnectionClosed();\n        return;\n      } // Handle HTTP redirects\n\n\n      if (res.statusCode === 301 || res.statusCode === 307) {\n        if (!res.headers.location) {\n          // Server sent redirect response without Location header.\n          _emit('error', new Event('error', {\n            status: res.statusCode,\n            message: res.statusMessage\n          }));\n\n          return;\n        }\n\n        if (res.statusCode === 307) reconnectUrl = url;\n        url = res.headers.location;\n        process.nextTick(connect);\n        return;\n      }\n\n      if (res.statusCode !== 200) {\n        _emit('error', new Event('error', {\n          status: res.statusCode,\n          message: res.statusMessage\n        }));\n\n        return self.close();\n      }\n\n      readyState = EventSource.OPEN;\n      res.on('close', function () {\n        res.removeAllListeners('close');\n        res.removeAllListeners('end');\n        onConnectionClosed();\n      });\n      res.on('end', function () {\n        res.removeAllListeners('close');\n        res.removeAllListeners('end');\n        onConnectionClosed();\n      });\n\n      _emit('open', new Event('open')); // text/event-stream parser adapted from webkit's\n      // Source/WebCore/page/EventSource.cpp\n\n\n      var isFirst = true;\n      var buf;\n      res.on('data', function (chunk) {\n        buf = buf ? Buffer.concat([buf, chunk]) : chunk;\n\n        if (isFirst && hasBom(buf)) {\n          buf = buf.slice(bom.length);\n        }\n\n        isFirst = false;\n        var pos = 0;\n        var length = buf.length;\n\n        while (pos < length) {\n          if (discardTrailingNewline) {\n            if (buf[pos] === lineFeed) {\n              ++pos;\n            }\n\n            discardTrailingNewline = false;\n          }\n\n          var lineLength = -1;\n          var fieldLength = -1;\n          var c;\n\n          for (var i = pos; lineLength < 0 && i < length; ++i) {\n            c = buf[i];\n\n            if (c === colon) {\n              if (fieldLength < 0) {\n                fieldLength = i - pos;\n              }\n            } else if (c === carriageReturn) {\n              discardTrailingNewline = true;\n              lineLength = i - pos;\n            } else if (c === lineFeed) {\n              lineLength = i - pos;\n            }\n          }\n\n          if (lineLength < 0) {\n            break;\n          }\n\n          parseEventStreamLine(buf, pos, fieldLength, lineLength);\n          pos += lineLength + 1;\n        }\n\n        if (pos === length) {\n          buf = void 0;\n        } else if (pos > 0) {\n          buf = buf.slice(pos);\n        }\n      });\n    });\n    req.on('error', function (err) {\n      onConnectionClosed(err.message);\n    });\n    if (req.setNoDelay) req.setNoDelay(true);\n    req.end();\n  }\n\n  connect();\n\n  function _emit() {\n    if (self.listeners(arguments[0]).length > 0) {\n      self.emit.apply(self, arguments);\n    }\n  }\n\n  this._close = function () {\n    if (readyState === EventSource.CLOSED) return;\n    readyState = EventSource.CLOSED;\n    if (req.abort) req.abort();\n    if (req.xhr && req.xhr.abort) req.xhr.abort();\n  };\n\n  function parseEventStreamLine(buf, pos, fieldLength, lineLength) {\n    if (lineLength === 0) {\n      if (data.length > 0) {\n        var type = eventName || 'message';\n\n        _emit(type, new MessageEvent(type, {\n          data: data.slice(0, -1),\n          // remove trailing newline\n          lastEventId: lastEventId,\n          origin: original(url)\n        }));\n\n        data = '';\n      }\n\n      eventName = void 0;\n    } else if (fieldLength > 0) {\n      var noValue = fieldLength < 0;\n      var step = 0;\n      var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();\n\n      if (noValue) {\n        step = lineLength;\n      } else if (buf[pos + fieldLength + 1] !== space) {\n        step = fieldLength + 1;\n      } else {\n        step = fieldLength + 2;\n      }\n\n      pos += step;\n      var valueLength = lineLength - step;\n      var value = buf.slice(pos, pos + valueLength).toString();\n\n      if (field === 'data') {\n        data += value + '\\n';\n      } else if (field === 'event') {\n        eventName = value;\n      } else if (field === 'id') {\n        lastEventId = value;\n      } else if (field === 'retry') {\n        var retry = parseInt(value, 10);\n\n        if (!Number.isNaN(retry)) {\n          self.reconnectInterval = retry;\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventSource;\nutil.inherits(EventSource, events.EventEmitter);\nEventSource.prototype.constructor = EventSource; // make stacktraces readable\n\n['open', 'error', 'message'].forEach(function (method) {\n  Object.defineProperty(EventSource.prototype, 'on' + method, {\n    /**\n     * Returns the current listener\n     *\n     * @return {Mixed} the set function or undefined\n     * @api private\n     */\n    get: function get() {\n      var listener = this.listeners(method)[0];\n      return listener ? listener._listener ? listener._listener : listener : undefined;\n    },\n\n    /**\n     * Start listening for events\n     *\n     * @param {Function} listener the listener\n     * @return {Mixed} the set function or undefined\n     * @api private\n     */\n    set: function set(listener) {\n      this.removeAllListeners(method);\n      this.addEventListener(method, listener);\n    }\n  });\n});\n/**\n * Ready states\n */\n\nObject.defineProperty(EventSource, 'CONNECTING', {\n  enumerable: true,\n  value: 0\n});\nObject.defineProperty(EventSource, 'OPEN', {\n  enumerable: true,\n  value: 1\n});\nObject.defineProperty(EventSource, 'CLOSED', {\n  enumerable: true,\n  value: 2\n});\nEventSource.prototype.CONNECTING = 0;\nEventSource.prototype.OPEN = 1;\nEventSource.prototype.CLOSED = 2;\n/**\n * Closes the connection, if one is made, and sets the readyState attribute to 2 (closed)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close\n * @api public\n */\n\nEventSource.prototype.close = function () {\n  this._close();\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using addEventListener.\n *\n * @param {String} type A string representing the event type to listen out for\n * @param {Function} listener callback\n * @see https://developer.mozilla.org/en/DOM/element.addEventListener\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */\n\n\nEventSource.prototype.addEventListener = function addEventListener(type, listener) {\n  if (typeof listener === 'function') {\n    // store a reference so we can return the original function again\n    listener._listener = listener;\n    this.on(type, listener);\n  }\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using dispatchEvent.\n *\n * @param {Event} event An event to be dispatched\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent\n * @api public\n */\n\n\nEventSource.prototype.dispatchEvent = function dispatchEvent(event) {\n  if (!event.type) {\n    throw new Error('UNSPECIFIED_EVENT_TYPE_ERR');\n  } // if event is instance of an CustomEvent (or has 'details' property),\n  // send the detail object as the payload for the event\n\n\n  this.emit(event.type, event.detail);\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using removeEventListener.\n *\n * @param {String} type A string representing the event type to remove\n * @param {Function} listener callback\n * @see https://developer.mozilla.org/en/DOM/element.removeEventListener\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */\n\n\nEventSource.prototype.removeEventListener = function removeEventListener(type, listener) {\n  if (typeof listener === 'function') {\n    listener._listener = undefined;\n    this.removeListener(type, listener);\n  }\n};\n/**\n * W3C Event\n *\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event\n * @api private\n */\n\n\nfunction Event(type, optionalProperties) {\n  Object.defineProperty(this, 'type', {\n    writable: false,\n    value: type,\n    enumerable: true\n  });\n\n  if (optionalProperties) {\n    for (var f in optionalProperties) {\n      if (optionalProperties.hasOwnProperty(f)) {\n        Object.defineProperty(this, f, {\n          writable: false,\n          value: optionalProperties[f],\n          enumerable: true\n        });\n      }\n    }\n  }\n}\n/**\n * W3C MessageEvent\n *\n * @see http://www.w3.org/TR/webmessaging/#event-definitions\n * @api private\n */\n\n\nfunction MessageEvent(type, eventInitDict) {\n  Object.defineProperty(this, 'type', {\n    writable: false,\n    value: type,\n    enumerable: true\n  });\n\n  for (var f in eventInitDict) {\n    if (eventInitDict.hasOwnProperty(f)) {\n      Object.defineProperty(this, f, {\n        writable: false,\n        value: eventInitDict[f],\n        enumerable: true\n      });\n    }\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../afstuderen-master/Afstuderen/Cerina/node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../../../../../../afstuderen-master/Afstuderen/Cerina/node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/eventsource/lib/eventsource.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/isomorphic-fetch/fetch-npm-browserify.js":
/*!*******************************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/isomorphic-fetch/fetch-npm-browserify.js ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\n__webpack_require__(/*! whatwg-fetch */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/whatwg-fetch/dist/fetch.umd.js\");\n\nmodule.exports = self.fetch.bind(self);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanM/MTAzZiJdLCJuYW1lcyI6WyJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNlbGYiLCJmZXRjaCIsImJpbmQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLG1CQUFPLENBQUMsZ0lBQUQsQ0FBUDs7QUFDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsSUFBWCxDQUFnQkYsSUFBaEIsQ0FBakIiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/isomorphic-fetch/fetch-npm-browserify.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/original/index.js":
/*!********************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/original/index.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar parse = __webpack_require__(/*! url-parse */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/url-parse/index.js\");\n/**\n * Transform an URL to a valid origin value.\n *\n * @param {String|Object} url URL to transform to it's origin.\n * @returns {String} The origin.\n * @api public\n */\n\n\nfunction origin(url) {\n  if ('string' === typeof url) url = parse(url); //\n  // 6.2.  ASCII Serialization of an Origin\n  // http://tools.ietf.org/html/rfc6454#section-6.2\n  //\n\n  if (!url.protocol || !url.hostname) return 'null'; //\n  // 4. Origin of a URI\n  // http://tools.ietf.org/html/rfc6454#section-4\n  //\n  // States that url.scheme, host should be converted to lower case. This also\n  // makes it easier to match origins as everything is just lower case.\n  //\n\n  return (url.protocol + '//' + url.host).toLowerCase();\n}\n/**\n * Check if the origins are the same.\n *\n * @param {String} a URL or origin of a.\n * @param {String} b URL or origin of b.\n * @returns {Boolean}\n * @api public\n */\n\n\norigin.same = function same(a, b) {\n  return origin(a) === origin(b);\n}; //\n// Expose the origin\n//\n\n\nmodule.exports = origin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvbm9kZV9tb2R1bGVzL29yaWdpbmFsL2luZGV4LmpzPzU5OWMiXSwibmFtZXMiOlsicGFyc2UiLCJyZXF1aXJlIiwib3JpZ2luIiwidXJsIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsImhvc3QiLCJ0b0xvd2VyQ2FzZSIsInNhbWUiLCJhIiwiYiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxpSEFBRCxDQUFuQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTQyxNQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNuQixNQUFJLGFBQWEsT0FBT0EsR0FBeEIsRUFBNkJBLEdBQUcsR0FBR0gsS0FBSyxDQUFDRyxHQUFELENBQVgsQ0FEVixDQUduQjtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFJLENBQUNBLEdBQUcsQ0FBQ0MsUUFBTCxJQUFpQixDQUFDRCxHQUFHLENBQUNFLFFBQTFCLEVBQW9DLE9BQU8sTUFBUCxDQVBqQixDQVNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFPLENBQUNGLEdBQUcsQ0FBQ0MsUUFBSixHQUFjLElBQWQsR0FBb0JELEdBQUcsQ0FBQ0csSUFBekIsRUFBK0JDLFdBQS9CLEVBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBTCxNQUFNLENBQUNNLElBQVAsR0FBYyxTQUFTQSxJQUFULENBQWNDLENBQWQsRUFBaUJDLENBQWpCLEVBQW9CO0FBQ2hDLFNBQU9SLE1BQU0sQ0FBQ08sQ0FBRCxDQUFOLEtBQWNQLE1BQU0sQ0FBQ1EsQ0FBRCxDQUEzQjtBQUNELENBRkQsQyxDQUlBO0FBQ0E7QUFDQTs7O0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlYsTUFBakIiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvbm9kZV9tb2R1bGVzL29yaWdpbmFsL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGFyc2UgPSByZXF1aXJlKCd1cmwtcGFyc2UnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gVVJMIHRvIGEgdmFsaWQgb3JpZ2luIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gdXJsIFVSTCB0byB0cmFuc2Zvcm0gdG8gaXQncyBvcmlnaW4uXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgb3JpZ2luLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gb3JpZ2luKHVybCkge1xuICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB1cmwpIHVybCA9IHBhcnNlKHVybCk7XG5cbiAgLy9cbiAgLy8gNi4yLiAgQVNDSUkgU2VyaWFsaXphdGlvbiBvZiBhbiBPcmlnaW5cbiAgLy8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjQ1NCNzZWN0aW9uLTYuMlxuICAvL1xuICBpZiAoIXVybC5wcm90b2NvbCB8fCAhdXJsLmhvc3RuYW1lKSByZXR1cm4gJ251bGwnO1xuXG4gIC8vXG4gIC8vIDQuIE9yaWdpbiBvZiBhIFVSSVxuICAvLyBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NDU0I3NlY3Rpb24tNFxuICAvL1xuICAvLyBTdGF0ZXMgdGhhdCB1cmwuc2NoZW1lLCBob3N0IHNob3VsZCBiZSBjb252ZXJ0ZWQgdG8gbG93ZXIgY2FzZS4gVGhpcyBhbHNvXG4gIC8vIG1ha2VzIGl0IGVhc2llciB0byBtYXRjaCBvcmlnaW5zIGFzIGV2ZXJ5dGhpbmcgaXMganVzdCBsb3dlciBjYXNlLlxuICAvL1xuICByZXR1cm4gKHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3QpLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIG9yaWdpbnMgYXJlIHRoZSBzYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhIFVSTCBvciBvcmlnaW4gb2YgYS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBiIFVSTCBvciBvcmlnaW4gb2YgYi5cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xub3JpZ2luLnNhbWUgPSBmdW5jdGlvbiBzYW1lKGEsIGIpIHtcbiAgcmV0dXJuIG9yaWdpbihhKSA9PT0gb3JpZ2luKGIpO1xufTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgb3JpZ2luXG4vL1xubW9kdWxlLmV4cG9ydHMgPSBvcmlnaW47XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/original/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/querystringify/index.js":
/*!**************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/querystringify/index.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar has = Object.prototype.hasOwnProperty,\n    undef;\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\n\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\n\n\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\n\n\nfunction querystring(query) {\n  var parser = /([^=?&]+)=?([^&]*)/g,\n      result = {},\n      part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1]),\n        value = decode(part[2]); //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\n\n\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n  var pairs = [],\n      value,\n      key; //\n  // Optionally prefix with a '?' if needed\n  //\n\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key]; //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encodeURIComponent(key);\n      value = encodeURIComponent(value); //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n\n      if (key === null || value === null) continue;\n      pairs.push(key + '=' + value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n} //\n// Expose the module.\n//\n\n\nexports.stringify = querystringify;\nexports.parse = querystring;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5naWZ5L2luZGV4LmpzP2JhOTciXSwibmFtZXMiOlsiaGFzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJ1bmRlZiIsImRlY29kZSIsImlucHV0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImUiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxdWVyeXN0cmluZyIsInF1ZXJ5IiwicGFyc2VyIiwicmVzdWx0IiwicGFydCIsImV4ZWMiLCJrZXkiLCJ2YWx1ZSIsInF1ZXJ5c3RyaW5naWZ5Iiwib2JqIiwicHJlZml4IiwicGFpcnMiLCJjYWxsIiwiaXNOYU4iLCJwdXNoIiwibGVuZ3RoIiwiam9pbiIsImV4cG9ydHMiLCJzdHJpbmdpZnkiLCJwYXJzZSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsR0FBRyxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQTNCO0FBQUEsSUFDSUMsS0FESjtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNDLE1BQVQsQ0FBZ0JDLEtBQWhCLEVBQXVCO0FBQ3JCLE1BQUk7QUFDRixXQUFPQyxrQkFBa0IsQ0FBQ0QsS0FBSyxDQUFDRSxPQUFOLENBQWMsS0FBZCxFQUFxQixHQUFyQixDQUFELENBQXpCO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWLFdBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0MsTUFBVCxDQUFnQkosS0FBaEIsRUFBdUI7QUFDckIsTUFBSTtBQUNGLFdBQU9LLGtCQUFrQixDQUFDTCxLQUFELENBQXpCO0FBQ0QsR0FGRCxDQUVFLE9BQU9HLENBQVAsRUFBVTtBQUNWLFdBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0csV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDMUIsTUFBSUMsTUFBTSxHQUFHLHFCQUFiO0FBQUEsTUFDSUMsTUFBTSxHQUFHLEVBRGI7QUFBQSxNQUVJQyxJQUZKOztBQUlBLFNBQU9BLElBQUksR0FBR0YsTUFBTSxDQUFDRyxJQUFQLENBQVlKLEtBQVosQ0FBZCxFQUFrQztBQUNoQyxRQUFJSyxHQUFHLEdBQUdiLE1BQU0sQ0FBQ1csSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUFoQjtBQUFBLFFBQ0lHLEtBQUssR0FBR2QsTUFBTSxDQUFDVyxJQUFJLENBQUMsQ0FBRCxDQUFMLENBRGxCLENBRGdDLENBSWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsUUFBSUUsR0FBRyxLQUFLLElBQVIsSUFBZ0JDLEtBQUssS0FBSyxJQUExQixJQUFrQ0QsR0FBRyxJQUFJSCxNQUE3QyxFQUFxRDtBQUNyREEsVUFBTSxDQUFDRyxHQUFELENBQU4sR0FBY0MsS0FBZDtBQUNEOztBQUVELFNBQU9KLE1BQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNLLGNBQVQsQ0FBd0JDLEdBQXhCLEVBQTZCQyxNQUE3QixFQUFxQztBQUNuQ0EsUUFBTSxHQUFHQSxNQUFNLElBQUksRUFBbkI7QUFFQSxNQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUFBLE1BQ0lKLEtBREo7QUFBQSxNQUVJRCxHQUZKLENBSG1DLENBT25DO0FBQ0E7QUFDQTs7QUFDQSxNQUFJLGFBQWEsT0FBT0ksTUFBeEIsRUFBZ0NBLE1BQU0sR0FBRyxHQUFUOztBQUVoQyxPQUFLSixHQUFMLElBQVlHLEdBQVosRUFBaUI7QUFDZixRQUFJckIsR0FBRyxDQUFDd0IsSUFBSixDQUFTSCxHQUFULEVBQWNILEdBQWQsQ0FBSixFQUF3QjtBQUN0QkMsV0FBSyxHQUFHRSxHQUFHLENBQUNILEdBQUQsQ0FBWCxDQURzQixDQUd0QjtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFJLENBQUNDLEtBQUQsS0FBV0EsS0FBSyxLQUFLLElBQVYsSUFBa0JBLEtBQUssS0FBS2YsS0FBNUIsSUFBcUNxQixLQUFLLENBQUNOLEtBQUQsQ0FBckQsQ0FBSixFQUFtRTtBQUNqRUEsYUFBSyxHQUFHLEVBQVI7QUFDRDs7QUFFREQsU0FBRyxHQUFHUCxrQkFBa0IsQ0FBQ08sR0FBRCxDQUF4QjtBQUNBQyxXQUFLLEdBQUdSLGtCQUFrQixDQUFDUSxLQUFELENBQTFCLENBWnNCLENBY3RCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQUlELEdBQUcsS0FBSyxJQUFSLElBQWdCQyxLQUFLLEtBQUssSUFBOUIsRUFBb0M7QUFDcENJLFdBQUssQ0FBQ0csSUFBTixDQUFXUixHQUFHLEdBQUUsR0FBTCxHQUFVQyxLQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0ksS0FBSyxDQUFDSSxNQUFOLEdBQWVMLE1BQU0sR0FBR0MsS0FBSyxDQUFDSyxJQUFOLENBQVcsR0FBWCxDQUF4QixHQUEwQyxFQUFqRDtBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUNBQyxPQUFPLENBQUNDLFNBQVIsR0FBb0JWLGNBQXBCO0FBQ0FTLE9BQU8sQ0FBQ0UsS0FBUixHQUFnQm5CLFdBQWhCIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtY2xpZW50L25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZ2lmeS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCB1bmRlZjtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBlbmNvZGVkLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8mXSspPT8oW14mXSopL2dcbiAgICAsIHJlc3VsdCA9IHt9XG4gICAgLCBwYXJ0O1xuXG4gIHdoaWxlIChwYXJ0ID0gcGFyc2VyLmV4ZWMocXVlcnkpKSB7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0WzFdKVxuICAgICAgLCB2YWx1ZSA9IGRlY29kZShwYXJ0WzJdKTtcblxuICAgIC8vXG4gICAgLy8gUHJldmVudCBvdmVycmlkaW5nIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMuIFRoaXMgZW5zdXJlcyB0aGF0IGJ1aWxkLWluXG4gICAgLy8gbWV0aG9kcyBsaWtlIGB0b1N0cmluZ2Agb3IgX19wcm90b19fIGFyZSBub3Qgb3ZlcnJpZGVuIGJ5IG1hbGljaW91c1xuICAgIC8vIHF1ZXJ5c3RyaW5ncy5cbiAgICAvL1xuICAgIC8vIEluIHRoZSBjYXNlIGlmIGZhaWxlZCBkZWNvZGluZywgd2Ugd2FudCB0byBvbWl0IHRoZSBrZXkvdmFsdWUgcGFpcnNcbiAgICAvLyBmcm9tIHRoZSByZXN1bHQuXG4gICAgLy9cbiAgICBpZiAoa2V5ID09PSBudWxsIHx8IHZhbHVlID09PSBudWxsIHx8IGtleSBpbiByZXN1bHQpIGNvbnRpbnVlO1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhIHF1ZXJ5IHN0cmluZyB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBPYmplY3QgdGhhdCBzaG91bGQgYmUgdHJhbnNmb3JtZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4IE9wdGlvbmFsIHByZWZpeC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBxdWVyeXN0cmluZ2lmeShvYmosIHByZWZpeCkge1xuICBwcmVmaXggPSBwcmVmaXggfHwgJyc7XG5cbiAgdmFyIHBhaXJzID0gW11cbiAgICAsIHZhbHVlXG4gICAgLCBrZXk7XG5cbiAgLy9cbiAgLy8gT3B0aW9uYWxseSBwcmVmaXggd2l0aCBhICc/JyBpZiBuZWVkZWRcbiAgLy9cbiAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgcHJlZml4KSBwcmVmaXggPSAnPyc7XG5cbiAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFsdWUgPSBvYmpba2V5XTtcblxuICAgICAgLy9cbiAgICAgIC8vIEVkZ2UgY2FzZXMgd2hlcmUgd2UgYWN0dWFsbHkgd2FudCB0byBlbmNvZGUgdGhlIHZhbHVlIHRvIGFuIGVtcHR5XG4gICAgICAvLyBzdHJpbmcgaW5zdGVhZCBvZiB0aGUgc3RyaW5naWZpZWQgdmFsdWUuXG4gICAgICAvL1xuICAgICAgaWYgKCF2YWx1ZSAmJiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmIHx8IGlzTmFOKHZhbHVlKSkpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAga2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG4gICAgICB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cbiAgICAgIC8vXG4gICAgICAvLyBJZiB3ZSBmYWlsZWQgdG8gZW5jb2RlIHRoZSBzdHJpbmdzLCB3ZSBzaG91bGQgYmFpbCBvdXQgYXMgd2UgZG9uJ3RcbiAgICAgIC8vIHdhbnQgdG8gYWRkIGludmFsaWQgc3RyaW5ncyB0byB0aGUgcXVlcnkuXG4gICAgICAvL1xuICAgICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgICBwYWlycy5wdXNoKGtleSArJz0nKyB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhaXJzLmxlbmd0aCA/IHByZWZpeCArIHBhaXJzLmpvaW4oJyYnKSA6ICcnO1xufVxuXG4vL1xuLy8gRXhwb3NlIHRoZSBtb2R1bGUuXG4vL1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBxdWVyeXN0cmluZ2lmeTtcbmV4cG9ydHMucGFyc2UgPSBxdWVyeXN0cmluZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/querystringify/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/requires-port/index.js":
/*!*************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/requires-port/index.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\n\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n      return port !== 80;\n\n    case 'https':\n    case 'wss':\n      return port !== 443;\n\n    case 'ftp':\n      return port !== 21;\n\n    case 'gopher':\n      return port !== 70;\n\n    case 'file':\n      return false;\n  }\n\n  return port !== 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvbm9kZV9tb2R1bGVzL3JlcXVpcmVzLXBvcnQvaW5kZXguanM/MmNmMSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZWQiLCJwb3J0IiwicHJvdG9jb2wiLCJzcGxpdCJdLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsUUFBeEIsRUFBa0M7QUFDakRBLFVBQVEsR0FBR0EsUUFBUSxDQUFDQyxLQUFULENBQWUsR0FBZixFQUFvQixDQUFwQixDQUFYO0FBQ0FGLE1BQUksR0FBRyxDQUFDQSxJQUFSO0FBRUEsTUFBSSxDQUFDQSxJQUFMLEVBQVcsT0FBTyxLQUFQOztBQUVYLFVBQVFDLFFBQVI7QUFDRSxTQUFLLE1BQUw7QUFDQSxTQUFLLElBQUw7QUFDQSxhQUFPRCxJQUFJLEtBQUssRUFBaEI7O0FBRUEsU0FBSyxPQUFMO0FBQ0EsU0FBSyxLQUFMO0FBQ0EsYUFBT0EsSUFBSSxLQUFLLEdBQWhCOztBQUVBLFNBQUssS0FBTDtBQUNBLGFBQU9BLElBQUksS0FBSyxFQUFoQjs7QUFFQSxTQUFLLFFBQUw7QUFDQSxhQUFPQSxJQUFJLEtBQUssRUFBaEI7O0FBRUEsU0FBSyxNQUFMO0FBQ0EsYUFBTyxLQUFQO0FBaEJGOztBQW1CQSxTQUFPQSxJQUFJLEtBQUssQ0FBaEI7QUFDRCxDQTFCRCIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLWNsaWVudC9ub2RlX21vZHVsZXMvcmVxdWlyZXMtcG9ydC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSdyZSByZXF1aXJlZCB0byBhZGQgYSBwb3J0IG51bWJlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZGVmYXVsdC1wb3J0XG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHBvcnQgUG9ydCBudW1iZXIgd2UgbmVlZCB0byBjaGVja1xuICogQHBhcmFtIHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJcyBpdCBhIGRlZmF1bHQgcG9ydCBmb3IgdGhlIGdpdmVuIHByb3RvY29sXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXF1aXJlZChwb3J0LCBwcm90b2NvbCkge1xuICBwcm90b2NvbCA9IHByb3RvY29sLnNwbGl0KCc6JylbMF07XG4gIHBvcnQgPSArcG9ydDtcblxuICBpZiAoIXBvcnQpIHJldHVybiBmYWxzZTtcblxuICBzd2l0Y2ggKHByb3RvY29sKSB7XG4gICAgY2FzZSAnaHR0cCc6XG4gICAgY2FzZSAnd3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA4MDtcblxuICAgIGNhc2UgJ2h0dHBzJzpcbiAgICBjYXNlICd3c3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA0NDM7XG5cbiAgICBjYXNlICdmdHAnOlxuICAgIHJldHVybiBwb3J0ICE9PSAyMTtcblxuICAgIGNhc2UgJ2dvcGhlcic6XG4gICAgcmV0dXJuIHBvcnQgIT09IDcwO1xuXG4gICAgY2FzZSAnZmlsZSc6XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHBvcnQgIT09IDA7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/requires-port/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/url-parse/index.js":
/*!*********************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/url-parse/index.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar required = __webpack_require__(/*! requires-port */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/requires-port/index.js\"),\n    qs = __webpack_require__(/*! querystringify */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/querystringify/index.js\"),\n    slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//,\n    protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\S\\s]*)/i,\n    whitespace = \"[\\\\x09\\\\x0A\\\\x0B\\\\x0C\\\\x0D\\\\x20\\\\xA0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\u2028\\\\u2029\\\\uFEFF]\",\n    left = new RegExp('^' + whitespace + '+');\n/**\n * Trim a given string.\n *\n * @param {String} str String to trim.\n * @public\n */\n\n\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(left, '');\n}\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\n\n\nvar rules = [['#', 'hash'], // Extract from the back.\n['?', 'query'], // Extract from the back.\nfunction sanitize(address) {\n  // Sanitize what is left of the address\n  return address.replace('\\\\', '/');\n}, ['/', 'pathname'], // Extract from the back.\n['@', 'auth', 1], // Extract from the front.\n[NaN, 'host', undefined, 1, 1], // Set left over value.\n[/:(\\d+)$/, 'port', undefined, 1], // RegExp the back.\n[NaN, 'hostname', undefined, 1, 1] // Set left over.\n];\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\n\nvar ignore = {\n  hash: 1,\n  query: 1\n};\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\n\nfunction lolcation(loc) {\n  var globalVar;\n  if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {},\n      type = _typeof(loc),\n      key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n\n    for (key in ignore) {\n      delete finaldestination[key];\n    }\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\n\n\nfunction extractProtocol(address) {\n  address = trimLeft(address);\n  var match = protocolre.exec(address);\n  return {\n    protocol: match[1] ? match[1].toLowerCase() : '',\n    slashes: !!match[2],\n    rest: match[3]\n  };\n}\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\n\n\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),\n      i = path.length,\n      last = path[i - 1],\n      unshift = false,\n      up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n  return path.join('/');\n}\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\n\n\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative,\n      extracted,\n      parse,\n      instruction,\n      index,\n      key,\n      instructions = rules.slice(),\n      type = _typeof(location),\n      url = this,\n      i = 0; //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n\n\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n  location = lolcation(location); //\n  // Extract protocol information before running the instructions.\n  //\n\n  extracted = extractProtocol(address || '');\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest; //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n\n  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if (index = parse.exec(address)) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  } //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n\n\n  if (parser) url.query = parser(url.query); //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n\n  if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  } //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n\n\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  } //\n  // Parse down the `auth` for the username and password.\n  //\n\n\n  url.username = url.password = '';\n\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //\n  // The href is just the compiled result.\n  //\n\n  url.href = url.toString();\n}\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\n\n\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname + ':' + value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n      if (url.port) value += ':' + url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (/:\\d+$/.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n\n      break;\n\n    default:\n      url[part] = value;\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';\n  url.href = url.toString();\n  return url;\n}\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\n\n\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n  var query,\n      url = this,\n      protocol = url.protocol;\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n  var result = protocol + (url.slashes ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':' + url.password;\n    result += '@';\n  }\n\n  result += url.host + url.pathname;\n  query = 'object' === _typeof(url.query) ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?' + query : query;\n  if (url.hash) result += url.hash;\n  return result;\n}\n\nUrl.prototype = {\n  set: set,\n  toString: toString\n}; //\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\n\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\nmodule.exports = Url;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../afstuderen-master/Afstuderen/Cerina/node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/url-parse/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/whatwg-fetch/dist/fetch.umd.js":
/*!*********************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/whatwg-fetch/dist/fetch.umd.js ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n(function (global, factory) {\n  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n})(this, function (exports) {\n  'use strict';\n\n  var global = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global;\n  var support = {\n    searchParams: 'URLSearchParams' in global,\n    iterable: 'Symbol' in global && 'iterator' in Symbol,\n    blob: 'FileReader' in global && 'Blob' in global && function () {\n      try {\n        new Blob();\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }(),\n    formData: 'FormData' in global,\n    arrayBuffer: 'ArrayBuffer' in global\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj);\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];\n\n    var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n    };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n      throw new TypeError('Invalid character in header field name');\n    }\n\n    return name.toLowerCase();\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n\n    return value;\n  } // Build a destructive iterator for the value list\n\n\n  function iteratorFor(items) {\n    var iterator = {\n      next: function next() {\n        var value = items.shift();\n        return {\n          done: value === undefined,\n          value: value\n        };\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function () {\n        return iterator;\n      };\n    }\n\n    return iterator;\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function (value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function (header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function (name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function (name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function (name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function (name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null;\n  };\n\n  Headers.prototype.has = function (name) {\n    return this.map.hasOwnProperty(normalizeName(name));\n  };\n\n  Headers.prototype.set = function (name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function (callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function () {\n    var items = [];\n    this.forEach(function (value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items);\n  };\n\n  Headers.prototype.values = function () {\n    var items = [];\n    this.forEach(function (value) {\n      items.push(value);\n    });\n    return iteratorFor(items);\n  };\n\n  Headers.prototype.entries = function () {\n    var items = [];\n    this.forEach(function (value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items);\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'));\n    }\n\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function (resolve, reject) {\n      reader.onload = function () {\n        resolve(reader.result);\n      };\n\n      reader.onerror = function () {\n        reject(reader.error);\n      };\n    });\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise;\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise;\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n\n    return chars.join('');\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0);\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer;\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function (body) {\n      /*\n        fetch-mock wraps the Response object in an ES6 Proxy to\n        provide useful test harness features such as flush. However, on\n        ES5 browsers without fetch or Proxy support pollyfills must be used;\n        the proxy-pollyfill is unable to proxy an attribute unless it exists\n        on the object before the Proxy is created. This change ensures\n        Response.bodyUsed exists on the instance, while maintaining the\n        semantic of setting Request.bodyUsed in the constructor before\n        _initBody is called.\n      */\n      this.bodyUsed = this.bodyUsed;\n      this._bodyInit = body;\n\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.\n\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function () {\n        var rejected = consumed(this);\n\n        if (rejected) {\n          return rejected;\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob);\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob');\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]));\n        }\n      };\n\n      this.arrayBuffer = function () {\n        if (this._bodyArrayBuffer) {\n          var isConsumed = consumed(this);\n\n          if (isConsumed) {\n            return isConsumed;\n          }\n\n          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n            return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));\n          } else {\n            return Promise.resolve(this._bodyArrayBuffer);\n          }\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer);\n        }\n      };\n    }\n\n    this.text = function () {\n      var rejected = consumed(this);\n\n      if (rejected) {\n        return rejected;\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob);\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text');\n      } else {\n        return Promise.resolve(this._bodyText);\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function () {\n        return this.text().then(decode);\n      };\n    }\n\n    this.json = function () {\n      return this.text().then(JSON.parse);\n    };\n\n    return this;\n  } // HTTP methods whose capitalization should be normalized\n\n\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method;\n  }\n\n  function Request(input, options) {\n    if (!(this instanceof Request)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.');\n    }\n\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read');\n      }\n\n      this.url = input.url;\n      this.credentials = input.credentials;\n\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests');\n    }\n\n    this._initBody(body);\n\n    if (this.method === 'GET' || this.method === 'HEAD') {\n      if (options.cache === 'no-store' || options.cache === 'no-cache') {\n        // Search for a '_' parameter in the query string\n        var reParamSearch = /([?&])_=[^&]*/;\n\n        if (reParamSearch.test(this.url)) {\n          // If it already exists then set the value with the current time\n          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());\n        } else {\n          // Otherwise add a new '_' parameter to the end with the current time\n          var reQueryString = /\\?/;\n          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();\n        }\n      }\n    }\n  }\n\n  Request.prototype.clone = function () {\n    return new Request(this, {\n      body: this._bodyInit\n    });\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body.trim().split('&').forEach(function (bytes) {\n      if (bytes) {\n        var split = bytes.split('=');\n        var name = split.shift().replace(/\\+/g, ' ');\n        var value = split.join('=').replace(/\\+/g, ' ');\n        form.append(decodeURIComponent(name), decodeURIComponent(value));\n      }\n    });\n    return form;\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers(); // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function (line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers;\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!(this instanceof Response)) {\n      throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.');\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : '';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function () {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    });\n  };\n\n  Response.error = function () {\n    var response = new Response(null, {\n      status: 0,\n      statusText: ''\n    });\n    response.type = 'error';\n    return response;\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function (url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code');\n    }\n\n    return new Response(null, {\n      status: status,\n      headers: {\n        location: url\n      }\n    });\n  };\n\n  exports.DOMException = global.DOMException;\n\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function (message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function (resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'));\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function () {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        setTimeout(function () {\n          resolve(new Response(body, options));\n        }, 0);\n      };\n\n      xhr.onerror = function () {\n        setTimeout(function () {\n          reject(new TypeError('Network request failed'));\n        }, 0);\n      };\n\n      xhr.ontimeout = function () {\n        setTimeout(function () {\n          reject(new TypeError('Network request failed'));\n        }, 0);\n      };\n\n      xhr.onabort = function () {\n        setTimeout(function () {\n          reject(new exports.DOMException('Aborted', 'AbortError'));\n        }, 0);\n      };\n\n      function fixUrl(url) {\n        try {\n          return url === '' && global.location.href ? global.location.href : url;\n        } catch (e) {\n          return url;\n        }\n      }\n\n      xhr.open(request.method, fixUrl(request.url), true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr) {\n        if (support.blob) {\n          xhr.responseType = 'blob';\n        } else if (support.arrayBuffer && request.headers.get('Content-Type') && request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1) {\n          xhr.responseType = 'arraybuffer';\n        }\n      }\n\n      if (init && _typeof(init.headers) === 'object' && !(init.headers instanceof Headers)) {\n        Object.getOwnPropertyNames(init.headers).forEach(function (name) {\n          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));\n        });\n      } else {\n        request.headers.forEach(function (value, name) {\n          xhr.setRequestHeader(name, value);\n        });\n      }\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function () {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    });\n  }\n\n  fetch.polyfill = true;\n\n  if (!global.fetch) {\n    global.fetch = fetch;\n    global.Headers = Headers;\n    global.Request = Request;\n    global.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/whatwg-fetch/dist/fetch.umd.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/server-session.js":
/*!*******************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/server-session.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nif (typeof fetch === 'undefined') __webpack_require__(/*! isomorphic-fetch */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/isomorphic-fetch/fetch-npm-browserify.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function ServerSession(options) {\n    _classCallCheck(this, ServerSession);\n\n    this._options = options;\n    this._mappings = {};\n  }\n\n  _createClass(ServerSession, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      // Handle case where start is disabled and qr and token are supplied directly\n      if (!this._options.start) {\n        Object.keys(this._options.mapping).forEach(function (val) {\n          return _this._mappings[val] = _this._options.mapping[val]({});\n        });\n        return Promise.resolve(this._mappings.sessionPtr);\n      } // Start options are specified, so start a new session\n\n\n      return fetch(this._options.start.url(this._options), this._options.start).then(function (r) {\n        if (r.status != 200) throw \"Error in fetch: endpoint returned status other than 200 OK. Status: \".concat(r.status, \" \").concat(r.statusText);\n        return r;\n      }).then(function (r) {\n        return _this._options.start.parseResponse(r);\n      }).then(function (r) {\n        // Execute all mapping functions using the received start response.\n        Object.keys(_this._options.mapping).forEach(function (val) {\n          return _this._mappings[val] = _this._options.mapping[val](r);\n        });\n        return _this._mappings.sessionPtr;\n      });\n    }\n  }, {\n    key: \"result\",\n    value: function result() {\n      var _this2 = this;\n\n      if (!this._options.result) return Promise.resolve(this._mappings);\n      return fetch(this._options.result.url(this._options, this._mappings), this._options.result).then(function (r) {\n        if (r.status == 403) throw \"Error in fetch: endpoint returned 403. Status: \".concat(r.status, \" \").concat(r.statusText);\n        if (r.status != 200) throw \"Error in fetch: endpoint returned status other than 200 OK. Status: \".concat(r.status, \" \").concat(r.statusText);\n        return r;\n      }).then(function (r) {\n        return _this2._options.result.parseResponse(r);\n      });\n    }\n  }]);\n\n  return ServerSession;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvc2VydmVyLXNlc3Npb24uanM/NzY4NyJdLCJuYW1lcyI6WyJmZXRjaCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiX21hcHBpbmdzIiwic3RhcnQiLCJPYmplY3QiLCJrZXlzIiwibWFwcGluZyIsImZvckVhY2giLCJ2YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNlc3Npb25QdHIiLCJ1cmwiLCJ0aGVuIiwiciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJwYXJzZVJlc3BvbnNlIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFLLE9BQU9BLEtBQVAsS0FBaUIsV0FBdEIsRUFDRUMsbUJBQU8sQ0FBQyw4SUFBRCxDQUFQOztBQUVGQyxNQUFNLENBQUNDLE9BQVA7QUFFRSx5QkFBWUMsT0FBWixFQUFxQjtBQUFBOztBQUNuQixTQUFLQyxRQUFMLEdBQWdCRCxPQUFoQjtBQUNBLFNBQUtFLFNBQUwsR0FBaUIsRUFBakI7QUFDRDs7QUFMSDtBQUFBO0FBQUEsNEJBT1U7QUFBQTs7QUFDTjtBQUNBLFVBQUksQ0FBQyxLQUFLRCxRQUFMLENBQWNFLEtBQW5CLEVBQTBCO0FBQ3hCQyxjQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLSixRQUFMLENBQWNLLE9BQTFCLEVBQW1DQyxPQUFuQyxDQUEyQyxVQUFBQyxHQUFHO0FBQUEsaUJBQzVDLEtBQUksQ0FBQ04sU0FBTCxDQUFlTSxHQUFmLElBQXNCLEtBQUksQ0FBQ1AsUUFBTCxDQUFjSyxPQUFkLENBQXNCRSxHQUF0QixFQUEyQixFQUEzQixDQURzQjtBQUFBLFNBQTlDO0FBSUEsZUFBT0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCLEtBQUtSLFNBQUwsQ0FBZVMsVUFBL0IsQ0FBUDtBQUNELE9BUkssQ0FVTjs7O0FBQ0EsYUFBT2YsS0FBSyxDQUFDLEtBQUtLLFFBQUwsQ0FBY0UsS0FBZCxDQUFvQlMsR0FBcEIsQ0FBd0IsS0FBS1gsUUFBN0IsQ0FBRCxFQUF5QyxLQUFLQSxRQUFMLENBQWNFLEtBQXZELENBQUwsQ0FDTlUsSUFETSxDQUNELFVBQUFDLENBQUMsRUFBSTtBQUNULFlBQUtBLENBQUMsQ0FBQ0MsTUFBRixJQUFZLEdBQWpCLEVBQ0Usb0ZBQTZFRCxDQUFDLENBQUNDLE1BQS9FLGNBQXlGRCxDQUFDLENBQUNFLFVBQTNGO0FBQ0YsZUFBT0YsQ0FBUDtBQUNELE9BTE0sRUFNTkQsSUFOTSxDQU1ELFVBQUFDLENBQUM7QUFBQSxlQUFJLEtBQUksQ0FBQ2IsUUFBTCxDQUFjRSxLQUFkLENBQW9CYyxhQUFwQixDQUFrQ0gsQ0FBbEMsQ0FBSjtBQUFBLE9BTkEsRUFPTkQsSUFQTSxDQU9ELFVBQUFDLENBQUMsRUFBSTtBQUNUO0FBQ0FWLGNBQU0sQ0FBQ0MsSUFBUCxDQUFZLEtBQUksQ0FBQ0osUUFBTCxDQUFjSyxPQUExQixFQUFtQ0MsT0FBbkMsQ0FBMkMsVUFBQUMsR0FBRztBQUFBLGlCQUM1QyxLQUFJLENBQUNOLFNBQUwsQ0FBZU0sR0FBZixJQUFzQixLQUFJLENBQUNQLFFBQUwsQ0FBY0ssT0FBZCxDQUFzQkUsR0FBdEIsRUFBMkJNLENBQTNCLENBRHNCO0FBQUEsU0FBOUM7QUFJQSxlQUFPLEtBQUksQ0FBQ1osU0FBTCxDQUFlUyxVQUF0QjtBQUNELE9BZE0sQ0FBUDtBQWVEO0FBakNIO0FBQUE7QUFBQSw2QkFtQ1c7QUFBQTs7QUFDUCxVQUFLLENBQUMsS0FBS1YsUUFBTCxDQUFjaUIsTUFBcEIsRUFDRSxPQUFPVCxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsS0FBS1IsU0FBckIsQ0FBUDtBQUVGLGFBQU9OLEtBQUssQ0FBQyxLQUFLSyxRQUFMLENBQWNpQixNQUFkLENBQXFCTixHQUFyQixDQUF5QixLQUFLWCxRQUE5QixFQUF3QyxLQUFLQyxTQUE3QyxDQUFELEVBQTBELEtBQUtELFFBQUwsQ0FBY2lCLE1BQXhFLENBQUwsQ0FDTkwsSUFETSxDQUNELFVBQUFDLENBQUMsRUFBSTtBQUNULFlBQUtBLENBQUMsQ0FBQ0MsTUFBRixJQUFZLEdBQWpCLEVBQ0ssK0RBQXdERCxDQUFDLENBQUNDLE1BQTFELGNBQW9FRCxDQUFDLENBQUNFLFVBQXRFO0FBQ0wsWUFBS0YsQ0FBQyxDQUFDQyxNQUFGLElBQVksR0FBakIsRUFDRSxvRkFBNkVELENBQUMsQ0FBQ0MsTUFBL0UsY0FBeUZELENBQUMsQ0FBQ0UsVUFBM0Y7QUFDRixlQUFPRixDQUFQO0FBQ0QsT0FQTSxFQVFORCxJQVJNLENBUUQsVUFBQUMsQ0FBQztBQUFBLGVBQUksTUFBSSxDQUFDYixRQUFMLENBQWNpQixNQUFkLENBQXFCRCxhQUFyQixDQUFtQ0gsQ0FBbkMsQ0FBSjtBQUFBLE9BUkEsQ0FBUDtBQVNEO0FBaERIOztBQUFBO0FBQUEiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvc2VydmVyLXNlc3Npb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpZiAoIHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcgKVxuICByZXF1aXJlKCdpc29tb3JwaGljLWZldGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgU2VydmVyU2Vzc2lvbiB7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuX21hcHBpbmdzID0ge307XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICAvLyBIYW5kbGUgY2FzZSB3aGVyZSBzdGFydCBpcyBkaXNhYmxlZCBhbmQgcXIgYW5kIHRva2VuIGFyZSBzdXBwbGllZCBkaXJlY3RseVxuICAgIGlmICghdGhpcy5fb3B0aW9ucy5zdGFydCkge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5fb3B0aW9ucy5tYXBwaW5nKS5mb3JFYWNoKHZhbCA9PlxuICAgICAgICB0aGlzLl9tYXBwaW5nc1t2YWxdID0gdGhpcy5fb3B0aW9ucy5tYXBwaW5nW3ZhbF0oe30pXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX21hcHBpbmdzLnNlc3Npb25QdHIpO1xuICAgIH1cblxuICAgIC8vIFN0YXJ0IG9wdGlvbnMgYXJlIHNwZWNpZmllZCwgc28gc3RhcnQgYSBuZXcgc2Vzc2lvblxuICAgIHJldHVybiBmZXRjaCh0aGlzLl9vcHRpb25zLnN0YXJ0LnVybCh0aGlzLl9vcHRpb25zKSwgdGhpcy5fb3B0aW9ucy5zdGFydClcbiAgICAudGhlbihyID0+IHtcbiAgICAgIGlmICggci5zdGF0dXMgIT0gMjAwIClcbiAgICAgICAgdGhyb3coYEVycm9yIGluIGZldGNoOiBlbmRwb2ludCByZXR1cm5lZCBzdGF0dXMgb3RoZXIgdGhhbiAyMDAgT0suIFN0YXR1czogJHtyLnN0YXR1c30gJHtyLnN0YXR1c1RleHR9YCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9KVxuICAgIC50aGVuKHIgPT4gdGhpcy5fb3B0aW9ucy5zdGFydC5wYXJzZVJlc3BvbnNlKHIpKVxuICAgIC50aGVuKHIgPT4ge1xuICAgICAgLy8gRXhlY3V0ZSBhbGwgbWFwcGluZyBmdW5jdGlvbnMgdXNpbmcgdGhlIHJlY2VpdmVkIHN0YXJ0IHJlc3BvbnNlLlxuICAgICAgT2JqZWN0LmtleXModGhpcy5fb3B0aW9ucy5tYXBwaW5nKS5mb3JFYWNoKHZhbCA9PlxuICAgICAgICB0aGlzLl9tYXBwaW5nc1t2YWxdID0gdGhpcy5fb3B0aW9ucy5tYXBwaW5nW3ZhbF0ocilcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9tYXBwaW5ncy5zZXNzaW9uUHRyO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzdWx0KCkge1xuICAgIGlmICggIXRoaXMuX29wdGlvbnMucmVzdWx0IClcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fbWFwcGluZ3MpO1xuXG4gICAgcmV0dXJuIGZldGNoKHRoaXMuX29wdGlvbnMucmVzdWx0LnVybCh0aGlzLl9vcHRpb25zLCB0aGlzLl9tYXBwaW5ncyksIHRoaXMuX29wdGlvbnMucmVzdWx0KVxuICAgIC50aGVuKHIgPT4ge1xuICAgICAgaWYgKCByLnN0YXR1cyA9PSA0MDMgKVxuICAgICAgICAgICB0aHJvdyhgRXJyb3IgaW4gZmV0Y2g6IGVuZHBvaW50IHJldHVybmVkIDQwMy4gU3RhdHVzOiAke3Iuc3RhdHVzfSAke3Iuc3RhdHVzVGV4dH1gKTtcbiAgICAgIGlmICggci5zdGF0dXMgIT0gMjAwIClcbiAgICAgICAgdGhyb3coYEVycm9yIGluIGZldGNoOiBlbmRwb2ludCByZXR1cm5lZCBzdGF0dXMgb3RoZXIgdGhhbiAyMDAgT0suIFN0YXR1czogJHtyLnN0YXR1c30gJHtyLnN0YXR1c1RleHR9YCk7XG4gICAgICByZXR1cm4gcjtcbiAgICB9KVxuICAgIC50aGVuKHIgPT4gdGhpcy5fb3B0aW9ucy5yZXN1bHQucGFyc2VSZXNwb25zZShyKSk7XG4gIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/server-session.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-client/server-state.js":
/*!*****************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-client/server-state.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nif (typeof fetch === 'undefined') __webpack_require__(/*! isomorphic-fetch */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/isomorphic-fetch/fetch-npm-browserify.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function ServerState(url, options) {\n    _classCallCheck(this, ServerState);\n\n    this._eventSource = this._eventSource();\n    this._isRunning = false;\n    this._isPolling = false;\n    this._options = _objectSpread(_objectSpread({}, options), {}, {\n      url: url\n    });\n  }\n\n  _createClass(ServerState, [{\n    key: \"observe\",\n    value: function observe(stateChangeCallback, errorCallback) {\n      this._stateChangeCallback = stateChangeCallback;\n      this._errorCallback = errorCallback;\n      this._isRunning = true;\n      if (this._eventSource && this._options.serverSentEvents) return this._startSSE();\n\n      this._startPolling();\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._options.cancel) return Promise.resolve();\n      return fetch(this._options.cancel.url(this._options), {\n        method: 'DELETE'\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this._isRunning) return false;\n\n      if (this._source) {\n        this._source.close();\n\n        if (this._options.debugging) console.log(\"ðŸŒŽ Closed EventSource\");\n      }\n\n      this._isRunning = false;\n      return true;\n    }\n  }, {\n    key: \"_startSSE\",\n    value: function _startSSE() {\n      var _this = this;\n\n      if (this._options.debugging) console.log(\"ðŸŒŽ Using EventSource for server events\");\n      this._source = new this._eventSource(this._options.serverSentEvents.url(this._options));\n      var canceller = setTimeout(function () {\n        if (_this._options.debugging) console.error(\"\\uD83C\\uDF0E EventSource could not connect within \".concat(_this._options.serverSentEvents.timeout, \"ms\")); // Fall back to polling instead\n\n        setTimeout(function () {\n          return _this._source.close();\n        }, 0); // Never block on this\n\n        _this._startPolling();\n      }, this._options.serverSentEvents.timeout);\n\n      this._source.addEventListener('open', function () {\n        return clearTimeout(canceller);\n      });\n\n      this._source.addEventListener('message', function (evnt) {\n        clearTimeout(canceller);\n        var state = JSON.parse(evnt.data);\n        if (_this._options.debugging) console.log(\"\\uD83C\\uDF0E Server event: Remote state changed to '\".concat(state, \"'\"));\n\n        _this._stateChangeCallback(state);\n      });\n\n      this._source.addEventListener('error', function (error) {\n        clearTimeout(canceller);\n\n        _this._source.close();\n\n        if (_this._options.debugging) console.error('ðŸŒŽ EventSource threw an error: ', error); // Fall back to polling instead\n\n        setTimeout(function () {\n          return _this._source.close();\n        }, 0); // Never block on this\n\n        _this._startPolling();\n      });\n    }\n  }, {\n    key: \"_startPolling\",\n    value: function _startPolling() {\n      var _this2 = this;\n\n      if (!this._options.polling || this._isPolling) return;\n      if (this._options.debugging) console.log(\"ðŸŒŽ Using polling for server events\");\n      this._currentStatus = this._options.polling.startState;\n      this._isPolling = true;\n\n      this._polling().then(function () {\n        if (_this2._options.debugging) console.log(\"ðŸŒŽ Stopped polling\");\n      }).catch(function (error) {\n        if (_this2._options.debugging) console.error(\"ðŸŒŽ Error thrown while polling: \", error);\n\n        _this2._errorCallback(error);\n      });\n    }\n  }, {\n    key: \"_polling\",\n    value: function _polling() {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3._isRunning) {\n          _this3._isPolling = false;\n          resolve();\n          return;\n        }\n\n        fetch(_this3._options.polling.url(_this3._options)).then(function (r) {\n          if (r.status != 200) throw \"Error in fetch: endpoint returned status other than 200 OK. Status: \".concat(r.status, \" \").concat(r.statusText);\n          return r;\n        }).then(function (r) {\n          return r.json();\n        }).then(function (newStatus) {\n          // Re-check running because variable might have been changed during fetch.\n          if (!_this3._isRunning) {\n            _this3._isPolling = false;\n            resolve();\n            return;\n          }\n\n          if (newStatus != _this3._currentStatus) {\n            if (_this3._options.debugging) console.log(\"\\uD83C\\uDF0E Server event: Remote state changed to '\".concat(newStatus, \"'\"));\n            _this3._currentStatus = newStatus;\n\n            _this3._stateChangeCallback(newStatus);\n          }\n\n          setTimeout(function () {\n            _this3._polling().then(resolve).catch(reject);\n          }, _this3._options.polling.interval);\n        }).catch(reject);\n      });\n    }\n  }, {\n    key: \"_eventSource\",\n    value: function _eventSource() {\n      if (typeof window == 'undefined') return __webpack_require__(/*! eventsource */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/node_modules/eventsource/lib/eventsource.js\");else return window.EventSource;\n    }\n  }]);\n\n  return ServerState;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS1jbGllbnQvc2VydmVyLXN0YXRlLmpzPzNmNjkiXSwibmFtZXMiOlsiZmV0Y2giLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsIm9wdGlvbnMiLCJfZXZlbnRTb3VyY2UiLCJfaXNSdW5uaW5nIiwiX2lzUG9sbGluZyIsIl9vcHRpb25zIiwic3RhdGVDaGFuZ2VDYWxsYmFjayIsImVycm9yQ2FsbGJhY2siLCJfc3RhdGVDaGFuZ2VDYWxsYmFjayIsIl9lcnJvckNhbGxiYWNrIiwic2VydmVyU2VudEV2ZW50cyIsIl9zdGFydFNTRSIsIl9zdGFydFBvbGxpbmciLCJjYW5jZWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1ldGhvZCIsIl9zb3VyY2UiLCJjbG9zZSIsImRlYnVnZ2luZyIsImNvbnNvbGUiLCJsb2ciLCJjYW5jZWxsZXIiLCJzZXRUaW1lb3V0IiwiZXJyb3IiLCJ0aW1lb3V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsZWFyVGltZW91dCIsImV2bnQiLCJzdGF0ZSIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJwb2xsaW5nIiwiX2N1cnJlbnRTdGF0dXMiLCJzdGFydFN0YXRlIiwiX3BvbGxpbmciLCJ0aGVuIiwiY2F0Y2giLCJyZWplY3QiLCJyIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImpzb24iLCJuZXdTdGF0dXMiLCJpbnRlcnZhbCIsIndpbmRvdyIsIkV2ZW50U291cmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQSxJQUFLLE9BQU9BLEtBQVAsS0FBaUIsV0FBdEIsRUFDRUMsbUJBQU8sQ0FBQyw4SUFBRCxDQUFQOztBQUVGQyxNQUFNLENBQUNDLE9BQVA7QUFFRSx1QkFBWUMsR0FBWixFQUFpQkMsT0FBakIsRUFBMEI7QUFBQTs7QUFDeEIsU0FBS0MsWUFBTCxHQUFvQixLQUFLQSxZQUFM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QUpmLENBQVY7QUFLRCxTQTVCRCxFQTZCQ1AsS0E3QkQsQ0E2Qk9DLE1BN0JQO0FBOEJELE9BckNNLENBQVA7QUFzQ0Q7QUEvSUg7QUFBQTtBQUFBLG1DQWlKaUI7QUFDYixVQUFLLE9BQU9PLE1BQVAsSUFBaUIsV0FBdEIsRUFDRSxPQUFPakQsbUJBQU8sQ0FBQywrSEFBRCxDQUFkLENBREYsS0FHRSxPQUFPaUQsTUFBTSxDQUFDQyxXQUFkO0FBQ0g7QUF0Skg7O0FBQUE7QUFBQSIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLWNsaWVudC9zZXJ2ZXItc3RhdGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpZiAoIHR5cGVvZiBmZXRjaCA9PT0gJ3VuZGVmaW5lZCcgKVxuICByZXF1aXJlKCdpc29tb3JwaGljLWZldGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgU2VydmVyU3RhdGUge1xuXG4gIGNvbnN0cnVjdG9yKHVybCwgb3B0aW9ucykge1xuICAgIHRoaXMuX2V2ZW50U291cmNlID0gdGhpcy5fZXZlbnRTb3VyY2UoKTtcbiAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1BvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHVybFxuICAgIH07XG4gIH1cblxuICBvYnNlcnZlKHN0YXRlQ2hhbmdlQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICB0aGlzLl9zdGF0ZUNoYW5nZUNhbGxiYWNrID0gc3RhdGVDaGFuZ2VDYWxsYmFjaztcbiAgICB0aGlzLl9lcnJvckNhbGxiYWNrID0gZXJyb3JDYWxsYmFjaztcbiAgICB0aGlzLl9pc1J1bm5pbmcgPSB0cnVlO1xuXG4gICAgaWYgKCB0aGlzLl9ldmVudFNvdXJjZSAmJiB0aGlzLl9vcHRpb25zLnNlcnZlclNlbnRFdmVudHMgKVxuICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0U1NFKCk7XG5cbiAgICB0aGlzLl9zdGFydFBvbGxpbmcoKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICBpZiAoIXRoaXMuX29wdGlvbnMuY2FuY2VsKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHJldHVybiBmZXRjaCh0aGlzLl9vcHRpb25zLmNhbmNlbC51cmwodGhpcy5fb3B0aW9ucyksIHttZXRob2Q6ICdERUxFVEUnfSk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzUnVubmluZykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKCB0aGlzLl9zb3VyY2UgKSB7XG4gICAgICB0aGlzLl9zb3VyY2UuY2xvc2UoKTtcbiAgICAgIGlmICggdGhpcy5fb3B0aW9ucy5kZWJ1Z2dpbmcgKVxuICAgICAgICBjb25zb2xlLmxvZyhcIvCfjI4gQ2xvc2VkIEV2ZW50U291cmNlXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzUnVubmluZyA9IGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgX3N0YXJ0U1NFKCkge1xuICAgIGlmICggdGhpcy5fb3B0aW9ucy5kZWJ1Z2dpbmcgKVxuICAgICAgY29uc29sZS5sb2coXCLwn4yOIFVzaW5nIEV2ZW50U291cmNlIGZvciBzZXJ2ZXIgZXZlbnRzXCIpO1xuXG4gICAgdGhpcy5fc291cmNlID0gbmV3IHRoaXMuX2V2ZW50U291cmNlKHRoaXMuX29wdGlvbnMuc2VydmVyU2VudEV2ZW50cy51cmwodGhpcy5fb3B0aW9ucykpO1xuXG4gICAgY29uc3QgY2FuY2VsbGVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoIHRoaXMuX29wdGlvbnMuZGVidWdnaW5nIClcbiAgICAgICAgY29uc29sZS5lcnJvcihg8J+MjiBFdmVudFNvdXJjZSBjb3VsZCBub3QgY29ubmVjdCB3aXRoaW4gJHt0aGlzLl9vcHRpb25zLnNlcnZlclNlbnRFdmVudHMudGltZW91dH1tc2ApO1xuXG4gICAgICAvLyBGYWxsIGJhY2sgdG8gcG9sbGluZyBpbnN0ZWFkXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX3NvdXJjZS5jbG9zZSgpLCAwKTsgLy8gTmV2ZXIgYmxvY2sgb24gdGhpc1xuICAgICAgdGhpcy5fc3RhcnRQb2xsaW5nKCk7XG4gICAgfSwgdGhpcy5fb3B0aW9ucy5zZXJ2ZXJTZW50RXZlbnRzLnRpbWVvdXQpO1xuXG4gICAgdGhpcy5fc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiBjbGVhclRpbWVvdXQoY2FuY2VsbGVyKSk7XG5cbiAgICB0aGlzLl9zb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGV2bnQgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KGNhbmNlbGxlcik7XG4gICAgICBjb25zdCBzdGF0ZSA9IEpTT04ucGFyc2UoZXZudC5kYXRhKTtcblxuICAgICAgaWYgKCB0aGlzLl9vcHRpb25zLmRlYnVnZ2luZyApXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn4yOIFNlcnZlciBldmVudDogUmVtb3RlIHN0YXRlIGNoYW5nZWQgdG8gJyR7c3RhdGV9J2ApO1xuXG4gICAgICB0aGlzLl9zdGF0ZUNoYW5nZUNhbGxiYWNrKHN0YXRlKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3NvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGNsZWFyVGltZW91dChjYW5jZWxsZXIpO1xuICAgICAgdGhpcy5fc291cmNlLmNsb3NlKCk7XG5cbiAgICAgIGlmICggdGhpcy5fb3B0aW9ucy5kZWJ1Z2dpbmcgKVxuICAgICAgICBjb25zb2xlLmVycm9yKCfwn4yOIEV2ZW50U291cmNlIHRocmV3IGFuIGVycm9yOiAnLCBlcnJvcik7XG5cbiAgICAgIC8vIEZhbGwgYmFjayB0byBwb2xsaW5nIGluc3RlYWRcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fc291cmNlLmNsb3NlKCksIDApOyAvLyBOZXZlciBibG9jayBvbiB0aGlzXG4gICAgICB0aGlzLl9zdGFydFBvbGxpbmcoKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9zdGFydFBvbGxpbmcoKSB7XG4gICAgaWYgKCAhdGhpcy5fb3B0aW9ucy5wb2xsaW5nIHx8IHRoaXMuX2lzUG9sbGluZyApXG4gICAgICByZXR1cm47XG5cbiAgICBpZiAoIHRoaXMuX29wdGlvbnMuZGVidWdnaW5nIClcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+MjiBVc2luZyBwb2xsaW5nIGZvciBzZXJ2ZXIgZXZlbnRzXCIpO1xuXG4gICAgdGhpcy5fY3VycmVudFN0YXR1cyA9IHRoaXMuX29wdGlvbnMucG9sbGluZy5zdGFydFN0YXRlO1xuICAgIHRoaXMuX2lzUG9sbGluZyA9IHRydWU7XG5cbiAgICB0aGlzLl9wb2xsaW5nKClcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBpZiAoIHRoaXMuX29wdGlvbnMuZGVidWdnaW5nIClcbiAgICAgICAgY29uc29sZS5sb2coXCLwn4yOIFN0b3BwZWQgcG9sbGluZ1wiKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGlmICggdGhpcy5fb3B0aW9ucy5kZWJ1Z2dpbmcgKVxuICAgICAgICBjb25zb2xlLmVycm9yKFwi8J+MjiBFcnJvciB0aHJvd24gd2hpbGUgcG9sbGluZzogXCIsIGVycm9yKTtcbiAgICAgIHRoaXMuX2Vycm9yQ2FsbGJhY2soZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cbiAgX3BvbGxpbmcoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICggIXRoaXMuX2lzUnVubmluZyApIHtcbiAgICAgICAgdGhpcy5faXNQb2xsaW5nID0gZmFsc2U7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmZXRjaCh0aGlzLl9vcHRpb25zLnBvbGxpbmcudXJsKHRoaXMuX29wdGlvbnMpKVxuICAgICAgLnRoZW4ociA9PiB7XG4gICAgICAgIGlmICggci5zdGF0dXMgIT0gMjAwIClcbiAgICAgICAgICB0aHJvdyhgRXJyb3IgaW4gZmV0Y2g6IGVuZHBvaW50IHJldHVybmVkIHN0YXR1cyBvdGhlciB0aGFuIDIwMCBPSy4gU3RhdHVzOiAke3Iuc3RhdHVzfSAke3Iuc3RhdHVzVGV4dH1gKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9KVxuICAgICAgLnRoZW4ociA9PiByLmpzb24oKSlcbiAgICAgIC50aGVuKG5ld1N0YXR1cyA9PiB7XG4gICAgICAgIC8vIFJlLWNoZWNrIHJ1bm5pbmcgYmVjYXVzZSB2YXJpYWJsZSBtaWdodCBoYXZlIGJlZW4gY2hhbmdlZCBkdXJpbmcgZmV0Y2guXG4gICAgICAgIGlmICggIXRoaXMuX2lzUnVubmluZyApIHtcbiAgICAgICAgICB0aGlzLl9pc1BvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBuZXdTdGF0dXMgIT0gdGhpcy5fY3VycmVudFN0YXR1cyApIHtcbiAgICAgICAgICBpZiAoIHRoaXMuX29wdGlvbnMuZGVidWdnaW5nIClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn4yOIFNlcnZlciBldmVudDogUmVtb3RlIHN0YXRlIGNoYW5nZWQgdG8gJyR7bmV3U3RhdHVzfSdgKTtcblxuICAgICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG4gICAgICAgICAgdGhpcy5fc3RhdGVDaGFuZ2VDYWxsYmFjayhuZXdTdGF0dXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fcG9sbGluZygpXG4gICAgICAgICAgLnRoZW4ocmVzb2x2ZSlcbiAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfSwgdGhpcy5fb3B0aW9ucy5wb2xsaW5nLmludGVydmFsKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9ldmVudFNvdXJjZSgpIHtcbiAgICBpZiAoIHR5cGVvZiB3aW5kb3cgPT0gJ3VuZGVmaW5lZCcgKVxuICAgICAgcmV0dXJuIHJlcXVpcmUoJ2V2ZW50c291cmNlJyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHdpbmRvdy5FdmVudFNvdXJjZTtcbiAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-client/server-state.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/dom-manipulations.js":
/*!*******************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/dom-manipulations.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar QRCode = __webpack_require__(/*! qrcode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/browser.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function DOMManipulations(element, options, clickCallback) {\n    _classCallCheck(this, DOMManipulations);\n\n    this._element = element;\n    this._translations = options.translations;\n    this._showHelper = options.showHelper;\n    this._showCloseButton = options.showCloseButton;\n    this._clickCallback = clickCallback;\n\n    this._renderInitialState();\n\n    this._attachClickHandler();\n  }\n\n  _createClass(DOMManipulations, [{\n    key: \"renderState\",\n    value: function renderState(state) {\n      var newPartial = this._stateToPartialMapping()[state.newState];\n\n      if (!newPartial) throw new Error(\"I don't know how to render '\".concat(state.newState, \"'\"));\n\n      this._renderPartial(newPartial);\n\n      if (state.isFinal) {\n        // Make sure all restart buttons are hidden when being in a final state\n        this._element.querySelectorAll('.irma-web-restart-button').forEach(function (e) {\n          return e.style.display = 'none';\n        });\n      }\n    }\n  }, {\n    key: \"setQRCode\",\n    value: function setQRCode(qr) {\n      QRCode.toCanvas(this._element.querySelector('.irma-web-qr-canvas'), qr, {\n        width: '230',\n        margin: '1'\n      });\n    }\n  }, {\n    key: \"setButtonLink\",\n    value: function setButtonLink(link) {\n      this._element.querySelector('.irma-web-button-link').setAttribute('href', link);\n    }\n  }, {\n    key: \"_renderInitialState\",\n    value: function _renderInitialState() {\n      this._element.classList.add('irma-web-form');\n\n      this._element.innerHTML = this._irmaWebForm(this._stateUninitialized());\n    }\n  }, {\n    key: \"_attachClickHandler\",\n    value: function _attachClickHandler() {\n      var _this = this;\n\n      // Polyfill for Element.matches to fix IE11\n      if (!Element.prototype.matches) {\n        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n      }\n\n      this._element.addEventListener('click', function (e) {\n        if (e.target.matches('[data-irma-glue-transition]')) {\n          _this._clickCallback(e.target.getAttribute('data-irma-glue-transition'));\n        }\n      });\n    }\n  }, {\n    key: \"_renderPartial\",\n    value: function _renderPartial(newPartial) {\n      this._element.querySelector('.irma-web-content .irma-web-centered').innerHTML = newPartial.call(this);\n    }\n  }, {\n    key: \"_stateToPartialMapping\",\n    value: function _stateToPartialMapping() {\n      return {\n        Uninitialized: this._stateUninitialized,\n        Loading: this._stateLoading,\n        MediumContemplation: this._stateLoading,\n        ShowingQRCode: this._stateShowingQRCode,\n        ContinueOn2ndDevice: this._stateContinueInIrmaApp,\n        ShowingIrmaButton: this._stateShowingIrmaButton,\n        ShowingQRCodeInstead: this._stateShowingQRCodeInstead,\n        ContinueInIrmaApp: this._stateContinueInIrmaApp,\n        Cancelled: this._stateCancelled,\n        TimedOut: this._stateTimedOut,\n        Error: this._stateError,\n        BrowserNotSupported: this._stateBrowserNotSupported,\n        Success: this._stateSuccess,\n        Refused: this._stateRefused,\n        Aborted: function Aborted() {\n          return '';\n        }\n      };\n    }\n    /** Container markup **/\n\n  }, {\n    key: \"_irmaWebForm\",\n    value: function _irmaWebForm(content) {\n      return \"\\n      <div class=\\\"irma-web-header \".concat(this._showHelper ? 'irma-web-show-helper' : '', \"\\\">\\n        <p>\").concat(this._translations.header, \"</p>\\n        <div class=\\\"irma-web-helper\\\">\\n          <p>\").concat(this._translations.helper, \"</p>\\n        </div>\\n        \").concat(this._showCloseButton ? \"\\n          <button class=\\\"irma-web-close\\\"></button>\\n        \" : '', \"\\n      </div>\\n      <div class=\\\"irma-web-content\\\">\\n        <div class=\\\"irma-web-centered\\\">\\n          \").concat(content, \"\\n        </div>\\n      </div>\\n    \");\n    }\n    /** States markup **/\n\n  }, {\n    key: \"_stateUninitialized\",\n    value: function _stateUninitialized() {\n      return \"\\n      <!-- State: Uninitialized -->\\n      <div class=\\\"irma-web-loading-animation\\\">\\n        <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>\\n      </div>\\n      <p>\".concat(this._translations.loading, \"</p>\\n    \");\n    }\n  }, {\n    key: \"_stateLoading\",\n    value: function _stateLoading() {\n      return \"\\n      <!-- State: Loading -->\\n      <div class=\\\"irma-web-loading-animation\\\">\\n        <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>\\n      </div>\\n      <p>\".concat(this._translations.loading, \"</p>\\n    \");\n    }\n  }, {\n    key: \"_stateShowingQRCode\",\n    value: function _stateShowingQRCode() {\n      return \"\\n      <!-- State: ShowingQRCode -->\\n      <canvas class=\\\"irma-web-qr-canvas\\\"></canvas>\\n    \";\n    }\n  }, {\n    key: \"_stateShowingIrmaButton\",\n    value: function _stateShowingIrmaButton() {\n      return \"\\n      <!-- State: ShowingButton -->\\n      <a class=\\\"irma-web-button-link\\\">\\n        <button class=\\\"irma-web-button\\\">\".concat(this._translations.button, \"</button>\\n      </a>\\n      <p><a data-irma-glue-transition=\\\"chooseQR\\\">\").concat(this._translations.qrCode, \"</a></p>\\n    \");\n    }\n  }, {\n    key: \"_stateShowingQRCodeInstead\",\n    value: function _stateShowingQRCodeInstead() {\n      return \"\\n      <!-- State: ShowingQRCode -->\\n      <canvas class=\\\"irma-web-qr-canvas\\\"></canvas>\\n      <p><a data-irma-glue-transition=\\\"showIrmaButton\\\">\".concat(this._translations.back, \"</a></p>\\n    \");\n    }\n  }, {\n    key: \"_stateContinueInIrmaApp\",\n    value: function _stateContinueInIrmaApp() {\n      return \"\\n      <!-- State: WaitingForUser -->\\n      <div class=\\\"irma-web-waiting-for-user-animation\\\"></div>\\n      <p>\".concat(this._translations.app, \"</p>\\n      <p><a data-irma-glue-transition=\\\"cancel\\\">\").concat(this._translations.cancel, \"</a></p>\\n    \");\n    }\n  }, {\n    key: \"_stateCancelled\",\n    value: function _stateCancelled() {\n      return \"\\n      <!-- State: Cancelled -->\\n      <div class=\\\"irma-web-forbidden-animation\\\"></div>\\n      <p>\".concat(this._translations.cancelled, \"</p>\\n      <p class=\\\"irma-web-restart-button\\\"><a data-irma-glue-transition=\\\"restart\\\">\").concat(this._translations.retry, \"</a></p>\\n    \");\n    }\n  }, {\n    key: \"_stateTimedOut\",\n    value: function _stateTimedOut() {\n      return \"\\n      <!-- State: TimedOut -->\\n      <div class=\\\"irma-web-clock-animation\\\"></div>\\n      <p>\".concat(this._translations.timeout, \"</p>\\n      <p class=\\\"irma-web-restart-button\\\"><a data-irma-glue-transition=\\\"restart\\\">\").concat(this._translations.retry, \"</a></p>\\n    \");\n    }\n  }, {\n    key: \"_stateError\",\n    value: function _stateError() {\n      return \"\\n      <!-- State: Error -->\\n      <div class=\\\"irma-web-forbidden-animation\\\"></div>\\n      <p>\".concat(this._translations.error, \"</p>\\n      <p class=\\\"irma-web-restart-button\\\"><a data-irma-glue-transition=\\\"restart\\\">\").concat(this._translations.retry, \"</a></p>\\n    \");\n    }\n  }, {\n    key: \"_stateBrowserNotSupported\",\n    value: function _stateBrowserNotSupported() {\n      return \"\\n      <!-- State: BrowserNotSupported -->\\n      <div class=\\\"irma-web-forbidden-animation\\\"></div>\\n      <p>\".concat(this._translations.browser, \"</p>\\n    \");\n    }\n  }, {\n    key: \"_stateSuccess\",\n    value: function _stateSuccess() {\n      return \"\\n      <!-- State: Success -->\\n      <div class=\\\"irma-web-checkmark-animation\\\"></div>\\n      <p>\".concat(this._translations.success, \"</p>\\n    \");\n    }\n  }, {\n    key: \"_stateRefused\",\n    value: function _stateRefused() {\n      return \"\\n        <!-- State: Refused -->\\n        <div class=\\\"irma-web-forbidden-animation\\\"></div>\\n        <p>\".concat(this._translations.refused, \"</p>\\n      \");\n    }\n  }]);\n\n  return DOMManipulations;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/dom-manipulations.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/index.js":
/*!*******************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar DOMManipulations = __webpack_require__(/*! ./dom-manipulations */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/dom-manipulations.js\");\n\nvar merge = __webpack_require__(/*! deepmerge */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/deepmerge/dist/cjs.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function IrmaWeb(_ref) {\n    var _this = this;\n\n    var stateMachine = _ref.stateMachine,\n        options = _ref.options;\n\n    _classCallCheck(this, IrmaWeb);\n\n    this._stateMachine = stateMachine;\n    this._options = this._sanitizeOptions(options);\n    this._lastPayload = null;\n    this._dom = new DOMManipulations(document.querySelector(this._options.element), this._options, function (t) {\n      // Check for validity of function to prevent errors when multiple events are cached.\n      if (_this._stateMachine.isValidTransition(t)) _this._stateMachine.transition(t, _this._lastPayload);\n    });\n\n    this._addVisibilityListener();\n  }\n\n  _createClass(IrmaWeb, [{\n    key: \"stateChange\",\n    value: function stateChange(state) {\n      var newState = state.newState,\n          payload = state.payload,\n          isFinal = state.isFinal;\n      this._lastPayload = payload;\n\n      this._dom.renderState(state);\n\n      switch (newState) {\n        case 'ShowingQRCode':\n        case 'ShowingQRCodeInstead':\n          this._dom.setQRCode(payload.qr);\n\n          break;\n\n        case 'ShowingIrmaButton':\n          this._dom.setButtonLink(payload.mobile);\n\n          break;\n\n        default:\n          if (isFinal) this._removeVisibilityListener();\n          break;\n      }\n    }\n  }, {\n    key: \"_sanitizeOptions\",\n    value: function _sanitizeOptions(options) {\n      var defaults = {\n        element: '#irma-web-form',\n        showHelper: false,\n        translations: __webpack_require__(\"../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations sync recursive ^\\\\.\\\\/.*$\")(\"./\".concat(options.language || 'nl'))\n      };\n      return merge(defaults, options);\n    }\n  }, {\n    key: \"_addVisibilityListener\",\n    value: function _addVisibilityListener() {\n      var _this2 = this;\n\n      var onVisibilityChange = function onVisibilityChange() {\n        if (_this2._stateMachine.currentState() != 'TimedOut' || document.hidden) return;\n\n        if (_this2._stateMachine.isValidTransition('restart')) {\n          if (_this2._options.debugging) console.log('ðŸ–¥ Restarting because document became visible');\n\n          _this2._stateMachine.transition('restart');\n        }\n      };\n\n      var onFocusChange = function onFocusChange() {\n        if (_this2._stateMachine.currentState() != 'TimedOut') return;\n\n        if (_this2._stateMachine.isValidTransition('restart')) {\n          if (_this2._options.debugging) console.log('ðŸ–¥ Restarting because window regained focus');\n\n          _this2._stateMachine.transition('restart');\n        }\n      };\n\n      var onResize = function onResize() {\n        if (_this2._stateMachine.isValidTransition('checkUserAgent')) _this2._stateMachine.transition('checkUserAgent', _this2._lastPayload);\n      };\n\n      if (typeof document !== 'undefined' && document.addEventListener) document.addEventListener('visibilitychange', onVisibilityChange);\n\n      if (typeof window !== 'undefined' && window.addEventListener) {\n        window.addEventListener('focus', onFocusChange);\n        window.addEventListener('resize', onResize);\n      }\n\n      this._removeVisibilityListener = function () {\n        if (typeof document !== 'undefined' && document.removeEventListener) document.removeEventListener('visibilitychange', onVisibilityChange);\n\n        if (typeof window !== 'undefined' && window.removeEventListener) {\n          window.removeEventListener('focus', onFocusChange);\n          window.removeEventListener('resize', onResize);\n        }\n      };\n    }\n  }]);\n\n  return IrmaWeb;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/deepmerge/dist/cjs.js":
/*!*********************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/deepmerge/dist/cjs.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isMergeableObject = function isMergeableObject(value) {\n  return isNonNullObject(value) && !isSpecial(value);\n};\n\nfunction isNonNullObject(value) {\n  return !!value && _typeof(value) === 'object';\n}\n\nfunction isSpecial(value) {\n  var stringValue = Object.prototype.toString.call(value);\n  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);\n} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\n\n\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n  return value.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nfunction emptyTarget(val) {\n  return Array.isArray(val) ? [] : {};\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\n\nfunction defaultArrayMerge(target, source, options) {\n  return target.concat(source).map(function (element) {\n    return cloneUnlessOtherwiseSpecified(element, options);\n  });\n}\n\nfunction getMergeFunction(key, options) {\n  if (!options.customMerge) {\n    return deepmerge;\n  }\n\n  var customMerge = options.customMerge(key);\n  return typeof customMerge === 'function' ? customMerge : deepmerge;\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function (symbol) {\n    return target.propertyIsEnumerable(symbol);\n  }) : [];\n}\n\nfunction getKeys(target) {\n  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\n\nfunction propertyIsOnObject(object, property) {\n  try {\n    return property in object;\n  } catch (_) {\n    return false;\n  }\n} // Protects from prototype poisoning and unexpected merging up the prototype chain.\n\n\nfunction propertyIsUnsafe(target, key) {\n  return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n  && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n  && Object.propertyIsEnumerable.call(target, key)); // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n  var destination = {};\n\n  if (options.isMergeableObject(target)) {\n    getKeys(target).forEach(function (key) {\n      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n    });\n  }\n\n  getKeys(source).forEach(function (key) {\n    if (propertyIsUnsafe(target, key)) {\n      return;\n    }\n\n    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n    } else {\n      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n    }\n  });\n  return destination;\n}\n\nfunction deepmerge(target, source, options) {\n  options = options || {};\n  options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n  options.isMergeableObject = options.isMergeableObject || isMergeableObject; // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n  // implementations can use it. The caller may not replace it.\n\n  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n  var sourceIsArray = Array.isArray(source);\n  var targetIsArray = Array.isArray(target);\n  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n  if (!sourceAndTargetTypesMatch) {\n    return cloneUnlessOtherwiseSpecified(source, options);\n  } else if (sourceIsArray) {\n    return options.arrayMerge(target, source, options);\n  } else {\n    return mergeObject(target, source, options);\n  }\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n  if (!Array.isArray(array)) {\n    throw new Error('first argument should be an array');\n  }\n\n  return array.reduce(function (prev, next) {\n    return deepmerge(prev, next, options);\n  }, {});\n};\n\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/deepmerge/dist/cjs.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/dijkstrajs/dijkstra.js":
/*!**********************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/dijkstrajs/dijkstra.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\n\nvar dijkstra = {\n  single_source_shortest_paths: function single_source_shortest_paths(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {}; // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n\n    var costs = {};\n    costs[s] = 0; // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n    var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;\n\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost; // Get nodes adjacent to u...\n\n      adjacent_nodes = graph[u] || {}; // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v]; // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e; // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n\n          cost_of_s_to_v = costs[v];\n          first_visit = typeof costs[v] === 'undefined';\n\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n  extract_shortest_path_from_predecessor_list: function extract_shortest_path_from_predecessor_list(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n\n    nodes.reverse();\n    return nodes;\n  },\n  find_path: function find_path(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function make(opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n    default_sorter: function default_sorter(a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function push(value, cost) {\n      var item = {\n        value: value,\n        cost: cost\n      };\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function pop() {\n      return this.queue.shift();\n    },\n    empty: function empty() {\n      return this.queue.length === 0;\n    }\n  }\n}; // node.js module exports\n\nif (true) {\n  module.exports = dijkstra;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/dijkstrajs/dijkstra.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/isarray/index.js":
/*!****************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/isarray/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanM/NTM2MiJdLCJuYW1lcyI6WyJ0b1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJBcnJheSIsImlzQXJyYXkiLCJhcnIiLCJjYWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxRQUFRLEdBQUcsR0FBR0EsUUFBbEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsS0FBSyxDQUFDQyxPQUFOLElBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUMvQyxTQUFPTCxRQUFRLENBQUNNLElBQVQsQ0FBY0QsR0FBZCxLQUFzQixnQkFBN0I7QUFDRCxDQUZEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/isarray/index.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/browser.js":
/*!*********************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/browser.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var canPromise = __webpack_require__(/*! ./can-promise */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/can-promise.js\");\n\nvar QRCode = __webpack_require__(/*! ./core/qrcode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/qrcode.js\");\n\nvar CanvasRenderer = __webpack_require__(/*! ./renderer/canvas */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/canvas.js\");\n\nvar SvgRenderer = __webpack_require__(/*! ./renderer/svg-tag.js */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/svg-tag.js\");\n\nfunction renderCanvas(renderFunc, canvas, text, opts, cb) {\n  var args = [].slice.call(arguments, 1);\n  var argsNum = args.length;\n  var isLastArgCb = typeof args[argsNum - 1] === 'function';\n\n  if (!isLastArgCb && !canPromise()) {\n    throw new Error('Callback required as last argument');\n  }\n\n  if (isLastArgCb) {\n    if (argsNum < 2) {\n      throw new Error('Too few arguments provided');\n    }\n\n    if (argsNum === 2) {\n      cb = text;\n      text = canvas;\n      canvas = opts = undefined;\n    } else if (argsNum === 3) {\n      if (canvas.getContext && typeof cb === 'undefined') {\n        cb = opts;\n        opts = undefined;\n      } else {\n        cb = opts;\n        opts = text;\n        text = canvas;\n        canvas = undefined;\n      }\n    }\n  } else {\n    if (argsNum < 1) {\n      throw new Error('Too few arguments provided');\n    }\n\n    if (argsNum === 1) {\n      text = canvas;\n      canvas = opts = undefined;\n    } else if (argsNum === 2 && !canvas.getContext) {\n      opts = text;\n      text = canvas;\n      canvas = undefined;\n    }\n\n    return new Promise(function (resolve, reject) {\n      try {\n        var data = QRCode.create(text, opts);\n        resolve(renderFunc(data, canvas, opts));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  try {\n    var data = QRCode.create(text, opts);\n    cb(null, renderFunc(data, canvas, opts));\n  } catch (e) {\n    cb(e);\n  }\n}\n\nexports.create = QRCode.create;\nexports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);\nexports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL); // only svg for now.\n\nexports.toString = renderCanvas.bind(null, function (data, _, opts) {\n  return SvgRenderer.render(data, opts);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvYnJvd3Nlci5qcz81NDI0Il0sIm5hbWVzIjpbImNhblByb21pc2UiLCJyZXF1aXJlIiwiUVJDb2RlIiwiQ2FudmFzUmVuZGVyZXIiLCJTdmdSZW5kZXJlciIsInJlbmRlckNhbnZhcyIsInJlbmRlckZ1bmMiLCJjYW52YXMiLCJ0ZXh0Iiwib3B0cyIsImNiIiwiYXJncyIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImFyZ3NOdW0iLCJsZW5ndGgiLCJpc0xhc3RBcmdDYiIsIkVycm9yIiwidW5kZWZpbmVkIiwiZ2V0Q29udGV4dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGF0YSIsImNyZWF0ZSIsImUiLCJleHBvcnRzIiwidG9DYW52YXMiLCJiaW5kIiwicmVuZGVyIiwidG9EYXRhVVJMIiwicmVuZGVyVG9EYXRhVVJMIiwidG9TdHJpbmciLCJfIl0sIm1hcHBpbmdzIjoiQUFDQSxJQUFJQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMseUhBQUQsQ0FBeEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHlIQUFELENBQXBCOztBQUNBLElBQUlFLGNBQWMsR0FBR0YsbUJBQU8sQ0FBQyxpSUFBRCxDQUE1Qjs7QUFDQSxJQUFJRyxXQUFXLEdBQUdILG1CQUFPLENBQUMsc0lBQUQsQ0FBekI7O0FBRUEsU0FBU0ksWUFBVCxDQUF1QkMsVUFBdkIsRUFBbUNDLE1BQW5DLEVBQTJDQyxJQUEzQyxFQUFpREMsSUFBakQsRUFBdURDLEVBQXZELEVBQTJEO0FBQ3pELE1BQUlDLElBQUksR0FBRyxHQUFHQyxLQUFILENBQVNDLElBQVQsQ0FBY0MsU0FBZCxFQUF5QixDQUF6QixDQUFYO0FBQ0EsTUFBSUMsT0FBTyxHQUFHSixJQUFJLENBQUNLLE1BQW5CO0FBQ0EsTUFBSUMsV0FBVyxHQUFHLE9BQU9OLElBQUksQ0FBQ0ksT0FBTyxHQUFHLENBQVgsQ0FBWCxLQUE2QixVQUEvQzs7QUFFQSxNQUFJLENBQUNFLFdBQUQsSUFBZ0IsQ0FBQ2pCLFVBQVUsRUFBL0IsRUFBbUM7QUFDakMsVUFBTSxJQUFJa0IsS0FBSixDQUFVLG9DQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJRCxXQUFKLEVBQWlCO0FBQ2YsUUFBSUYsT0FBTyxHQUFHLENBQWQsRUFBaUI7QUFDZixZQUFNLElBQUlHLEtBQUosQ0FBVSw0QkFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSUgsT0FBTyxLQUFLLENBQWhCLEVBQW1CO0FBQ2pCTCxRQUFFLEdBQUdGLElBQUw7QUFDQUEsVUFBSSxHQUFHRCxNQUFQO0FBQ0FBLFlBQU0sR0FBR0UsSUFBSSxHQUFHVSxTQUFoQjtBQUNELEtBSkQsTUFJTyxJQUFJSixPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDeEIsVUFBSVIsTUFBTSxDQUFDYSxVQUFQLElBQXFCLE9BQU9WLEVBQVAsS0FBYyxXQUF2QyxFQUFvRDtBQUNsREEsVUFBRSxHQUFHRCxJQUFMO0FBQ0FBLFlBQUksR0FBR1UsU0FBUDtBQUNELE9BSEQsTUFHTztBQUNMVCxVQUFFLEdBQUdELElBQUw7QUFDQUEsWUFBSSxHQUFHRCxJQUFQO0FBQ0FBLFlBQUksR0FBR0QsTUFBUDtBQUNBQSxjQUFNLEdBQUdZLFNBQVQ7QUFDRDtBQUNGO0FBQ0YsR0FwQkQsTUFvQk87QUFDTCxRQUFJSixPQUFPLEdBQUcsQ0FBZCxFQUFpQjtBQUNmLFlBQU0sSUFBSUcsS0FBSixDQUFVLDRCQUFWLENBQU47QUFDRDs7QUFFRCxRQUFJSCxPQUFPLEtBQUssQ0FBaEIsRUFBbUI7QUFDakJQLFVBQUksR0FBR0QsTUFBUDtBQUNBQSxZQUFNLEdBQUdFLElBQUksR0FBR1UsU0FBaEI7QUFDRCxLQUhELE1BR08sSUFBSUosT0FBTyxLQUFLLENBQVosSUFBaUIsQ0FBQ1IsTUFBTSxDQUFDYSxVQUE3QixFQUF5QztBQUM5Q1gsVUFBSSxHQUFHRCxJQUFQO0FBQ0FBLFVBQUksR0FBR0QsTUFBUDtBQUNBQSxZQUFNLEdBQUdZLFNBQVQ7QUFDRDs7QUFFRCxXQUFPLElBQUlFLE9BQUosQ0FBWSxVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUM1QyxVQUFJO0FBQ0YsWUFBSUMsSUFBSSxHQUFHdEIsTUFBTSxDQUFDdUIsTUFBUCxDQUFjakIsSUFBZCxFQUFvQkMsSUFBcEIsQ0FBWDtBQUNBYSxlQUFPLENBQUNoQixVQUFVLENBQUNrQixJQUFELEVBQU9qQixNQUFQLEVBQWVFLElBQWYsQ0FBWCxDQUFQO0FBQ0QsT0FIRCxDQUdFLE9BQU9pQixDQUFQLEVBQVU7QUFDVkgsY0FBTSxDQUFDRyxDQUFELENBQU47QUFDRDtBQUNGLEtBUE0sQ0FBUDtBQVFEOztBQUVELE1BQUk7QUFDRixRQUFJRixJQUFJLEdBQUd0QixNQUFNLENBQUN1QixNQUFQLENBQWNqQixJQUFkLEVBQW9CQyxJQUFwQixDQUFYO0FBQ0FDLE1BQUUsQ0FBQyxJQUFELEVBQU9KLFVBQVUsQ0FBQ2tCLElBQUQsRUFBT2pCLE1BQVAsRUFBZUUsSUFBZixDQUFqQixDQUFGO0FBQ0QsR0FIRCxDQUdFLE9BQU9pQixDQUFQLEVBQVU7QUFDVmhCLE1BQUUsQ0FBQ2dCLENBQUQsQ0FBRjtBQUNEO0FBQ0Y7O0FBRURDLE9BQU8sQ0FBQ0YsTUFBUixHQUFpQnZCLE1BQU0sQ0FBQ3VCLE1BQXhCO0FBQ0FFLE9BQU8sQ0FBQ0MsUUFBUixHQUFtQnZCLFlBQVksQ0FBQ3dCLElBQWIsQ0FBa0IsSUFBbEIsRUFBd0IxQixjQUFjLENBQUMyQixNQUF2QyxDQUFuQjtBQUNBSCxPQUFPLENBQUNJLFNBQVIsR0FBb0IxQixZQUFZLENBQUN3QixJQUFiLENBQWtCLElBQWxCLEVBQXdCMUIsY0FBYyxDQUFDNkIsZUFBdkMsQ0FBcEIsQyxDQUVBOztBQUNBTCxPQUFPLENBQUNNLFFBQVIsR0FBbUI1QixZQUFZLENBQUN3QixJQUFiLENBQWtCLElBQWxCLEVBQXdCLFVBQVVMLElBQVYsRUFBZ0JVLENBQWhCLEVBQW1CekIsSUFBbkIsRUFBeUI7QUFDbEUsU0FBT0wsV0FBVyxDQUFDMEIsTUFBWixDQUFtQk4sSUFBbkIsRUFBeUJmLElBQXpCLENBQVA7QUFDRCxDQUZrQixDQUFuQiIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY2FuUHJvbWlzZSA9IHJlcXVpcmUoJy4vY2FuLXByb21pc2UnKVxuXG52YXIgUVJDb2RlID0gcmVxdWlyZSgnLi9jb3JlL3FyY29kZScpXG52YXIgQ2FudmFzUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL2NhbnZhcycpXG52YXIgU3ZnUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL3N2Zy10YWcuanMnKVxuXG5mdW5jdGlvbiByZW5kZXJDYW52YXMgKHJlbmRlckZ1bmMsIGNhbnZhcywgdGV4dCwgb3B0cywgY2IpIHtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgdmFyIGFyZ3NOdW0gPSBhcmdzLmxlbmd0aFxuICB2YXIgaXNMYXN0QXJnQ2IgPSB0eXBlb2YgYXJnc1thcmdzTnVtIC0gMV0gPT09ICdmdW5jdGlvbidcblxuICBpZiAoIWlzTGFzdEFyZ0NiICYmICFjYW5Qcm9taXNlKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIHJlcXVpcmVkIGFzIGxhc3QgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKGlzTGFzdEFyZ0NiKSB7XG4gICAgaWYgKGFyZ3NOdW0gPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoYXJnc051bSA9PT0gMikge1xuICAgICAgY2IgPSB0ZXh0XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSBvcHRzID0gdW5kZWZpbmVkXG4gICAgfSBlbHNlIGlmIChhcmdzTnVtID09PSAzKSB7XG4gICAgICBpZiAoY2FudmFzLmdldENvbnRleHQgJiYgdHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjYiA9IG9wdHNcbiAgICAgICAgb3B0cyA9IHVuZGVmaW5lZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IgPSBvcHRzXG4gICAgICAgIG9wdHMgPSB0ZXh0XG4gICAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChhcmdzTnVtIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gZmV3IGFyZ3VtZW50cyBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKGFyZ3NOdW0gPT09IDEpIHtcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IG9wdHMgPSB1bmRlZmluZWRcbiAgICB9IGVsc2UgaWYgKGFyZ3NOdW0gPT09IDIgJiYgIWNhbnZhcy5nZXRDb250ZXh0KSB7XG4gICAgICBvcHRzID0gdGV4dFxuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkYXRhID0gUVJDb2RlLmNyZWF0ZSh0ZXh0LCBvcHRzKVxuICAgICAgICByZXNvbHZlKHJlbmRlckZ1bmMoZGF0YSwgY2FudmFzLCBvcHRzKSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGRhdGEgPSBRUkNvZGUuY3JlYXRlKHRleHQsIG9wdHMpXG4gICAgY2IobnVsbCwgcmVuZGVyRnVuYyhkYXRhLCBjYW52YXMsIG9wdHMpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2IoZSlcbiAgfVxufVxuXG5leHBvcnRzLmNyZWF0ZSA9IFFSQ29kZS5jcmVhdGVcbmV4cG9ydHMudG9DYW52YXMgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXIpXG5leHBvcnRzLnRvRGF0YVVSTCA9IHJlbmRlckNhbnZhcy5iaW5kKG51bGwsIENhbnZhc1JlbmRlcmVyLnJlbmRlclRvRGF0YVVSTClcblxuLy8gb25seSBzdmcgZm9yIG5vdy5cbmV4cG9ydHMudG9TdHJpbmcgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBmdW5jdGlvbiAoZGF0YSwgXywgb3B0cykge1xuICByZXR1cm4gU3ZnUmVuZGVyZXIucmVuZGVyKGRhdGEsIG9wdHMpXG59KVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/browser.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/can-promise.js":
/*!*************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/can-promise.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// can-promise has a crash in some versions of react native that dont have\n// standard global objects\n// https://github.com/soldair/node-qrcode/issues/157\nmodule.exports = function () {\n  return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY2FuLXByb21pc2UuanM/NTYwMSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiUHJvbWlzZSIsInByb3RvdHlwZSIsInRoZW4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtBQUMzQixTQUFPLE9BQU9DLE9BQVAsS0FBbUIsVUFBbkIsSUFBaUNBLE9BQU8sQ0FBQ0MsU0FBekMsSUFBc0RELE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkMsSUFBL0U7QUFDRCxDQUZEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Nhbi1wcm9taXNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FuLXByb21pc2UgaGFzIGEgY3Jhc2ggaW4gc29tZSB2ZXJzaW9ucyBvZiByZWFjdCBuYXRpdmUgdGhhdCBkb250IGhhdmVcbi8vIHN0YW5kYXJkIGdsb2JhbCBvYmplY3RzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc29sZGFpci9ub2RlLXFyY29kZS9pc3N1ZXMvMTU3XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicgJiYgUHJvbWlzZS5wcm90b3R5cGUgJiYgUHJvbWlzZS5wcm90b3R5cGUudGhlblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/can-promise.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alignment-pattern.js":
/*!************************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alignment-pattern.js ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */\nvar getSymbolSize = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\").getSymbolSize;\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */\n\n\nexports.getRowColCoords = function getRowColCoords(version) {\n  if (version === 1) return [];\n  var posCount = Math.floor(version / 7) + 2;\n  var size = getSymbolSize(version);\n  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;\n  var positions = [size - 7]; // Last coord is always (size - 7)\n\n  for (var i = 1; i < posCount - 1; i++) {\n    positions[i] = positions[i - 1] - intervals;\n  }\n\n  positions.push(6); // First coord is always 6\n\n  return positions.reverse();\n};\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * var pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\n\n\nexports.getPositions = function getPositions(version) {\n  var coords = [];\n  var pos = exports.getRowColCoords(version);\n  var posLength = pos.length;\n\n  for (var i = 0; i < posLength; i++) {\n    for (var j = 0; j < posLength; j++) {\n      // Skip if position is occupied by finder patterns\n      if (i === 0 && j === 0 || // top-left\n      i === 0 && j === posLength - 1 || // bottom-left\n      i === posLength - 1 && j === 0) {\n        // top-right\n        continue;\n      }\n\n      coords.push([pos[i], pos[j]]);\n    }\n  }\n\n  return coords;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9hbGlnbm1lbnQtcGF0dGVybi5qcz85Y2ExIl0sIm5hbWVzIjpbImdldFN5bWJvbFNpemUiLCJyZXF1aXJlIiwiZXhwb3J0cyIsImdldFJvd0NvbENvb3JkcyIsInZlcnNpb24iLCJwb3NDb3VudCIsIk1hdGgiLCJmbG9vciIsInNpemUiLCJpbnRlcnZhbHMiLCJjZWlsIiwicG9zaXRpb25zIiwiaSIsInB1c2giLCJyZXZlcnNlIiwiZ2V0UG9zaXRpb25zIiwiY29vcmRzIiwicG9zIiwicG9zTGVuZ3RoIiwibGVuZ3RoIiwiaiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBSUEsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLGtIQUFELENBQVAsQ0FBbUJELGFBQXZDO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FFLE9BQU8sQ0FBQ0MsZUFBUixHQUEwQixTQUFTQSxlQUFULENBQTBCQyxPQUExQixFQUFtQztBQUMzRCxNQUFJQSxPQUFPLEtBQUssQ0FBaEIsRUFBbUIsT0FBTyxFQUFQO0FBRW5CLE1BQUlDLFFBQVEsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdILE9BQU8sR0FBRyxDQUFyQixJQUEwQixDQUF6QztBQUNBLE1BQUlJLElBQUksR0FBR1IsYUFBYSxDQUFDSSxPQUFELENBQXhCO0FBQ0EsTUFBSUssU0FBUyxHQUFHRCxJQUFJLEtBQUssR0FBVCxHQUFlLEVBQWYsR0FBb0JGLElBQUksQ0FBQ0ksSUFBTCxDQUFVLENBQUNGLElBQUksR0FBRyxFQUFSLEtBQWUsSUFBSUgsUUFBSixHQUFlLENBQTlCLENBQVYsSUFBOEMsQ0FBbEY7QUFDQSxNQUFJTSxTQUFTLEdBQUcsQ0FBQ0gsSUFBSSxHQUFHLENBQVIsQ0FBaEIsQ0FOMkQsQ0FNaEM7O0FBRTNCLE9BQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1AsUUFBUSxHQUFHLENBQS9CLEVBQWtDTyxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDRCxhQUFTLENBQUNDLENBQUQsQ0FBVCxHQUFlRCxTQUFTLENBQUNDLENBQUMsR0FBRyxDQUFMLENBQVQsR0FBbUJILFNBQWxDO0FBQ0Q7O0FBRURFLFdBQVMsQ0FBQ0UsSUFBVixDQUFlLENBQWYsRUFaMkQsQ0FZekM7O0FBRWxCLFNBQU9GLFNBQVMsQ0FBQ0csT0FBVixFQUFQO0FBQ0QsQ0FmRDtBQWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQVosT0FBTyxDQUFDYSxZQUFSLEdBQXVCLFNBQVNBLFlBQVQsQ0FBdUJYLE9BQXZCLEVBQWdDO0FBQ3JELE1BQUlZLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUMsR0FBRyxHQUFHZixPQUFPLENBQUNDLGVBQVIsQ0FBd0JDLE9BQXhCLENBQVY7QUFDQSxNQUFJYyxTQUFTLEdBQUdELEdBQUcsQ0FBQ0UsTUFBcEI7O0FBRUEsT0FBSyxJQUFJUCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTSxTQUFwQixFQUErQk4sQ0FBQyxFQUFoQyxFQUFvQztBQUNsQyxTQUFLLElBQUlRLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLFNBQXBCLEVBQStCRSxDQUFDLEVBQWhDLEVBQW9DO0FBQ2xDO0FBQ0EsVUFBS1IsQ0FBQyxLQUFLLENBQU4sSUFBV1EsQ0FBQyxLQUFLLENBQWxCLElBQW9DO0FBQ25DUixPQUFDLEtBQUssQ0FBTixJQUFXUSxDQUFDLEtBQUtGLFNBQVMsR0FBRyxDQUQ5QixJQUNvQztBQUNuQ04sT0FBQyxLQUFLTSxTQUFTLEdBQUcsQ0FBbEIsSUFBdUJFLENBQUMsS0FBSyxDQUZsQyxFQUVzQztBQUFFO0FBQ3RDO0FBQ0Q7O0FBRURKLFlBQU0sQ0FBQ0gsSUFBUCxDQUFZLENBQUNJLEdBQUcsQ0FBQ0wsQ0FBRCxDQUFKLEVBQVNLLEdBQUcsQ0FBQ0csQ0FBRCxDQUFaLENBQVo7QUFDRDtBQUNGOztBQUVELFNBQU9KLE1BQVA7QUFDRCxDQW5CRCIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FsaWdubWVudC1wYXR0ZXJuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbGlnbm1lbnQgcGF0dGVybiBhcmUgZml4ZWQgcmVmZXJlbmNlIHBhdHRlcm4gaW4gZGVmaW5lZCBwb3NpdGlvbnNcbiAqIGluIGEgbWF0cml4IHN5bWJvbG9neSwgd2hpY2ggZW5hYmxlcyB0aGUgZGVjb2RlIHNvZnR3YXJlIHRvIHJlLXN5bmNocm9uaXNlXG4gKiB0aGUgY29vcmRpbmF0ZSBtYXBwaW5nIG9mIHRoZSBpbWFnZSBtb2R1bGVzIGluIHRoZSBldmVudCBvZiBtb2RlcmF0ZSBhbW91bnRzXG4gKiBvZiBkaXN0b3J0aW9uIG9mIHRoZSBpbWFnZS5cbiAqXG4gKiBBbGlnbm1lbnQgcGF0dGVybnMgYXJlIHByZXNlbnQgb25seSBpbiBRUiBDb2RlIHN5bWJvbHMgb2YgdmVyc2lvbiAyIG9yIGxhcmdlclxuICogYW5kIHRoZWlyIG51bWJlciBkZXBlbmRzIG9uIHRoZSBzeW1ib2wgdmVyc2lvbi5cbiAqL1xuXG52YXIgZ2V0U3ltYm9sU2l6ZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5nZXRTeW1ib2xTaXplXG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSByb3cvY29sdW1uIGNvb3JkaW5hdGVzIG9mIHRoZSBjZW50ZXIgbW9kdWxlIG9mIGVhY2ggYWxpZ25tZW50IHBhdHRlcm5cbiAqIGZvciB0aGUgc3BlY2lmaWVkIFFSIENvZGUgdmVyc2lvbi5cbiAqXG4gKiBUaGUgYWxpZ25tZW50IHBhdHRlcm5zIGFyZSBwb3NpdGlvbmVkIHN5bW1ldHJpY2FsbHkgb24gZWl0aGVyIHNpZGUgb2YgdGhlIGRpYWdvbmFsXG4gKiBydW5uaW5nIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgc3ltYm9sIHRvIHRoZSBib3R0b20gcmlnaHQgY29ybmVyLlxuICpcbiAqIFNpbmNlIHBvc2l0aW9ucyBhcmUgc2ltbWV0cmljYWwgb25seSBoYWxmIG9mIHRoZSBjb29yZGluYXRlcyBhcmUgcmV0dXJuZWQuXG4gKiBFYWNoIGl0ZW0gb2YgdGhlIGFycmF5IHdpbGwgcmVwcmVzZW50IGluIHR1cm4gdGhlIHggYW5kIHkgY29vcmRpbmF0ZS5cbiAqIEBzZWUge0BsaW5rIGdldFBvc2l0aW9uc31cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2YgY29vcmRpbmF0ZVxuICovXG5leHBvcnRzLmdldFJvd0NvbENvb3JkcyA9IGZ1bmN0aW9uIGdldFJvd0NvbENvb3JkcyAodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMSkgcmV0dXJuIFtdXG5cbiAgdmFyIHBvc0NvdW50ID0gTWF0aC5mbG9vcih2ZXJzaW9uIC8gNykgKyAyXG4gIHZhciBzaXplID0gZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuICB2YXIgaW50ZXJ2YWxzID0gc2l6ZSA9PT0gMTQ1ID8gMjYgOiBNYXRoLmNlaWwoKHNpemUgLSAxMykgLyAoMiAqIHBvc0NvdW50IC0gMikpICogMlxuICB2YXIgcG9zaXRpb25zID0gW3NpemUgLSA3XSAvLyBMYXN0IGNvb3JkIGlzIGFsd2F5cyAoc2l6ZSAtIDcpXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb3NDb3VudCAtIDE7IGkrKykge1xuICAgIHBvc2l0aW9uc1tpXSA9IHBvc2l0aW9uc1tpIC0gMV0gLSBpbnRlcnZhbHNcbiAgfVxuXG4gIHBvc2l0aW9ucy5wdXNoKDYpIC8vIEZpcnN0IGNvb3JkIGlzIGFsd2F5cyA2XG5cbiAgcmV0dXJuIHBvc2l0aW9ucy5yZXZlcnNlKClcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc2l0aW9ucyBvZiBlYWNoIGFsaWdubWVudCBwYXR0ZXJuLlxuICogRWFjaCBhcnJheSdzIGVsZW1lbnQgcmVwcmVzZW50IHRoZSBjZW50ZXIgcG9pbnQgb2YgdGhlIHBhdHRlcm4gYXMgKHgsIHkpIGNvb3JkaW5hdGVzXG4gKlxuICogQ29vcmRpbmF0ZXMgYXJlIGNhbGN1bGF0ZWQgZXhwYW5kaW5nIHRoZSByb3cvY29sdW1uIGNvb3JkaW5hdGVzIHJldHVybmVkIGJ5IHtAbGluayBnZXRSb3dDb2xDb29yZHN9XG4gKiBhbmQgZmlsdGVyaW5nIG91dCB0aGUgaXRlbXMgdGhhdCBvdmVybGFwcyB3aXRoIGZpbmRlciBwYXR0ZXJuXG4gKlxuICogQGV4YW1wbGVcbiAqIEZvciBhIFZlcnNpb24gNyBzeW1ib2wge0BsaW5rIGdldFJvd0NvbENvb3Jkc30gcmV0dXJucyB2YWx1ZXMgNiwgMjIgYW5kIDM4LlxuICogVGhlIGFsaWdubWVudCBwYXR0ZXJucywgdGhlcmVmb3JlLCBhcmUgdG8gYmUgY2VudGVyZWQgb24gKHJvdywgY29sdW1uKVxuICogcG9zaXRpb25zICg2LDIyKSwgKDIyLDYpLCAoMjIsMjIpLCAoMjIsMzgpLCAoMzgsMjIpLCAoMzgsMzgpLlxuICogTm90ZSB0aGF0IHRoZSBjb29yZGluYXRlcyAoNiw2KSwgKDYsMzgpLCAoMzgsNikgYXJlIG9jY3VwaWVkIGJ5IGZpbmRlciBwYXR0ZXJuc1xuICogYW5kIGFyZSBub3QgdGhlcmVmb3JlIHVzZWQgZm9yIGFsaWdubWVudCBwYXR0ZXJucy5cbiAqXG4gKiB2YXIgcG9zID0gZ2V0UG9zaXRpb25zKDcpXG4gKiAvLyBbWzYsMjJdLCBbMjIsNl0sIFsyMiwyMl0sIFsyMiwzOF0sIFszOCwyMl0sIFszOCwzOF1dXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIGNvb3JkaW5hdGVzXG4gKi9cbmV4cG9ydHMuZ2V0UG9zaXRpb25zID0gZnVuY3Rpb24gZ2V0UG9zaXRpb25zICh2ZXJzaW9uKSB7XG4gIHZhciBjb29yZHMgPSBbXVxuICB2YXIgcG9zID0gZXhwb3J0cy5nZXRSb3dDb2xDb29yZHModmVyc2lvbilcbiAgdmFyIHBvc0xlbmd0aCA9IHBvcy5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc0xlbmd0aDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBwb3NMZW5ndGg7IGorKykge1xuICAgICAgLy8gU2tpcCBpZiBwb3NpdGlvbiBpcyBvY2N1cGllZCBieSBmaW5kZXIgcGF0dGVybnNcbiAgICAgIGlmICgoaSA9PT0gMCAmJiBqID09PSAwKSB8fCAgICAgICAgICAgICAvLyB0b3AtbGVmdFxuICAgICAgICAgIChpID09PSAwICYmIGogPT09IHBvc0xlbmd0aCAtIDEpIHx8IC8vIGJvdHRvbS1sZWZ0XG4gICAgICAgICAgKGkgPT09IHBvc0xlbmd0aCAtIDEgJiYgaiA9PT0gMCkpIHsgLy8gdG9wLXJpZ2h0XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGNvb3Jkcy5wdXNoKFtwb3NbaV0sIHBvc1tqXV0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvb3Jkc1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alignment-pattern.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alphanumeric-data.js":
/*!************************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alphanumeric-data.js ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Mode = __webpack_require__(/*! ./mode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\");\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */\n\n\nvar ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];\n\nfunction AlphanumericData(data) {\n  this.mode = Mode.ALPHANUMERIC;\n  this.data = data;\n}\n\nAlphanumericData.getBitsLength = function getBitsLength(length) {\n  return 11 * Math.floor(length / 2) + 6 * (length % 2);\n};\n\nAlphanumericData.prototype.getLength = function getLength() {\n  return this.data.length;\n};\n\nAlphanumericData.prototype.getBitsLength = function getBitsLength() {\n  return AlphanumericData.getBitsLength(this.data.length);\n};\n\nAlphanumericData.prototype.write = function write(bitBuffer) {\n  var i; // Input data characters are divided into groups of two characters\n  // and encoded as 11-bit binary codes.\n\n  for (i = 0; i + 2 <= this.data.length; i += 2) {\n    // The character value of the first character is multiplied by 45\n    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45; // The character value of the second digit is added to the product\n\n    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]); // The sum is then stored as 11-bit binary number\n\n    bitBuffer.put(value, 11);\n  } // If the number of input data characters is not a multiple of two,\n  // the character value of the final character is encoded as a 6-bit binary number.\n\n\n  if (this.data.length % 2) {\n    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);\n  }\n};\n\nmodule.exports = AlphanumericData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9hbHBoYW51bWVyaWMtZGF0YS5qcz9hZDYyIl0sIm5hbWVzIjpbIk1vZGUiLCJyZXF1aXJlIiwiQUxQSEFfTlVNX0NIQVJTIiwiQWxwaGFudW1lcmljRGF0YSIsImRhdGEiLCJtb2RlIiwiQUxQSEFOVU1FUklDIiwiZ2V0Qml0c0xlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJmbG9vciIsInByb3RvdHlwZSIsImdldExlbmd0aCIsIndyaXRlIiwiYml0QnVmZmVyIiwiaSIsInZhbHVlIiwiaW5kZXhPZiIsInB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxnSEFBRCxDQUFsQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsSUFBSUMsZUFBZSxHQUFHLENBQ3BCLEdBRG9CLEVBQ2YsR0FEZSxFQUNWLEdBRFUsRUFDTCxHQURLLEVBQ0EsR0FEQSxFQUNLLEdBREwsRUFDVSxHQURWLEVBQ2UsR0FEZixFQUNvQixHQURwQixFQUN5QixHQUR6QixFQUVwQixHQUZvQixFQUVmLEdBRmUsRUFFVixHQUZVLEVBRUwsR0FGSyxFQUVBLEdBRkEsRUFFSyxHQUZMLEVBRVUsR0FGVixFQUVlLEdBRmYsRUFFb0IsR0FGcEIsRUFFeUIsR0FGekIsRUFFOEIsR0FGOUIsRUFFbUMsR0FGbkMsRUFFd0MsR0FGeEMsRUFHcEIsR0FIb0IsRUFHZixHQUhlLEVBR1YsR0FIVSxFQUdMLEdBSEssRUFHQSxHQUhBLEVBR0ssR0FITCxFQUdVLEdBSFYsRUFHZSxHQUhmLEVBR29CLEdBSHBCLEVBR3lCLEdBSHpCLEVBRzhCLEdBSDlCLEVBR21DLEdBSG5DLEVBR3dDLEdBSHhDLEVBSXBCLEdBSm9CLEVBSWYsR0FKZSxFQUlWLEdBSlUsRUFJTCxHQUpLLEVBSUEsR0FKQSxFQUlLLEdBSkwsRUFJVSxHQUpWLEVBSWUsR0FKZixFQUlvQixHQUpwQixDQUF0Qjs7QUFPQSxTQUFTQyxnQkFBVCxDQUEyQkMsSUFBM0IsRUFBaUM7QUFDL0IsT0FBS0MsSUFBTCxHQUFZTCxJQUFJLENBQUNNLFlBQWpCO0FBQ0EsT0FBS0YsSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7O0FBRURELGdCQUFnQixDQUFDSSxhQUFqQixHQUFpQyxTQUFTQSxhQUFULENBQXdCQyxNQUF4QixFQUFnQztBQUMvRCxTQUFPLEtBQUtDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRixNQUFNLEdBQUcsQ0FBcEIsQ0FBTCxHQUE4QixLQUFLQSxNQUFNLEdBQUcsQ0FBZCxDQUFyQztBQUNELENBRkQ7O0FBSUFMLGdCQUFnQixDQUFDUSxTQUFqQixDQUEyQkMsU0FBM0IsR0FBdUMsU0FBU0EsU0FBVCxHQUFzQjtBQUMzRCxTQUFPLEtBQUtSLElBQUwsQ0FBVUksTUFBakI7QUFDRCxDQUZEOztBQUlBTCxnQkFBZ0IsQ0FBQ1EsU0FBakIsQ0FBMkJKLGFBQTNCLEdBQTJDLFNBQVNBLGFBQVQsR0FBMEI7QUFDbkUsU0FBT0osZ0JBQWdCLENBQUNJLGFBQWpCLENBQStCLEtBQUtILElBQUwsQ0FBVUksTUFBekMsQ0FBUDtBQUNELENBRkQ7O0FBSUFMLGdCQUFnQixDQUFDUSxTQUFqQixDQUEyQkUsS0FBM0IsR0FBbUMsU0FBU0EsS0FBVCxDQUFnQkMsU0FBaEIsRUFBMkI7QUFDNUQsTUFBSUMsQ0FBSixDQUQ0RCxDQUc1RDtBQUNBOztBQUNBLE9BQUtBLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRyxDQUFKLElBQVMsS0FBS1gsSUFBTCxDQUFVSSxNQUEvQixFQUF1Q08sQ0FBQyxJQUFJLENBQTVDLEVBQStDO0FBQzdDO0FBQ0EsUUFBSUMsS0FBSyxHQUFHZCxlQUFlLENBQUNlLE9BQWhCLENBQXdCLEtBQUtiLElBQUwsQ0FBVVcsQ0FBVixDQUF4QixJQUF3QyxFQUFwRCxDQUY2QyxDQUk3Qzs7QUFDQUMsU0FBSyxJQUFJZCxlQUFlLENBQUNlLE9BQWhCLENBQXdCLEtBQUtiLElBQUwsQ0FBVVcsQ0FBQyxHQUFHLENBQWQsQ0FBeEIsQ0FBVCxDQUw2QyxDQU83Qzs7QUFDQUQsYUFBUyxDQUFDSSxHQUFWLENBQWNGLEtBQWQsRUFBcUIsRUFBckI7QUFDRCxHQWQyRCxDQWdCNUQ7QUFDQTs7O0FBQ0EsTUFBSSxLQUFLWixJQUFMLENBQVVJLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDeEJNLGFBQVMsQ0FBQ0ksR0FBVixDQUFjaEIsZUFBZSxDQUFDZSxPQUFoQixDQUF3QixLQUFLYixJQUFMLENBQVVXLENBQVYsQ0FBeEIsQ0FBZCxFQUFxRCxDQUFyRDtBQUNEO0FBQ0YsQ0FyQkQ7O0FBdUJBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixnQkFBakIiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9hbHBoYW51bWVyaWMtZGF0YS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuLyoqXG4gKiBBcnJheSBvZiBjaGFyYWN0ZXJzIGF2YWlsYWJsZSBpbiBhbHBoYW51bWVyaWMgbW9kZVxuICpcbiAqIEFzIHBlciBRUiBDb2RlIHNwZWNpZmljYXRpb24sIHRvIGVhY2ggY2hhcmFjdGVyXG4gKiBpcyBhc3NpZ25lZCBhIHZhbHVlIGZyb20gMCB0byA0NCB3aGljaCBpbiB0aGlzIGNhc2UgY29pbmNpZGVzXG4gKiB3aXRoIHRoZSBhcnJheSBpbmRleFxuICpcbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xudmFyIEFMUEhBX05VTV9DSEFSUyA9IFtcbiAgJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLFxuICAnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsXG4gICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJyxcbiAgJyAnLCAnJCcsICclJywgJyonLCAnKycsICctJywgJy4nLCAnLycsICc6J1xuXVxuXG5mdW5jdGlvbiBBbHBoYW51bWVyaWNEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuQUxQSEFOVU1FUklDXG4gIHRoaXMuZGF0YSA9IGRhdGFcbn1cblxuQWxwaGFudW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiAxMSAqIE1hdGguZmxvb3IobGVuZ3RoIC8gMikgKyA2ICogKGxlbmd0aCAlIDIpXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIEFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChiaXRCdWZmZXIpIHtcbiAgdmFyIGlcblxuICAvLyBJbnB1dCBkYXRhIGNoYXJhY3RlcnMgYXJlIGRpdmlkZWQgaW50byBncm91cHMgb2YgdHdvIGNoYXJhY3RlcnNcbiAgLy8gYW5kIGVuY29kZWQgYXMgMTEtYml0IGJpbmFyeSBjb2Rlcy5cbiAgZm9yIChpID0gMDsgaSArIDIgPD0gdGhpcy5kYXRhLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgLy8gVGhlIGNoYXJhY3RlciB2YWx1ZSBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzIG11bHRpcGxpZWQgYnkgNDVcbiAgICB2YXIgdmFsdWUgPSBBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaV0pICogNDVcblxuICAgIC8vIFRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIHNlY29uZCBkaWdpdCBpcyBhZGRlZCB0byB0aGUgcHJvZHVjdFxuICAgIHZhbHVlICs9IEFMUEhBX05VTV9DSEFSUy5pbmRleE9mKHRoaXMuZGF0YVtpICsgMV0pXG5cbiAgICAvLyBUaGUgc3VtIGlzIHRoZW4gc3RvcmVkIGFzIDExLWJpdCBiaW5hcnkgbnVtYmVyXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgMTEpXG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGlucHV0IGRhdGEgY2hhcmFjdGVycyBpcyBub3QgYSBtdWx0aXBsZSBvZiB0d28sXG4gIC8vIHRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIGZpbmFsIGNoYXJhY3RlciBpcyBlbmNvZGVkIGFzIGEgNi1iaXQgYmluYXJ5IG51bWJlci5cbiAgaWYgKHRoaXMuZGF0YS5sZW5ndGggJSAyKSB7XG4gICAgYml0QnVmZmVyLnB1dChBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaV0pLCA2KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWxwaGFudW1lcmljRGF0YVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alphanumeric-data.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-buffer.js":
/*!*****************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-buffer.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function BitBuffer() {\n  this.buffer = [];\n  this.length = 0;\n}\n\nBitBuffer.prototype = {\n  get: function get(index) {\n    var bufIndex = Math.floor(index / 8);\n    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\n  },\n  put: function put(num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit((num >>> length - i - 1 & 1) === 1);\n    }\n  },\n  getLengthInBits: function getLengthInBits() {\n    return this.length;\n  },\n  putBit: function putBit(bit) {\n    var bufIndex = Math.floor(this.length / 8);\n\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n\n    this.length++;\n  }\n};\nmodule.exports = BitBuffer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtYnVmZmVyLmpzP2IyZjgiXSwibmFtZXMiOlsiQml0QnVmZmVyIiwiYnVmZmVyIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiZ2V0IiwiaW5kZXgiLCJidWZJbmRleCIsIk1hdGgiLCJmbG9vciIsInB1dCIsIm51bSIsImkiLCJwdXRCaXQiLCJnZXRMZW5ndGhJbkJpdHMiLCJiaXQiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsU0FBVCxHQUFzQjtBQUNwQixPQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNBLE9BQUtDLE1BQUwsR0FBYyxDQUFkO0FBQ0Q7O0FBRURGLFNBQVMsQ0FBQ0csU0FBVixHQUFzQjtBQUVwQkMsS0FBRyxFQUFFLGFBQVVDLEtBQVYsRUFBaUI7QUFDcEIsUUFBSUMsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsS0FBSyxHQUFHLENBQW5CLENBQWY7QUFDQSxXQUFPLENBQUUsS0FBS0osTUFBTCxDQUFZSyxRQUFaLE1BQTJCLElBQUlELEtBQUssR0FBRyxDQUF4QyxHQUE4QyxDQUEvQyxNQUFzRCxDQUE3RDtBQUNELEdBTG1CO0FBT3BCSSxLQUFHLEVBQUUsYUFBVUMsR0FBVixFQUFlUixNQUFmLEVBQXVCO0FBQzFCLFNBQUssSUFBSVMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1QsTUFBcEIsRUFBNEJTLENBQUMsRUFBN0IsRUFBaUM7QUFDL0IsV0FBS0MsTUFBTCxDQUFZLENBQUVGLEdBQUcsS0FBTVIsTUFBTSxHQUFHUyxDQUFULEdBQWEsQ0FBdkIsR0FBNkIsQ0FBOUIsTUFBcUMsQ0FBakQ7QUFDRDtBQUNGLEdBWG1CO0FBYXBCRSxpQkFBZSxFQUFFLDJCQUFZO0FBQzNCLFdBQU8sS0FBS1gsTUFBWjtBQUNELEdBZm1CO0FBaUJwQlUsUUFBTSxFQUFFLGdCQUFVRSxHQUFWLEVBQWU7QUFDckIsUUFBSVIsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxLQUFLTixNQUFMLEdBQWMsQ0FBekIsQ0FBZjs7QUFDQSxRQUFJLEtBQUtELE1BQUwsQ0FBWUMsTUFBWixJQUFzQkksUUFBMUIsRUFBb0M7QUFDbEMsV0FBS0wsTUFBTCxDQUFZYyxJQUFaLENBQWlCLENBQWpCO0FBQ0Q7O0FBRUQsUUFBSUQsR0FBSixFQUFTO0FBQ1AsV0FBS2IsTUFBTCxDQUFZSyxRQUFaLEtBQTBCLFNBQVUsS0FBS0osTUFBTCxHQUFjLENBQWxEO0FBQ0Q7O0FBRUQsU0FBS0EsTUFBTDtBQUNEO0FBNUJtQixDQUF0QjtBQStCQWMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsU0FBakIiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtYnVmZmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gQml0QnVmZmVyICgpIHtcbiAgdGhpcy5idWZmZXIgPSBbXVxuICB0aGlzLmxlbmd0aCA9IDBcbn1cblxuQml0QnVmZmVyLnByb3RvdHlwZSA9IHtcblxuICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBidWZJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyA4KVxuICAgIHJldHVybiAoKHRoaXMuYnVmZmVyW2J1ZkluZGV4XSA+Pj4gKDcgLSBpbmRleCAlIDgpKSAmIDEpID09PSAxXG4gIH0sXG5cbiAgcHV0OiBmdW5jdGlvbiAobnVtLCBsZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnB1dEJpdCgoKG51bSA+Pj4gKGxlbmd0aCAtIGkgLSAxKSkgJiAxKSA9PT0gMSlcbiAgICB9XG4gIH0sXG5cbiAgZ2V0TGVuZ3RoSW5CaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXG4gIH0sXG5cbiAgcHV0Qml0OiBmdW5jdGlvbiAoYml0KSB7XG4gICAgdmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmxlbmd0aCAvIDgpXG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8PSBidWZJbmRleCkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaCgwKVxuICAgIH1cblxuICAgIGlmIChiaXQpIHtcbiAgICAgIHRoaXMuYnVmZmVyW2J1ZkluZGV4XSB8PSAoMHg4MCA+Pj4gKHRoaXMubGVuZ3RoICUgOCkpXG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGgrK1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQml0QnVmZmVyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-buffer.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-matrix.js":
/*!*****************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-matrix.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js\");\n/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */\n\n\nfunction BitMatrix(size) {\n  if (!size || size < 1) {\n    throw new Error('BitMatrix size must be defined and greater than 0');\n  }\n\n  this.size = size;\n  this.data = BufferUtil.alloc(size * size);\n  this.reservedBit = BufferUtil.alloc(size * size);\n}\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */\n\n\nBitMatrix.prototype.set = function (row, col, value, reserved) {\n  var index = row * this.size + col;\n  this.data[index] = value;\n  if (reserved) this.reservedBit[index] = true;\n};\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */\n\n\nBitMatrix.prototype.get = function (row, col) {\n  return this.data[row * this.size + col];\n};\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */\n\n\nBitMatrix.prototype.xor = function (row, col, value) {\n  this.data[row * this.size + col] ^= value;\n};\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */\n\n\nBitMatrix.prototype.isReserved = function (row, col) {\n  return this.reservedBit[row * this.size + col];\n};\n\nmodule.exports = BitMatrix;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtbWF0cml4LmpzPzU2ZDEiXSwibmFtZXMiOlsiQnVmZmVyVXRpbCIsInJlcXVpcmUiLCJCaXRNYXRyaXgiLCJzaXplIiwiRXJyb3IiLCJkYXRhIiwiYWxsb2MiLCJyZXNlcnZlZEJpdCIsInByb3RvdHlwZSIsInNldCIsInJvdyIsImNvbCIsInZhbHVlIiwicmVzZXJ2ZWQiLCJpbmRleCIsImdldCIsInhvciIsImlzUmVzZXJ2ZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsdUlBQUQsQ0FBeEI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTQyxTQUFULENBQW9CQyxJQUFwQixFQUEwQjtBQUN4QixNQUFJLENBQUNBLElBQUQsSUFBU0EsSUFBSSxHQUFHLENBQXBCLEVBQXVCO0FBQ3JCLFVBQU0sSUFBSUMsS0FBSixDQUFVLG1EQUFWLENBQU47QUFDRDs7QUFFRCxPQUFLRCxJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLRSxJQUFMLEdBQVlMLFVBQVUsQ0FBQ00sS0FBWCxDQUFpQkgsSUFBSSxHQUFHQSxJQUF4QixDQUFaO0FBQ0EsT0FBS0ksV0FBTCxHQUFtQlAsVUFBVSxDQUFDTSxLQUFYLENBQWlCSCxJQUFJLEdBQUdBLElBQXhCLENBQW5CO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBRCxTQUFTLENBQUNNLFNBQVYsQ0FBb0JDLEdBQXBCLEdBQTBCLFVBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFvQkMsS0FBcEIsRUFBMkJDLFFBQTNCLEVBQXFDO0FBQzdELE1BQUlDLEtBQUssR0FBR0osR0FBRyxHQUFHLEtBQUtQLElBQVgsR0FBa0JRLEdBQTlCO0FBQ0EsT0FBS04sSUFBTCxDQUFVUyxLQUFWLElBQW1CRixLQUFuQjtBQUNBLE1BQUlDLFFBQUosRUFBYyxLQUFLTixXQUFMLENBQWlCTyxLQUFqQixJQUEwQixJQUExQjtBQUNmLENBSkQ7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FaLFNBQVMsQ0FBQ00sU0FBVixDQUFvQk8sR0FBcEIsR0FBMEIsVUFBVUwsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQzVDLFNBQU8sS0FBS04sSUFBTCxDQUFVSyxHQUFHLEdBQUcsS0FBS1AsSUFBWCxHQUFrQlEsR0FBNUIsQ0FBUDtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQVQsU0FBUyxDQUFDTSxTQUFWLENBQW9CUSxHQUFwQixHQUEwQixVQUFVTixHQUFWLEVBQWVDLEdBQWYsRUFBb0JDLEtBQXBCLEVBQTJCO0FBQ25ELE9BQUtQLElBQUwsQ0FBVUssR0FBRyxHQUFHLEtBQUtQLElBQVgsR0FBa0JRLEdBQTVCLEtBQW9DQyxLQUFwQztBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FWLFNBQVMsQ0FBQ00sU0FBVixDQUFvQlMsVUFBcEIsR0FBaUMsVUFBVVAsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ25ELFNBQU8sS0FBS0osV0FBTCxDQUFpQkcsR0FBRyxHQUFHLEtBQUtQLElBQVgsR0FBa0JRLEdBQW5DLENBQVA7QUFDRCxDQUZEOztBQUlBTyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQixTQUFqQiIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2JpdC1tYXRyaXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2J1ZmZlcicpXG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGhhbmRsZSBRUiBDb2RlIHN5bWJvbCBtb2R1bGVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgU3ltYm9sIHNpemVcbiAqL1xuZnVuY3Rpb24gQml0TWF0cml4IChzaXplKSB7XG4gIGlmICghc2l6ZSB8fCBzaXplIDwgMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQml0TWF0cml4IHNpemUgbXVzdCBiZSBkZWZpbmVkIGFuZCBncmVhdGVyIHRoYW4gMCcpXG4gIH1cblxuICB0aGlzLnNpemUgPSBzaXplXG4gIHRoaXMuZGF0YSA9IEJ1ZmZlclV0aWwuYWxsb2Moc2l6ZSAqIHNpemUpXG4gIHRoaXMucmVzZXJ2ZWRCaXQgPSBCdWZmZXJVdGlsLmFsbG9jKHNpemUgKiBzaXplKVxufVxuXG4vKipcbiAqIFNldCBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKiBJZiByZXNlcnZlZCBmbGFnIGlzIHNldCwgdGhpcyBiaXQgd2lsbCBiZSBpZ25vcmVkIGR1cmluZyBtYXNraW5nIHByb2Nlc3NcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzZXJ2ZWRcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlLCByZXNlcnZlZCkge1xuICB2YXIgaW5kZXggPSByb3cgKiB0aGlzLnNpemUgKyBjb2xcbiAgdGhpcy5kYXRhW2luZGV4XSA9IHZhbHVlXG4gIGlmIChyZXNlcnZlZCkgdGhpcy5yZXNlcnZlZEJpdFtpbmRleF0gPSB0cnVlXG59XG5cbi8qKlxuICogUmV0dXJucyBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICBjb2xcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gIHJldHVybiB0aGlzLmRhdGFbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG4vKipcbiAqIEFwcGxpZXMgeG9yIG9wZXJhdG9yIGF0IHNwZWNpZmllZCBsb2NhdGlvblxuICogKHVzZWQgZHVyaW5nIG1hc2tpbmcgcHJvY2VzcylcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlKSB7XG4gIHRoaXMuZGF0YVtyb3cgKiB0aGlzLnNpemUgKyBjb2xdIF49IHZhbHVlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYml0IGF0IHNwZWNpZmllZCBsb2NhdGlvbiBpcyByZXNlcnZlZFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICAgY29sXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLmlzUmVzZXJ2ZWQgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgcmV0dXJuIHRoaXMucmVzZXJ2ZWRCaXRbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdE1hdHJpeFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-matrix.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/byte-data.js":
/*!****************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/byte-data.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js\");\n\nvar Mode = __webpack_require__(/*! ./mode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\");\n\nfunction ByteData(data) {\n  this.mode = Mode.BYTE;\n  this.data = BufferUtil.from(data);\n}\n\nByteData.getBitsLength = function getBitsLength(length) {\n  return length * 8;\n};\n\nByteData.prototype.getLength = function getLength() {\n  return this.data.length;\n};\n\nByteData.prototype.getBitsLength = function getBitsLength() {\n  return ByteData.getBitsLength(this.data.length);\n};\n\nByteData.prototype.write = function (bitBuffer) {\n  for (var i = 0, l = this.data.length; i < l; i++) {\n    bitBuffer.put(this.data[i], 8);\n  }\n};\n\nmodule.exports = ByteData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9ieXRlLWRhdGEuanM/ZTU1MiJdLCJuYW1lcyI6WyJCdWZmZXJVdGlsIiwicmVxdWlyZSIsIk1vZGUiLCJCeXRlRGF0YSIsImRhdGEiLCJtb2RlIiwiQllURSIsImZyb20iLCJnZXRCaXRzTGVuZ3RoIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJpIiwibCIsInB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyx1SUFBRCxDQUF4Qjs7QUFDQSxJQUFJQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsZ0hBQUQsQ0FBbEI7O0FBRUEsU0FBU0UsUUFBVCxDQUFtQkMsSUFBbkIsRUFBeUI7QUFDdkIsT0FBS0MsSUFBTCxHQUFZSCxJQUFJLENBQUNJLElBQWpCO0FBQ0EsT0FBS0YsSUFBTCxHQUFZSixVQUFVLENBQUNPLElBQVgsQ0FBZ0JILElBQWhCLENBQVo7QUFDRDs7QUFFREQsUUFBUSxDQUFDSyxhQUFULEdBQXlCLFNBQVNBLGFBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDO0FBQ3ZELFNBQU9BLE1BQU0sR0FBRyxDQUFoQjtBQUNELENBRkQ7O0FBSUFOLFFBQVEsQ0FBQ08sU0FBVCxDQUFtQkMsU0FBbkIsR0FBK0IsU0FBU0EsU0FBVCxHQUFzQjtBQUNuRCxTQUFPLEtBQUtQLElBQUwsQ0FBVUssTUFBakI7QUFDRCxDQUZEOztBQUlBTixRQUFRLENBQUNPLFNBQVQsQ0FBbUJGLGFBQW5CLEdBQW1DLFNBQVNBLGFBQVQsR0FBMEI7QUFDM0QsU0FBT0wsUUFBUSxDQUFDSyxhQUFULENBQXVCLEtBQUtKLElBQUwsQ0FBVUssTUFBakMsQ0FBUDtBQUNELENBRkQ7O0FBSUFOLFFBQVEsQ0FBQ08sU0FBVCxDQUFtQkUsS0FBbkIsR0FBMkIsVUFBVUMsU0FBVixFQUFxQjtBQUM5QyxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBRyxLQUFLWCxJQUFMLENBQVVLLE1BQTlCLEVBQXNDSyxDQUFDLEdBQUdDLENBQTFDLEVBQTZDRCxDQUFDLEVBQTlDLEVBQWtEO0FBQ2hERCxhQUFTLENBQUNHLEdBQVYsQ0FBYyxLQUFLWixJQUFMLENBQVVVLENBQVYsQ0FBZCxFQUE0QixDQUE1QjtBQUNEO0FBQ0YsQ0FKRDs7QUFNQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCZixRQUFqQiIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2J5dGUtZGF0YS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcbnZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuZnVuY3Rpb24gQnl0ZURhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5CWVRFXG4gIHRoaXMuZGF0YSA9IEJ1ZmZlclV0aWwuZnJvbShkYXRhKVxufVxuXG5CeXRlRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiBsZW5ndGggKiA4XG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5CeXRlRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gQnl0ZURhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5CeXRlRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYml0QnVmZmVyKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5kYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGJpdEJ1ZmZlci5wdXQodGhpcy5kYXRhW2ldLCA4KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnl0ZURhdGFcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/byte-data.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-code.js":
/*!****************************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-code.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var ECLevel = __webpack_require__(/*! ./error-correction-level */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-level.js\");\n\nvar EC_BLOCKS_TABLE = [// L  M  Q  H\n1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81];\nvar EC_CODEWORDS_TABLE = [// L  M  Q  H\n7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430];\n/**\r\n * Returns the number of error correction block that the QR Code should contain\r\n * for the specified version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction blocks\r\n */\n\nexports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {\n  switch (errorCorrectionLevel) {\n    case ECLevel.L:\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];\n\n    case ECLevel.M:\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];\n\n    case ECLevel.Q:\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];\n\n    case ECLevel.H:\n      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];\n\n    default:\n      return undefined;\n  }\n};\n/**\r\n * Returns the number of error correction codewords to use for the specified\r\n * version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction codewords\r\n */\n\n\nexports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {\n  switch (errorCorrectionLevel) {\n    case ECLevel.L:\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];\n\n    case ECLevel.M:\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];\n\n    case ECLevel.Q:\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];\n\n    case ECLevel.H:\n      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];\n\n    default:\n      return undefined;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-code.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-level.js":
/*!*****************************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-level.js ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.L = {\n  bit: 1\n};\nexports.M = {\n  bit: 0\n};\nexports.Q = {\n  bit: 3\n};\nexports.H = {\n  bit: 2\n};\n\nfunction fromString(string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string');\n  }\n\n  var lcStr = string.toLowerCase();\n\n  switch (lcStr) {\n    case 'l':\n    case 'low':\n      return exports.L;\n\n    case 'm':\n    case 'medium':\n      return exports.M;\n\n    case 'q':\n    case 'quartile':\n      return exports.Q;\n\n    case 'h':\n    case 'high':\n      return exports.H;\n\n    default:\n      throw new Error('Unknown EC Level: ' + string);\n  }\n}\n\nexports.isValid = function isValid(level) {\n  return level && typeof level.bit !== 'undefined' && level.bit >= 0 && level.bit < 4;\n};\n\nexports.from = function from(value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value;\n  }\n\n  try {\n    return fromString(value);\n  } catch (e) {\n    return defaultValue;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9lcnJvci1jb3JyZWN0aW9uLWxldmVsLmpzP2ViNjUiXSwibmFtZXMiOlsiZXhwb3J0cyIsIkwiLCJiaXQiLCJNIiwiUSIsIkgiLCJmcm9tU3RyaW5nIiwic3RyaW5nIiwiRXJyb3IiLCJsY1N0ciIsInRvTG93ZXJDYXNlIiwiaXNWYWxpZCIsImxldmVsIiwiZnJvbSIsInZhbHVlIiwiZGVmYXVsdFZhbHVlIiwiZSJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU8sQ0FBQ0MsQ0FBUixHQUFZO0FBQUVDLEtBQUcsRUFBRTtBQUFQLENBQVo7QUFDQUYsT0FBTyxDQUFDRyxDQUFSLEdBQVk7QUFBRUQsS0FBRyxFQUFFO0FBQVAsQ0FBWjtBQUNBRixPQUFPLENBQUNJLENBQVIsR0FBWTtBQUFFRixLQUFHLEVBQUU7QUFBUCxDQUFaO0FBQ0FGLE9BQU8sQ0FBQ0ssQ0FBUixHQUFZO0FBQUVILEtBQUcsRUFBRTtBQUFQLENBQVo7O0FBRUEsU0FBU0ksVUFBVCxDQUFxQkMsTUFBckIsRUFBNkI7QUFDM0IsTUFBSSxPQUFPQSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLFVBQU0sSUFBSUMsS0FBSixDQUFVLHVCQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJQyxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0csV0FBUCxFQUFaOztBQUVBLFVBQVFELEtBQVI7QUFDRSxTQUFLLEdBQUw7QUFDQSxTQUFLLEtBQUw7QUFDRSxhQUFPVCxPQUFPLENBQUNDLENBQWY7O0FBRUYsU0FBSyxHQUFMO0FBQ0EsU0FBSyxRQUFMO0FBQ0UsYUFBT0QsT0FBTyxDQUFDRyxDQUFmOztBQUVGLFNBQUssR0FBTDtBQUNBLFNBQUssVUFBTDtBQUNFLGFBQU9ILE9BQU8sQ0FBQ0ksQ0FBZjs7QUFFRixTQUFLLEdBQUw7QUFDQSxTQUFLLE1BQUw7QUFDRSxhQUFPSixPQUFPLENBQUNLLENBQWY7O0FBRUY7QUFDRSxZQUFNLElBQUlHLEtBQUosQ0FBVSx1QkFBdUJELE1BQWpDLENBQU47QUFsQko7QUFvQkQ7O0FBRURQLE9BQU8sQ0FBQ1csT0FBUixHQUFrQixTQUFTQSxPQUFULENBQWtCQyxLQUFsQixFQUF5QjtBQUN6QyxTQUFPQSxLQUFLLElBQUksT0FBT0EsS0FBSyxDQUFDVixHQUFiLEtBQXFCLFdBQTlCLElBQ0xVLEtBQUssQ0FBQ1YsR0FBTixJQUFhLENBRFIsSUFDYVUsS0FBSyxDQUFDVixHQUFOLEdBQVksQ0FEaEM7QUFFRCxDQUhEOztBQUtBRixPQUFPLENBQUNhLElBQVIsR0FBZSxTQUFTQSxJQUFULENBQWVDLEtBQWYsRUFBc0JDLFlBQXRCLEVBQW9DO0FBQ2pELE1BQUlmLE9BQU8sQ0FBQ1csT0FBUixDQUFnQkcsS0FBaEIsQ0FBSixFQUE0QjtBQUMxQixXQUFPQSxLQUFQO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGLFdBQU9SLFVBQVUsQ0FBQ1EsS0FBRCxDQUFqQjtBQUNELEdBRkQsQ0FFRSxPQUFPRSxDQUFQLEVBQVU7QUFDVixXQUFPRCxZQUFQO0FBQ0Q7QUFDRixDQVZEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZXJyb3ItY29ycmVjdGlvbi1sZXZlbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuTCA9IHsgYml0OiAxIH1cbmV4cG9ydHMuTSA9IHsgYml0OiAwIH1cbmV4cG9ydHMuUSA9IHsgYml0OiAzIH1cbmV4cG9ydHMuSCA9IHsgYml0OiAyIH1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUGFyYW0gaXMgbm90IGEgc3RyaW5nJylcbiAgfVxuXG4gIHZhciBsY1N0ciA9IHN0cmluZy50b0xvd2VyQ2FzZSgpXG5cbiAgc3dpdGNoIChsY1N0cikge1xuICAgIGNhc2UgJ2wnOlxuICAgIGNhc2UgJ2xvdyc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5MXG5cbiAgICBjYXNlICdtJzpcbiAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuTVxuXG4gICAgY2FzZSAncSc6XG4gICAgY2FzZSAncXVhcnRpbGUnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUVxuXG4gICAgY2FzZSAnaCc6XG4gICAgY2FzZSAnaGlnaCc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5IXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIEVDIExldmVsOiAnICsgc3RyaW5nKVxuICB9XG59XG5cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKGxldmVsKSB7XG4gIHJldHVybiBsZXZlbCAmJiB0eXBlb2YgbGV2ZWwuYml0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIGxldmVsLmJpdCA+PSAwICYmIGxldmVsLmJpdCA8IDRcbn1cblxuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoZXhwb3J0cy5pc1ZhbGlkKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-level.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/finder-pattern.js":
/*!*********************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/finder-pattern.js ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var getSymbolSize = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\").getSymbolSize;\n\nvar FINDER_PATTERN_SIZE = 7;\n/**\n * Returns an array containing the positions of each finder pattern.\n * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */\n\nexports.getPositions = function getPositions(version) {\n  var size = getSymbolSize(version);\n  return [// top-left\n  [0, 0], // top-right\n  [size - FINDER_PATTERN_SIZE, 0], // bottom-left\n  [0, size - FINDER_PATTERN_SIZE]];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9maW5kZXItcGF0dGVybi5qcz9lZTQ0Il0sIm5hbWVzIjpbImdldFN5bWJvbFNpemUiLCJyZXF1aXJlIiwiRklOREVSX1BBVFRFUk5fU0laRSIsImV4cG9ydHMiLCJnZXRQb3NpdGlvbnMiLCJ2ZXJzaW9uIiwic2l6ZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLGtIQUFELENBQVAsQ0FBbUJELGFBQXZDOztBQUNBLElBQUlFLG1CQUFtQixHQUFHLENBQTFCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FDLE9BQU8sQ0FBQ0MsWUFBUixHQUF1QixTQUFTQSxZQUFULENBQXVCQyxPQUF2QixFQUFnQztBQUNyRCxNQUFJQyxJQUFJLEdBQUdOLGFBQWEsQ0FBQ0ssT0FBRCxDQUF4QjtBQUVBLFNBQU8sQ0FDTDtBQUNBLEdBQUMsQ0FBRCxFQUFJLENBQUosQ0FGSyxFQUdMO0FBQ0EsR0FBQ0MsSUFBSSxHQUFHSixtQkFBUixFQUE2QixDQUE3QixDQUpLLEVBS0w7QUFDQSxHQUFDLENBQUQsRUFBSUksSUFBSSxHQUFHSixtQkFBWCxDQU5LLENBQVA7QUFRRCxDQVhEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZmluZGVyLXBhdHRlcm4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0U3ltYm9sU2l6ZSA9IHJlcXVpcmUoJy4vdXRpbHMnKS5nZXRTeW1ib2xTaXplXG52YXIgRklOREVSX1BBVFRFUk5fU0laRSA9IDdcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc2l0aW9ucyBvZiBlYWNoIGZpbmRlciBwYXR0ZXJuLlxuICogRWFjaCBhcnJheSdzIGVsZW1lbnQgcmVwcmVzZW50IHRoZSB0b3AtbGVmdCBwb2ludCBvZiB0aGUgcGF0dGVybiBhcyAoeCwgeSkgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2YgY29vcmRpbmF0ZXNcbiAqL1xuZXhwb3J0cy5nZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiBnZXRQb3NpdGlvbnMgKHZlcnNpb24pIHtcbiAgdmFyIHNpemUgPSBnZXRTeW1ib2xTaXplKHZlcnNpb24pXG5cbiAgcmV0dXJuIFtcbiAgICAvLyB0b3AtbGVmdFxuICAgIFswLCAwXSxcbiAgICAvLyB0b3AtcmlnaHRcbiAgICBbc2l6ZSAtIEZJTkRFUl9QQVRURVJOX1NJWkUsIDBdLFxuICAgIC8vIGJvdHRvbS1sZWZ0XG4gICAgWzAsIHNpemUgLSBGSU5ERVJfUEFUVEVSTl9TSVpFXVxuICBdXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/finder-pattern.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/format-info.js":
/*!******************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/format-info.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Utils = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\");\n\nvar G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\nvar G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\nvar G15_BCH = Utils.getBCHDigit(G15);\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */\n\nexports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {\n  var data = errorCorrectionLevel.bit << 3 | mask;\n  var d = data << 10;\n\n  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {\n    d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;\n  } // xor final data with mask pattern in order to ensure that\n  // no combination of Error Correction Level and data mask pattern\n  // will result in an all-zero data string\n\n\n  return (data << 10 | d) ^ G15_MASK;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9mb3JtYXQtaW5mby5qcz85MWM1Il0sIm5hbWVzIjpbIlV0aWxzIiwicmVxdWlyZSIsIkcxNSIsIkcxNV9NQVNLIiwiRzE1X0JDSCIsImdldEJDSERpZ2l0IiwiZXhwb3J0cyIsImdldEVuY29kZWRCaXRzIiwiZXJyb3JDb3JyZWN0aW9uTGV2ZWwiLCJtYXNrIiwiZGF0YSIsImJpdCIsImQiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxrSEFBRCxDQUFuQjs7QUFFQSxJQUFJQyxHQUFHLEdBQUksS0FBSyxFQUFOLEdBQWEsS0FBSyxDQUFsQixHQUF3QixLQUFLLENBQTdCLEdBQW1DLEtBQUssQ0FBeEMsR0FBOEMsS0FBSyxDQUFuRCxHQUF5RCxLQUFLLENBQTlELEdBQW9FLEtBQUssQ0FBbkY7QUFDQSxJQUFJQyxRQUFRLEdBQUksS0FBSyxFQUFOLEdBQWEsS0FBSyxFQUFsQixHQUF5QixLQUFLLEVBQTlCLEdBQXFDLEtBQUssQ0FBMUMsR0FBZ0QsS0FBSyxDQUFwRTtBQUNBLElBQUlDLE9BQU8sR0FBR0osS0FBSyxDQUFDSyxXQUFOLENBQWtCSCxHQUFsQixDQUFkO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0FJLE9BQU8sQ0FBQ0MsY0FBUixHQUF5QixTQUFTQSxjQUFULENBQXlCQyxvQkFBekIsRUFBK0NDLElBQS9DLEVBQXFEO0FBQzVFLE1BQUlDLElBQUksR0FBS0Ysb0JBQW9CLENBQUNHLEdBQXJCLElBQTRCLENBQTdCLEdBQWtDRixJQUE5QztBQUNBLE1BQUlHLENBQUMsR0FBR0YsSUFBSSxJQUFJLEVBQWhCOztBQUVBLFNBQU9WLEtBQUssQ0FBQ0ssV0FBTixDQUFrQk8sQ0FBbEIsSUFBdUJSLE9BQXZCLElBQWtDLENBQXpDLEVBQTRDO0FBQzFDUSxLQUFDLElBQUtWLEdBQUcsSUFBS0YsS0FBSyxDQUFDSyxXQUFOLENBQWtCTyxDQUFsQixJQUF1QlIsT0FBckM7QUFDRCxHQU4yRSxDQVE1RTtBQUNBO0FBQ0E7OztBQUNBLFNBQU8sQ0FBRU0sSUFBSSxJQUFJLEVBQVQsR0FBZUUsQ0FBaEIsSUFBcUJULFFBQTVCO0FBQ0QsQ0FaRCIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Zvcm1hdC1pbmZvLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbnZhciBHMTUgPSAoMSA8PCAxMCkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgNCkgfCAoMSA8PCAyKSB8ICgxIDw8IDEpIHwgKDEgPDwgMClcbnZhciBHMTVfTUFTSyA9ICgxIDw8IDE0KSB8ICgxIDw8IDEyKSB8ICgxIDw8IDEwKSB8ICgxIDw8IDQpIHwgKDEgPDwgMSlcbnZhciBHMTVfQkNIID0gVXRpbHMuZ2V0QkNIRGlnaXQoRzE1KVxuXG4vKipcbiAqIFJldHVybnMgZm9ybWF0IGluZm9ybWF0aW9uIHdpdGggcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogVGhlIGZvcm1hdCBpbmZvcm1hdGlvbiBpcyBhIDE1LWJpdCBzZXF1ZW5jZSBjb250YWluaW5nIDUgZGF0YSBiaXRzLFxuICogd2l0aCAxMCBlcnJvciBjb3JyZWN0aW9uIGJpdHMgY2FsY3VsYXRlZCB1c2luZyB0aGUgKDE1LCA1KSBCQ0ggY29kZS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge051bWJlcn0gbWFzayAgICAgICAgICAgICAgICAgTWFzayBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIEVuY29kZWQgZm9ybWF0IGluZm9ybWF0aW9uIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRFbmNvZGVkQml0cyA9IGZ1bmN0aW9uIGdldEVuY29kZWRCaXRzIChlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFzaykge1xuICB2YXIgZGF0YSA9ICgoZXJyb3JDb3JyZWN0aW9uTGV2ZWwuYml0IDw8IDMpIHwgbWFzaylcbiAgdmFyIGQgPSBkYXRhIDw8IDEwXG5cbiAgd2hpbGUgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE1X0JDSCA+PSAwKSB7XG4gICAgZCBePSAoRzE1IDw8IChVdGlscy5nZXRCQ0hEaWdpdChkKSAtIEcxNV9CQ0gpKVxuICB9XG5cbiAgLy8geG9yIGZpbmFsIGRhdGEgd2l0aCBtYXNrIHBhdHRlcm4gaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXRcbiAgLy8gbm8gY29tYmluYXRpb24gb2YgRXJyb3IgQ29ycmVjdGlvbiBMZXZlbCBhbmQgZGF0YSBtYXNrIHBhdHRlcm5cbiAgLy8gd2lsbCByZXN1bHQgaW4gYW4gYWxsLXplcm8gZGF0YSBzdHJpbmdcbiAgcmV0dXJuICgoZGF0YSA8PCAxMCkgfCBkKSBeIEcxNV9NQVNLXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/format-info.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/galois-field.js":
/*!*******************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/galois-field.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js\");\n\nvar EXP_TABLE = BufferUtil.alloc(512);\nvar LOG_TABLE = BufferUtil.alloc(256)\n/**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */\n;\n\n(function initTables() {\n  var x = 1;\n\n  for (var i = 0; i < 255; i++) {\n    EXP_TABLE[i] = x;\n    LOG_TABLE[x] = i;\n    x <<= 1; // multiply by 2\n    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n    // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n\n    if (x & 0x100) {\n      // similar to x >= 256, but a lot faster (because 0x100 == 256)\n      x ^= 0x11D;\n    }\n  } // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n  // stay inside the bounds (because we will mainly use this table for the multiplication of\n  // two GF numbers, no more).\n  // @see {@link mul}\n\n\n  for (i = 255; i < 512; i++) {\n    EXP_TABLE[i] = EXP_TABLE[i - 255];\n  }\n})();\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\n\n\nexports.log = function log(n) {\n  if (n < 1) throw new Error('log(' + n + ')');\n  return LOG_TABLE[n];\n};\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */\n\n\nexports.exp = function exp(n) {\n  return EXP_TABLE[n];\n};\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */\n\n\nexports.mul = function mul(x, y) {\n  if (x === 0 || y === 0) return 0; // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n  // @see {@link initTables}\n\n  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9nYWxvaXMtZmllbGQuanM/OTQ1NyJdLCJuYW1lcyI6WyJCdWZmZXJVdGlsIiwicmVxdWlyZSIsIkVYUF9UQUJMRSIsImFsbG9jIiwiTE9HX1RBQkxFIiwiaW5pdFRhYmxlcyIsIngiLCJpIiwiZXhwb3J0cyIsImxvZyIsIm4iLCJFcnJvciIsImV4cCIsIm11bCIsInkiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFVBQVUsR0FBR0MsbUJBQU8sQ0FBQyx1SUFBRCxDQUF4Qjs7QUFFQSxJQUFJQyxTQUFTLEdBQUdGLFVBQVUsQ0FBQ0csS0FBWCxDQUFpQixHQUFqQixDQUFoQjtBQUNBLElBQUlDLFNBQVMsR0FBR0osVUFBVSxDQUFDRyxLQUFYLENBQWlCLEdBQWpCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTs7QUFTRSxVQUFTRSxVQUFULEdBQXVCO0FBQ3ZCLE1BQUlDLENBQUMsR0FBRyxDQUFSOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxHQUFwQixFQUF5QkEsQ0FBQyxFQUExQixFQUE4QjtBQUM1QkwsYUFBUyxDQUFDSyxDQUFELENBQVQsR0FBZUQsQ0FBZjtBQUNBRixhQUFTLENBQUNFLENBQUQsQ0FBVCxHQUFlQyxDQUFmO0FBRUFELEtBQUMsS0FBSyxDQUFOLENBSjRCLENBSXBCO0FBRVI7QUFDQTs7QUFDQSxRQUFJQSxDQUFDLEdBQUcsS0FBUixFQUFlO0FBQUU7QUFDZkEsT0FBQyxJQUFJLEtBQUw7QUFDRDtBQUNGLEdBYnNCLENBZXZCO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxPQUFLQyxDQUFDLEdBQUcsR0FBVCxFQUFjQSxDQUFDLEdBQUcsR0FBbEIsRUFBdUJBLENBQUMsRUFBeEIsRUFBNEI7QUFDMUJMLGFBQVMsQ0FBQ0ssQ0FBRCxDQUFULEdBQWVMLFNBQVMsQ0FBQ0ssQ0FBQyxHQUFHLEdBQUwsQ0FBeEI7QUFDRDtBQUNGLENBdEJDLEdBQUQ7QUF3QkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUMsT0FBTyxDQUFDQyxHQUFSLEdBQWMsU0FBU0EsR0FBVCxDQUFjQyxDQUFkLEVBQWlCO0FBQzdCLE1BQUlBLENBQUMsR0FBRyxDQUFSLEVBQVcsTUFBTSxJQUFJQyxLQUFKLENBQVUsU0FBU0QsQ0FBVCxHQUFhLEdBQXZCLENBQU47QUFDWCxTQUFPTixTQUFTLENBQUNNLENBQUQsQ0FBaEI7QUFDRCxDQUhEO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUYsT0FBTyxDQUFDSSxHQUFSLEdBQWMsU0FBU0EsR0FBVCxDQUFjRixDQUFkLEVBQWlCO0FBQzdCLFNBQU9SLFNBQVMsQ0FBQ1EsQ0FBRCxDQUFoQjtBQUNELENBRkQ7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FGLE9BQU8sQ0FBQ0ssR0FBUixHQUFjLFNBQVNBLEdBQVQsQ0FBY1AsQ0FBZCxFQUFpQlEsQ0FBakIsRUFBb0I7QUFDaEMsTUFBSVIsQ0FBQyxLQUFLLENBQU4sSUFBV1EsQ0FBQyxLQUFLLENBQXJCLEVBQXdCLE9BQU8sQ0FBUCxDQURRLENBR2hDO0FBQ0E7O0FBQ0EsU0FBT1osU0FBUyxDQUFDRSxTQUFTLENBQUNFLENBQUQsQ0FBVCxHQUFlRixTQUFTLENBQUNVLENBQUQsQ0FBekIsQ0FBaEI7QUFDRCxDQU5EIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZ2Fsb2lzLWZpZWxkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEJ1ZmZlclV0aWwgPSByZXF1aXJlKCcuLi91dGlscy9idWZmZXInKVxuXG52YXIgRVhQX1RBQkxFID0gQnVmZmVyVXRpbC5hbGxvYyg1MTIpXG52YXIgTE9HX1RBQkxFID0gQnVmZmVyVXRpbC5hbGxvYygyNTYpXG4vKipcbiAqIFByZWNvbXB1dGUgdGhlIGxvZyBhbmQgYW50aS1sb2cgdGFibGVzIGZvciBmYXN0ZXIgY29tcHV0YXRpb24gbGF0ZXJcbiAqXG4gKiBGb3IgZWFjaCBwb3NzaWJsZSB2YWx1ZSBpbiB0aGUgZ2Fsb2lzIGZpZWxkIDJeOCwgd2Ugd2lsbCBwcmUtY29tcHV0ZVxuICogdGhlIGxvZ2FyaXRobSBhbmQgYW50aS1sb2dhcml0aG0gKGV4cG9uZW50aWFsKSBvZiB0aGlzIHZhbHVlXG4gKlxuICogcmVmIHtAbGluayBodHRwczovL2VuLndpa2l2ZXJzaXR5Lm9yZy93aWtpL1JlZWQlRTIlODAlOTNTb2xvbW9uX2NvZGVzX2Zvcl9jb2RlcnMjSW50cm9kdWN0aW9uX3RvX21hdGhlbWF0aWNhbF9maWVsZHN9XG4gKi9cbjsoZnVuY3Rpb24gaW5pdFRhYmxlcyAoKSB7XG4gIHZhciB4ID0gMVxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XG4gICAgRVhQX1RBQkxFW2ldID0geFxuICAgIExPR19UQUJMRVt4XSA9IGlcblxuICAgIHggPDw9IDEgLy8gbXVsdGlwbHkgYnkgMlxuXG4gICAgLy8gVGhlIFFSIGNvZGUgc3BlY2lmaWNhdGlvbiBzYXlzIHRvIHVzZSBieXRlLXdpc2UgbW9kdWxvIDEwMDAxMTEwMSBhcml0aG1ldGljLlxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB3aGVuIGEgbnVtYmVyIGlzIDI1NiBvciBsYXJnZXIsIGl0IHNob3VsZCBiZSBYT1JlZCB3aXRoIDB4MTFELlxuICAgIGlmICh4ICYgMHgxMDApIHsgLy8gc2ltaWxhciB0byB4ID49IDI1NiwgYnV0IGEgbG90IGZhc3RlciAoYmVjYXVzZSAweDEwMCA9PSAyNTYpXG4gICAgICB4IF49IDB4MTFEXG4gICAgfVxuICB9XG5cbiAgLy8gT3B0aW1pemF0aW9uOiBkb3VibGUgdGhlIHNpemUgb2YgdGhlIGFudGktbG9nIHRhYmxlIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBtb2QgMjU1IHRvXG4gIC8vIHN0YXkgaW5zaWRlIHRoZSBib3VuZHMgKGJlY2F1c2Ugd2Ugd2lsbCBtYWlubHkgdXNlIHRoaXMgdGFibGUgZm9yIHRoZSBtdWx0aXBsaWNhdGlvbiBvZlxuICAvLyB0d28gR0YgbnVtYmVycywgbm8gbW9yZSkuXG4gIC8vIEBzZWUge0BsaW5rIG11bH1cbiAgZm9yIChpID0gMjU1OyBpIDwgNTEyOyBpKyspIHtcbiAgICBFWFBfVEFCTEVbaV0gPSBFWFBfVEFCTEVbaSAtIDI1NV1cbiAgfVxufSgpKVxuXG4vKipcbiAqIFJldHVybnMgbG9nIHZhbHVlIG9mIG4gaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gblxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uIGxvZyAobikge1xuICBpZiAobiA8IDEpIHRocm93IG5ldyBFcnJvcignbG9nKCcgKyBuICsgJyknKVxuICByZXR1cm4gTE9HX1RBQkxFW25dXG59XG5cbi8qKlxuICogUmV0dXJucyBhbnRpLWxvZyB2YWx1ZSBvZiBuIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG5cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5leHAgPSBmdW5jdGlvbiBleHAgKG4pIHtcbiAgcmV0dXJuIEVYUF9UQUJMRVtuXVxufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG51bWJlciBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5tdWwgPSBmdW5jdGlvbiBtdWwgKHgsIHkpIHtcbiAgaWYgKHggPT09IDAgfHwgeSA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBzaG91bGQgYmUgRVhQX1RBQkxFWyhMT0dfVEFCTEVbeF0gKyBMT0dfVEFCTEVbeV0pICUgMjU1XSBpZiBFWFBfVEFCTEUgd2Fzbid0IG92ZXJzaXplZFxuICAvLyBAc2VlIHtAbGluayBpbml0VGFibGVzfVxuICByZXR1cm4gRVhQX1RBQkxFW0xPR19UQUJMRVt4XSArIExPR19UQUJMRVt5XV1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/galois-field.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/kanji-data.js":
/*!*****************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/kanji-data.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Mode = __webpack_require__(/*! ./mode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\");\n\nvar Utils = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\");\n\nfunction KanjiData(data) {\n  this.mode = Mode.KANJI;\n  this.data = data;\n}\n\nKanjiData.getBitsLength = function getBitsLength(length) {\n  return length * 13;\n};\n\nKanjiData.prototype.getLength = function getLength() {\n  return this.data.length;\n};\n\nKanjiData.prototype.getBitsLength = function getBitsLength() {\n  return KanjiData.getBitsLength(this.data.length);\n};\n\nKanjiData.prototype.write = function (bitBuffer) {\n  var i; // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n  // These byte values are shifted from the JIS X 0208 values.\n  // JIS X 0208 gives details of the shift coded representation.\n\n  for (i = 0; i < this.data.length; i++) {\n    var value = Utils.toSJIS(this.data[i]); // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n\n    if (value >= 0x8140 && value <= 0x9FFC) {\n      // Subtract 0x8140 from Shift JIS value\n      value -= 0x8140; // For characters with Shift JIS values from 0xE040 to 0xEBBF\n    } else if (value >= 0xE040 && value <= 0xEBBF) {\n      // Subtract 0xC140 from Shift JIS value\n      value -= 0xC140;\n    } else {\n      throw new Error('Invalid SJIS character: ' + this.data[i] + '\\n' + 'Make sure your charset is UTF-8');\n    } // Multiply most significant byte of result by 0xC0\n    // and add least significant byte to product\n\n\n    value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff); // Convert result to a 13-bit binary string\n\n    bitBuffer.put(value, 13);\n  }\n};\n\nmodule.exports = KanjiData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9rYW5qaS1kYXRhLmpzPzA2OGYiXSwibmFtZXMiOlsiTW9kZSIsInJlcXVpcmUiLCJVdGlscyIsIkthbmppRGF0YSIsImRhdGEiLCJtb2RlIiwiS0FOSkkiLCJnZXRCaXRzTGVuZ3RoIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJpIiwidmFsdWUiLCJ0b1NKSVMiLCJFcnJvciIsInB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxnSEFBRCxDQUFsQjs7QUFDQSxJQUFJQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsa0hBQUQsQ0FBbkI7O0FBRUEsU0FBU0UsU0FBVCxDQUFvQkMsSUFBcEIsRUFBMEI7QUFDeEIsT0FBS0MsSUFBTCxHQUFZTCxJQUFJLENBQUNNLEtBQWpCO0FBQ0EsT0FBS0YsSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7O0FBRURELFNBQVMsQ0FBQ0ksYUFBVixHQUEwQixTQUFTQSxhQUFULENBQXdCQyxNQUF4QixFQUFnQztBQUN4RCxTQUFPQSxNQUFNLEdBQUcsRUFBaEI7QUFDRCxDQUZEOztBQUlBTCxTQUFTLENBQUNNLFNBQVYsQ0FBb0JDLFNBQXBCLEdBQWdDLFNBQVNBLFNBQVQsR0FBc0I7QUFDcEQsU0FBTyxLQUFLTixJQUFMLENBQVVJLE1BQWpCO0FBQ0QsQ0FGRDs7QUFJQUwsU0FBUyxDQUFDTSxTQUFWLENBQW9CRixhQUFwQixHQUFvQyxTQUFTQSxhQUFULEdBQTBCO0FBQzVELFNBQU9KLFNBQVMsQ0FBQ0ksYUFBVixDQUF3QixLQUFLSCxJQUFMLENBQVVJLE1BQWxDLENBQVA7QUFDRCxDQUZEOztBQUlBTCxTQUFTLENBQUNNLFNBQVYsQ0FBb0JFLEtBQXBCLEdBQTRCLFVBQVVDLFNBQVYsRUFBcUI7QUFDL0MsTUFBSUMsQ0FBSixDQUQrQyxDQUcvQztBQUNBO0FBQ0E7O0FBQ0EsT0FBS0EsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHLEtBQUtULElBQUwsQ0FBVUksTUFBMUIsRUFBa0NLLENBQUMsRUFBbkMsRUFBdUM7QUFDckMsUUFBSUMsS0FBSyxHQUFHWixLQUFLLENBQUNhLE1BQU4sQ0FBYSxLQUFLWCxJQUFMLENBQVVTLENBQVYsQ0FBYixDQUFaLENBRHFDLENBR3JDOztBQUNBLFFBQUlDLEtBQUssSUFBSSxNQUFULElBQW1CQSxLQUFLLElBQUksTUFBaEMsRUFBd0M7QUFDdEM7QUFDQUEsV0FBSyxJQUFJLE1BQVQsQ0FGc0MsQ0FJeEM7QUFDQyxLQUxELE1BS08sSUFBSUEsS0FBSyxJQUFJLE1BQVQsSUFBbUJBLEtBQUssSUFBSSxNQUFoQyxFQUF3QztBQUM3QztBQUNBQSxXQUFLLElBQUksTUFBVDtBQUNELEtBSE0sTUFHQTtBQUNMLFlBQU0sSUFBSUUsS0FBSixDQUNKLDZCQUE2QixLQUFLWixJQUFMLENBQVVTLENBQVYsQ0FBN0IsR0FBNEMsSUFBNUMsR0FDQSxpQ0FGSSxDQUFOO0FBR0QsS0FoQm9DLENBa0JyQztBQUNBOzs7QUFDQUMsU0FBSyxHQUFJLENBQUVBLEtBQUssS0FBSyxDQUFYLEdBQWdCLElBQWpCLElBQXlCLElBQTFCLElBQW1DQSxLQUFLLEdBQUcsSUFBM0MsQ0FBUixDQXBCcUMsQ0FzQnJDOztBQUNBRixhQUFTLENBQUNLLEdBQVYsQ0FBY0gsS0FBZCxFQUFxQixFQUFyQjtBQUNEO0FBQ0YsQ0EvQkQ7O0FBaUNBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQixTQUFqQiIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2thbmppLWRhdGEuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG52YXIgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gS2FuamlEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuS0FOSklcbiAgdGhpcy5kYXRhID0gZGF0YVxufVxuXG5LYW5qaURhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gbGVuZ3RoICogMTNcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIEthbmppRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYml0QnVmZmVyKSB7XG4gIHZhciBpXG5cbiAgLy8gSW4gdGhlIFNoaWZ0IEpJUyBzeXN0ZW0sIEthbmppIGNoYXJhY3RlcnMgYXJlIHJlcHJlc2VudGVkIGJ5IGEgdHdvIGJ5dGUgY29tYmluYXRpb24uXG4gIC8vIFRoZXNlIGJ5dGUgdmFsdWVzIGFyZSBzaGlmdGVkIGZyb20gdGhlIEpJUyBYIDAyMDggdmFsdWVzLlxuICAvLyBKSVMgWCAwMjA4IGdpdmVzIGRldGFpbHMgb2YgdGhlIHNoaWZ0IGNvZGVkIHJlcHJlc2VudGF0aW9uLlxuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbHVlID0gVXRpbHMudG9TSklTKHRoaXMuZGF0YVtpXSlcblxuICAgIC8vIEZvciBjaGFyYWN0ZXJzIHdpdGggU2hpZnQgSklTIHZhbHVlcyBmcm9tIDB4ODE0MCB0byAweDlGRkM6XG4gICAgaWYgKHZhbHVlID49IDB4ODE0MCAmJiB2YWx1ZSA8PSAweDlGRkMpIHtcbiAgICAgIC8vIFN1YnRyYWN0IDB4ODE0MCBmcm9tIFNoaWZ0IEpJUyB2YWx1ZVxuICAgICAgdmFsdWUgLT0gMHg4MTQwXG5cbiAgICAvLyBGb3IgY2hhcmFjdGVycyB3aXRoIFNoaWZ0IEpJUyB2YWx1ZXMgZnJvbSAweEUwNDAgdG8gMHhFQkJGXG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAweEUwNDAgJiYgdmFsdWUgPD0gMHhFQkJGKSB7XG4gICAgICAvLyBTdWJ0cmFjdCAweEMxNDAgZnJvbSBTaGlmdCBKSVMgdmFsdWVcbiAgICAgIHZhbHVlIC09IDB4QzE0MFxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJbnZhbGlkIFNKSVMgY2hhcmFjdGVyOiAnICsgdGhpcy5kYXRhW2ldICsgJ1xcbicgK1xuICAgICAgICAnTWFrZSBzdXJlIHlvdXIgY2hhcnNldCBpcyBVVEYtOCcpXG4gICAgfVxuXG4gICAgLy8gTXVsdGlwbHkgbW9zdCBzaWduaWZpY2FudCBieXRlIG9mIHJlc3VsdCBieSAweEMwXG4gICAgLy8gYW5kIGFkZCBsZWFzdCBzaWduaWZpY2FudCBieXRlIHRvIHByb2R1Y3RcbiAgICB2YWx1ZSA9ICgoKHZhbHVlID4+PiA4KSAmIDB4ZmYpICogMHhDMCkgKyAodmFsdWUgJiAweGZmKVxuXG4gICAgLy8gQ29udmVydCByZXN1bHQgdG8gYSAxMy1iaXQgYmluYXJ5IHN0cmluZ1xuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDEzKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gS2FuamlEYXRhXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/kanji-data.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mask-pattern.js":
/*!*******************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mask-pattern.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Data mask pattern reference\n * @type {Object}\n */\nexports.Patterns = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */\n\nvar PenaltyScores = {\n  N1: 3,\n  N2: 3,\n  N3: 40,\n  N4: 10\n};\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */\n\nexports.isValid = function isValid(mask) {\n  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;\n};\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */\n\n\nexports.from = function from(value) {\n  return exports.isValid(value) ? parseInt(value, 10) : undefined;\n};\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/\n\n\nexports.getPenaltyN1 = function getPenaltyN1(data) {\n  var size = data.size;\n  var points = 0;\n  var sameCountCol = 0;\n  var sameCountRow = 0;\n  var lastCol = null;\n  var lastRow = null;\n\n  for (var row = 0; row < size; row++) {\n    sameCountCol = sameCountRow = 0;\n    lastCol = lastRow = null;\n\n    for (var col = 0; col < size; col++) {\n      var module = data.get(row, col);\n\n      if (module === lastCol) {\n        sameCountCol++;\n      } else {\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n        lastCol = module;\n        sameCountCol = 1;\n      }\n\n      module = data.get(col, row);\n\n      if (module === lastRow) {\n        sameCountRow++;\n      } else {\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n        lastRow = module;\n        sameCountRow = 1;\n      }\n    }\n\n    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n  }\n\n  return points;\n};\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */\n\n\nexports.getPenaltyN2 = function getPenaltyN2(data) {\n  var size = data.size;\n  var points = 0;\n\n  for (var row = 0; row < size - 1; row++) {\n    for (var col = 0; col < size - 1; col++) {\n      var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);\n      if (last === 4 || last === 0) points++;\n    }\n  }\n\n  return points * PenaltyScores.N2;\n};\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */\n\n\nexports.getPenaltyN3 = function getPenaltyN3(data) {\n  var size = data.size;\n  var points = 0;\n  var bitsCol = 0;\n  var bitsRow = 0;\n\n  for (var row = 0; row < size; row++) {\n    bitsCol = bitsRow = 0;\n\n    for (var col = 0; col < size; col++) {\n      bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);\n      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;\n      bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);\n      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;\n    }\n  }\n\n  return points * PenaltyScores.N3;\n};\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */\n\n\nexports.getPenaltyN4 = function getPenaltyN4(data) {\n  var darkCount = 0;\n  var modulesCount = data.data.length;\n\n  for (var i = 0; i < modulesCount; i++) {\n    darkCount += data.data[i];\n  }\n\n  var k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);\n  return k * PenaltyScores.N4;\n};\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */\n\n\nfunction getMaskAt(maskPattern, i, j) {\n  switch (maskPattern) {\n    case exports.Patterns.PATTERN000:\n      return (i + j) % 2 === 0;\n\n    case exports.Patterns.PATTERN001:\n      return i % 2 === 0;\n\n    case exports.Patterns.PATTERN010:\n      return j % 3 === 0;\n\n    case exports.Patterns.PATTERN011:\n      return (i + j) % 3 === 0;\n\n    case exports.Patterns.PATTERN100:\n      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n\n    case exports.Patterns.PATTERN101:\n      return i * j % 2 + i * j % 3 === 0;\n\n    case exports.Patterns.PATTERN110:\n      return (i * j % 2 + i * j % 3) % 2 === 0;\n\n    case exports.Patterns.PATTERN111:\n      return (i * j % 3 + (i + j) % 2) % 2 === 0;\n\n    default:\n      throw new Error('bad maskPattern:' + maskPattern);\n  }\n}\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */\n\n\nexports.applyMask = function applyMask(pattern, data) {\n  var size = data.size;\n\n  for (var col = 0; col < size; col++) {\n    for (var row = 0; row < size; row++) {\n      if (data.isReserved(row, col)) continue;\n      data.xor(row, col, getMaskAt(pattern, row, col));\n    }\n  }\n};\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */\n\n\nexports.getBestMask = function getBestMask(data, setupFormatFunc) {\n  var numPatterns = Object.keys(exports.Patterns).length;\n  var bestPattern = 0;\n  var lowerPenalty = Infinity;\n\n  for (var p = 0; p < numPatterns; p++) {\n    setupFormatFunc(p);\n    exports.applyMask(p, data); // Calculate penalty\n\n    var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data); // Undo previously applied mask\n\n    exports.applyMask(p, data);\n\n    if (penalty < lowerPenalty) {\n      lowerPenalty = penalty;\n      bestPattern = p;\n    }\n  }\n\n  return bestPattern;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mask-pattern.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js":
/*!***********************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var VersionCheck = __webpack_require__(/*! ./version-check */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version-check.js\");\n\nvar Regex = __webpack_require__(/*! ./regex */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/regex.js\");\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */\n\n\nexports.NUMERIC = {\n  id: 'Numeric',\n  bit: 1 << 0,\n  ccBits: [10, 12, 14]\n};\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */\n\nexports.ALPHANUMERIC = {\n  id: 'Alphanumeric',\n  bit: 1 << 1,\n  ccBits: [9, 11, 13]\n};\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */\n\nexports.BYTE = {\n  id: 'Byte',\n  bit: 1 << 2,\n  ccBits: [8, 16, 16]\n};\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */\n\nexports.KANJI = {\n  id: 'Kanji',\n  bit: 1 << 3,\n  ccBits: [8, 10, 12]\n};\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */\n\nexports.MIXED = {\n  bit: -1\n};\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */\n\nexports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);\n\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid version: ' + version);\n  }\n\n  if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];\n  return mode.ccBits[2];\n};\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */\n\n\nexports.getBestModeForData = function getBestModeForData(dataStr) {\n  if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;\n};\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */\n\n\nexports.toString = function toString(mode) {\n  if (mode && mode.id) return mode.id;\n  throw new Error('Invalid mode');\n};\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */\n\n\nexports.isValid = function isValid(mode) {\n  return mode && mode.bit && mode.ccBits;\n};\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */\n\n\nfunction fromString(string) {\n  if (typeof string !== 'string') {\n    throw new Error('Param is not a string');\n  }\n\n  var lcStr = string.toLowerCase();\n\n  switch (lcStr) {\n    case 'numeric':\n      return exports.NUMERIC;\n\n    case 'alphanumeric':\n      return exports.ALPHANUMERIC;\n\n    case 'kanji':\n      return exports.KANJI;\n\n    case 'byte':\n      return exports.BYTE;\n\n    default:\n      throw new Error('Unknown mode: ' + string);\n  }\n}\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */\n\n\nexports.from = function from(value, defaultValue) {\n  if (exports.isValid(value)) {\n    return value;\n  }\n\n  try {\n    return fromString(value);\n  } catch (e) {\n    return defaultValue;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9tb2RlLmpzPzhlMTgiXSwibmFtZXMiOlsiVmVyc2lvbkNoZWNrIiwicmVxdWlyZSIsIlJlZ2V4IiwiZXhwb3J0cyIsIk5VTUVSSUMiLCJpZCIsImJpdCIsImNjQml0cyIsIkFMUEhBTlVNRVJJQyIsIkJZVEUiLCJLQU5KSSIsIk1JWEVEIiwiZ2V0Q2hhckNvdW50SW5kaWNhdG9yIiwibW9kZSIsInZlcnNpb24iLCJFcnJvciIsImlzVmFsaWQiLCJnZXRCZXN0TW9kZUZvckRhdGEiLCJkYXRhU3RyIiwidGVzdE51bWVyaWMiLCJ0ZXN0QWxwaGFudW1lcmljIiwidGVzdEthbmppIiwidG9TdHJpbmciLCJmcm9tU3RyaW5nIiwic3RyaW5nIiwibGNTdHIiLCJ0b0xvd2VyQ2FzZSIsImZyb20iLCJ2YWx1ZSIsImRlZmF1bHRWYWx1ZSIsImUiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxrSUFBRCxDQUExQjs7QUFDQSxJQUFJQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsa0hBQUQsQ0FBbkI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FFLE9BQU8sQ0FBQ0MsT0FBUixHQUFrQjtBQUNoQkMsSUFBRSxFQUFFLFNBRFk7QUFFaEJDLEtBQUcsRUFBRSxLQUFLLENBRk07QUFHaEJDLFFBQU0sRUFBRSxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVDtBQUhRLENBQWxCO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBSixPQUFPLENBQUNLLFlBQVIsR0FBdUI7QUFDckJILElBQUUsRUFBRSxjQURpQjtBQUVyQkMsS0FBRyxFQUFFLEtBQUssQ0FGVztBQUdyQkMsUUFBTSxF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NkI7QUFDM0IsTUFBSSxPQUFPQSxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLFVBQU0sSUFBSVQsS0FBSixDQUFVLHVCQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJVSxLQUFLLEdBQUdELE1BQU0sQ0FBQ0UsV0FBUCxFQUFaOztBQUVBLFVBQVFELEtBQVI7QUFDRSxTQUFLLFNBQUw7QUFDRSxhQUFPdEIsT0FBTyxDQUFDQyxPQUFmOztBQUNGLFNBQUssY0FBTDtBQUNFLGFBQU9ELE9BQU8sQ0FBQ0ssWUFBZjs7QUFDRixTQUFLLE9BQUw7QUFDRSxhQUFPTCxPQUFPLENBQUNPLEtBQWY7O0FBQ0YsU0FBSyxNQUFMO0FBQ0UsYUFBT1AsT0FBTyxDQUFDTSxJQUFmOztBQUNGO0FBQ0UsWUFBTSxJQUFJTSxLQUFKLENBQVUsbUJBQW1CUyxNQUE3QixDQUFOO0FBVko7QUFZRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBckIsT0FBTyxDQUFDd0IsSUFBUixHQUFlLFNBQVNBLElBQVQsQ0FBZUMsS0FBZixFQUFzQkMsWUFBdEIsRUFBb0M7QUFDakQsTUFBSTFCLE9BQU8sQ0FBQ2EsT0FBUixDQUFnQlksS0FBaEIsQ0FBSixFQUE0QjtBQUMxQixXQUFPQSxLQUFQO0FBQ0Q7O0FBRUQsTUFBSTtBQUNGLFdBQU9MLFVBQVUsQ0FBQ0ssS0FBRCxDQUFqQjtBQUNELEdBRkQsQ0FFRSxPQUFPRSxDQUFQLEVBQVU7QUFDVixXQUFPRCxZQUFQO0FBQ0Q7QUFDRixDQVZEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbW9kZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBWZXJzaW9uQ2hlY2sgPSByZXF1aXJlKCcuL3ZlcnNpb24tY2hlY2snKVxudmFyIFJlZ2V4ID0gcmVxdWlyZSgnLi9yZWdleCcpXG5cbi8qKlxuICogTnVtZXJpYyBtb2RlIGVuY29kZXMgZGF0YSBmcm9tIHRoZSBkZWNpbWFsIGRpZ2l0IHNldCAoMCAtIDkpXG4gKiAoYnl0ZSB2YWx1ZXMgMzBIRVggdG8gMzlIRVgpLlxuICogTm9ybWFsbHksIDMgZGF0YSBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSAxMCBiaXRzLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuTlVNRVJJQyA9IHtcbiAgaWQ6ICdOdW1lcmljJyxcbiAgYml0OiAxIDw8IDAsXG4gIGNjQml0czogWzEwLCAxMiwgMTRdXG59XG5cbi8qKlxuICogQWxwaGFudW1lcmljIG1vZGUgZW5jb2RlcyBkYXRhIGZyb20gYSBzZXQgb2YgNDUgY2hhcmFjdGVycyxcbiAqIGkuZS4gMTAgbnVtZXJpYyBkaWdpdHMgKDAgLSA5KSxcbiAqICAgICAgMjYgYWxwaGFiZXRpYyBjaGFyYWN0ZXJzIChBIC0gWiksXG4gKiAgIGFuZCA5IHN5bWJvbHMgKFNQLCAkLCAlLCAqLCArLCAtLCAuLCAvLCA6KS5cbiAqIE5vcm1hbGx5LCB0d28gaW5wdXQgY2hhcmFjdGVycyBhcmUgcmVwcmVzZW50ZWQgYnkgMTEgYml0cy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLkFMUEhBTlVNRVJJQyA9IHtcbiAgaWQ6ICdBbHBoYW51bWVyaWMnLFxuICBiaXQ6IDEgPDwgMSxcbiAgY2NCaXRzOiBbOSwgMTEsIDEzXVxufVxuXG4vKipcbiAqIEluIGJ5dGUgbW9kZSwgZGF0YSBpcyBlbmNvZGVkIGF0IDggYml0cyBwZXIgY2hhcmFjdGVyLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuQllURSA9IHtcbiAgaWQ6ICdCeXRlJyxcbiAgYml0OiAxIDw8IDIsXG4gIGNjQml0czogWzgsIDE2LCAxNl1cbn1cblxuLyoqXG4gKiBUaGUgS2FuamkgbW9kZSBlZmZpY2llbnRseSBlbmNvZGVzIEthbmppIGNoYXJhY3RlcnMgaW4gYWNjb3JkYW5jZSB3aXRoXG4gKiB0aGUgU2hpZnQgSklTIHN5c3RlbSBiYXNlZCBvbiBKSVMgWCAwMjA4LlxuICogVGhlIFNoaWZ0IEpJUyB2YWx1ZXMgYXJlIHNoaWZ0ZWQgZnJvbSB0aGUgSklTIFggMDIwOCB2YWx1ZXMuXG4gKiBKSVMgWCAwMjA4IGdpdmVzIGRldGFpbHMgb2YgdGhlIHNoaWZ0IGNvZGVkIHJlcHJlc2VudGF0aW9uLlxuICogRWFjaCB0d28tYnl0ZSBjaGFyYWN0ZXIgdmFsdWUgaXMgY29tcGFjdGVkIHRvIGEgMTMtYml0IGJpbmFyeSBjb2Rld29yZC5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLktBTkpJID0ge1xuICBpZDogJ0thbmppJyxcbiAgYml0OiAxIDw8IDMsXG4gIGNjQml0czogWzgsIDEwLCAxMl1cbn1cblxuLyoqXG4gKiBNaXhlZCBtb2RlIHdpbGwgY29udGFpbiBhIHNlcXVlbmNlcyBvZiBkYXRhIGluIGEgY29tYmluYXRpb24gb2YgYW55IG9mXG4gKiB0aGUgbW9kZXMgZGVzY3JpYmVkIGFib3ZlXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5NSVhFRCA9IHtcbiAgYml0OiAtMVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBiaXRzIG5lZWRlZCB0byBzdG9yZSB0aGUgZGF0YSBsZW5ndGhcbiAqIGFjY29yZGluZyB0byBRUiBDb2RlIHNwZWNpZmljYXRpb25zLlxuICpcbiAqIEBwYXJhbSAge01vZGV9ICAgbW9kZSAgICBEYXRhIG1vZGVcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBOdW1iZXIgb2YgYml0c1xuICovXG5leHBvcnRzLmdldENoYXJDb3VudEluZGljYXRvciA9IGZ1bmN0aW9uIGdldENoYXJDb3VudEluZGljYXRvciAobW9kZSwgdmVyc2lvbikge1xuICBpZiAoIW1vZGUuY2NCaXRzKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZTogJyArIG1vZGUpXG5cbiAgaWYgKCFWZXJzaW9uQ2hlY2suaXNWYWxpZCh2ZXJzaW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2ZXJzaW9uOiAnICsgdmVyc2lvbilcbiAgfVxuXG4gIGlmICh2ZXJzaW9uID49IDEgJiYgdmVyc2lvbiA8IDEwKSByZXR1cm4gbW9kZS5jY0JpdHNbMF1cbiAgZWxzZSBpZiAodmVyc2lvbiA8IDI3KSByZXR1cm4gbW9kZS5jY0JpdHNbMV1cbiAgcmV0dXJuIG1vZGUuY2NCaXRzWzJdXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbW9zdCBlZmZpY2llbnQgbW9kZSB0byBzdG9yZSB0aGUgc3BlY2lmaWVkIGRhdGFcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGFTdHIgSW5wdXQgZGF0YSBzdHJpbmdcbiAqIEByZXR1cm4ge01vZGV9ICAgICAgICAgICBCZXN0IG1vZGVcbiAqL1xuZXhwb3J0cy5nZXRCZXN0TW9kZUZvckRhdGEgPSBmdW5jdGlvbiBnZXRCZXN0TW9kZUZvckRhdGEgKGRhdGFTdHIpIHtcbiAgaWYgKFJlZ2V4LnRlc3ROdW1lcmljKGRhdGFTdHIpKSByZXR1cm4gZXhwb3J0cy5OVU1FUklDXG4gIGVsc2UgaWYgKFJlZ2V4LnRlc3RBbHBoYW51bWVyaWMoZGF0YVN0cikpIHJldHVybiBleHBvcnRzLkFMUEhBTlVNRVJJQ1xuICBlbHNlIGlmIChSZWdleC50ZXN0S2FuamkoZGF0YVN0cikpIHJldHVybiBleHBvcnRzLktBTkpJXG4gIGVsc2UgcmV0dXJuIGV4cG9ydHMuQllURVxufVxuXG4vKipcbiAqIFJldHVybiBtb2RlIG5hbWUgYXMgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtNb2RlfSBtb2RlIE1vZGUgb2JqZWN0XG4gKiBAcmV0dXJucyB7U3RyaW5nfSAgTW9kZSBuYW1lXG4gKi9cbmV4cG9ydHMudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAobW9kZSkge1xuICBpZiAobW9kZSAmJiBtb2RlLmlkKSByZXR1cm4gbW9kZS5pZFxuICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZScpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgaW5wdXQgcGFyYW0gaXMgYSB2YWxpZCBtb2RlIG9iamVjdFxuICpcbiAqIEBwYXJhbSAgIHtNb2RlfSAgICBtb2RlIE1vZGUgb2JqZWN0XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB2YWxpZCBtb2RlLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAobW9kZSkge1xuICByZXR1cm4gbW9kZSAmJiBtb2RlLmJpdCAmJiBtb2RlLmNjQml0c1xufVxuXG4vKipcbiAqIEdldCBtb2RlIG9iamVjdCBmcm9tIGl0cyBuYW1lXG4gKlxuICogQHBhcmFtICAge1N0cmluZ30gc3RyaW5nIE1vZGUgbmFtZVxuICogQHJldHVybnMge01vZGV9ICAgICAgICAgIE1vZGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtIGlzIG5vdCBhIHN0cmluZycpXG4gIH1cblxuICB2YXIgbGNTdHIgPSBzdHJpbmcudG9Mb3dlckNhc2UoKVxuXG4gIHN3aXRjaCAobGNTdHIpIHtcbiAgICBjYXNlICdudW1lcmljJzpcbiAgICAgIHJldHVybiBleHBvcnRzLk5VTUVSSUNcbiAgICBjYXNlICdhbHBoYW51bWVyaWMnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuQUxQSEFOVU1FUklDXG4gICAgY2FzZSAna2FuamknOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuS0FOSklcbiAgICBjYXNlICdieXRlJzpcbiAgICAgIHJldHVybiBleHBvcnRzLkJZVEVcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1vZGU6ICcgKyBzdHJpbmcpXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIG1vZGUgZnJvbSBhIHZhbHVlLlxuICogSWYgdmFsdWUgaXMgbm90IGEgdmFsaWQgbW9kZSwgcmV0dXJucyBkZWZhdWx0VmFsdWVcbiAqXG4gKiBAcGFyYW0gIHtNb2RlfFN0cmluZ30gdmFsdWUgICAgICAgIEVuY29kaW5nIG1vZGVcbiAqIEBwYXJhbSAge01vZGV9ICAgICAgICBkZWZhdWx0VmFsdWUgRmFsbGJhY2sgdmFsdWVcbiAqIEByZXR1cm4ge01vZGV9ICAgICAgICAgICAgICAgICAgICAgRW5jb2RpbmcgbW9kZVxuICovXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChleHBvcnRzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/numeric-data.js":
/*!*******************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/numeric-data.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Mode = __webpack_require__(/*! ./mode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\");\n\nfunction NumericData(data) {\n  this.mode = Mode.NUMERIC;\n  this.data = data.toString();\n}\n\nNumericData.getBitsLength = function getBitsLength(length) {\n  return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n};\n\nNumericData.prototype.getLength = function getLength() {\n  return this.data.length;\n};\n\nNumericData.prototype.getBitsLength = function getBitsLength() {\n  return NumericData.getBitsLength(this.data.length);\n};\n\nNumericData.prototype.write = function write(bitBuffer) {\n  var i, group, value; // The input data string is divided into groups of three digits,\n  // and each group is converted to its 10-bit binary equivalent.\n\n  for (i = 0; i + 3 <= this.data.length; i += 3) {\n    group = this.data.substr(i, 3);\n    value = parseInt(group, 10);\n    bitBuffer.put(value, 10);\n  } // If the number of input digits is not an exact multiple of three,\n  // the final one or two digits are converted to 4 or 7 bits respectively.\n\n\n  var remainingNum = this.data.length - i;\n\n  if (remainingNum > 0) {\n    group = this.data.substr(i);\n    value = parseInt(group, 10);\n    bitBuffer.put(value, remainingNum * 3 + 1);\n  }\n};\n\nmodule.exports = NumericData;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9udW1lcmljLWRhdGEuanM/MjRiZSJdLCJuYW1lcyI6WyJNb2RlIiwicmVxdWlyZSIsIk51bWVyaWNEYXRhIiwiZGF0YSIsIm1vZGUiLCJOVU1FUklDIiwidG9TdHJpbmciLCJnZXRCaXRzTGVuZ3RoIiwibGVuZ3RoIiwiTWF0aCIsImZsb29yIiwicHJvdG90eXBlIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJpIiwiZ3JvdXAiLCJ2YWx1ZSIsInN1YnN0ciIsInBhcnNlSW50IiwicHV0IiwicmVtYWluaW5nTnVtIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdIQUFELENBQWxCOztBQUVBLFNBQVNDLFdBQVQsQ0FBc0JDLElBQXRCLEVBQTRCO0FBQzFCLE9BQUtDLElBQUwsR0FBWUosSUFBSSxDQUFDSyxPQUFqQjtBQUNBLE9BQUtGLElBQUwsR0FBWUEsSUFBSSxDQUFDRyxRQUFMLEVBQVo7QUFDRDs7QUFFREosV0FBVyxDQUFDSyxhQUFaLEdBQTRCLFNBQVNBLGFBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDO0FBQzFELFNBQU8sS0FBS0MsSUFBSSxDQUFDQyxLQUFMLENBQVdGLE1BQU0sR0FBRyxDQUFwQixDQUFMLElBQWdDQSxNQUFNLEdBQUcsQ0FBVixHQUFpQkEsTUFBTSxHQUFHLENBQVYsR0FBZSxDQUFmLEdBQW1CLENBQW5DLEdBQXdDLENBQXZFLENBQVA7QUFDRCxDQUZEOztBQUlBTixXQUFXLENBQUNTLFNBQVosQ0FBc0JDLFNBQXRCLEdBQWtDLFNBQVNBLFNBQVQsR0FBc0I7QUFDdEQsU0FBTyxLQUFLVCxJQUFMLENBQVVLLE1BQWpCO0FBQ0QsQ0FGRDs7QUFJQU4sV0FBVyxDQUFDUyxTQUFaLENBQXNCSixhQUF0QixHQUFzQyxTQUFTQSxhQUFULEdBQTBCO0FBQzlELFNBQU9MLFdBQVcsQ0FBQ0ssYUFBWixDQUEwQixLQUFLSixJQUFMLENBQVVLLE1BQXBDLENBQVA7QUFDRCxDQUZEOztBQUlBTixXQUFXLENBQUNTLFNBQVosQ0FBc0JFLEtBQXRCLEdBQThCLFNBQVNBLEtBQVQsQ0FBZ0JDLFNBQWhCLEVBQTJCO0FBQ3ZELE1BQUlDLENBQUosRUFBT0MsS0FBUCxFQUFjQyxLQUFkLENBRHVELENBR3ZEO0FBQ0E7O0FBQ0EsT0FBS0YsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHLENBQUosSUFBUyxLQUFLWixJQUFMLENBQVVLLE1BQS9CLEVBQXVDTyxDQUFDLElBQUksQ0FBNUMsRUFBK0M7QUFDN0NDLFNBQUssR0FBRyxLQUFLYixJQUFMLENBQVVlLE1BQVYsQ0FBaUJILENBQWpCLEVBQW9CLENBQXBCLENBQVI7QUFDQUUsU0FBSyxHQUFHRSxRQUFRLENBQUNILEtBQUQsRUFBUSxFQUFSLENBQWhCO0FBRUFGLGFBQVMsQ0FBQ00sR0FBVixDQUFjSCxLQUFkLEVBQXFCLEVBQXJCO0FBQ0QsR0FWc0QsQ0FZdkQ7QUFDQTs7O0FBQ0EsTUFBSUksWUFBWSxHQUFHLEtBQUtsQixJQUFMLENBQVVLLE1BQVYsR0FBbUJPLENBQXRDOztBQUNBLE1BQUlNLFlBQVksR0FBRyxDQUFuQixFQUFzQjtBQUNwQkwsU0FBSyxHQUFHLEtBQUtiLElBQUwsQ0FBVWUsTUFBVixDQUFpQkgsQ0FBakIsQ0FBUjtBQUNBRSxTQUFLLEdBQUdFLFFBQVEsQ0FBQ0gsS0FBRCxFQUFRLEVBQVIsQ0FBaEI7QUFFQUYsYUFBUyxDQUFDTSxHQUFWLENBQWNILEtBQWQsRUFBcUJJLFlBQVksR0FBRyxDQUFmLEdBQW1CLENBQXhDO0FBQ0Q7QUFDRixDQXJCRDs7QUF1QkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnJCLFdBQWpCIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbnVtZXJpYy1kYXRhLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG5mdW5jdGlvbiBOdW1lcmljRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLk5VTUVSSUNcbiAgdGhpcy5kYXRhID0gZGF0YS50b1N0cmluZygpXG59XG5cbk51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIDEwICogTWF0aC5mbG9vcihsZW5ndGggLyAzKSArICgobGVuZ3RoICUgMykgPyAoKGxlbmd0aCAlIDMpICogMyArIDEpIDogMClcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBOdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChiaXRCdWZmZXIpIHtcbiAgdmFyIGksIGdyb3VwLCB2YWx1ZVxuXG4gIC8vIFRoZSBpbnB1dCBkYXRhIHN0cmluZyBpcyBkaXZpZGVkIGludG8gZ3JvdXBzIG9mIHRocmVlIGRpZ2l0cyxcbiAgLy8gYW5kIGVhY2ggZ3JvdXAgaXMgY29udmVydGVkIHRvIGl0cyAxMC1iaXQgYmluYXJ5IGVxdWl2YWxlbnQuXG4gIGZvciAoaSA9IDA7IGkgKyAzIDw9IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gMykge1xuICAgIGdyb3VwID0gdGhpcy5kYXRhLnN1YnN0cihpLCAzKVxuICAgIHZhbHVlID0gcGFyc2VJbnQoZ3JvdXAsIDEwKVxuXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgMTApXG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGlucHV0IGRpZ2l0cyBpcyBub3QgYW4gZXhhY3QgbXVsdGlwbGUgb2YgdGhyZWUsXG4gIC8vIHRoZSBmaW5hbCBvbmUgb3IgdHdvIGRpZ2l0cyBhcmUgY29udmVydGVkIHRvIDQgb3IgNyBiaXRzIHJlc3BlY3RpdmVseS5cbiAgdmFyIHJlbWFpbmluZ051bSA9IHRoaXMuZGF0YS5sZW5ndGggLSBpXG4gIGlmIChyZW1haW5pbmdOdW0gPiAwKSB7XG4gICAgZ3JvdXAgPSB0aGlzLmRhdGEuc3Vic3RyKGkpXG4gICAgdmFsdWUgPSBwYXJzZUludChncm91cCwgMTApXG5cbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCByZW1haW5pbmdOdW0gKiAzICsgMSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWVyaWNEYXRhXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/numeric-data.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/polynomial.js":
/*!*****************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/polynomial.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js\");\n\nvar GF = __webpack_require__(/*! ./galois-field */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/galois-field.js\");\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\n\n\nexports.mul = function mul(p1, p2) {\n  var coeff = BufferUtil.alloc(p1.length + p2.length - 1);\n\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n    }\n  }\n\n  return coeff;\n};\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\n\n\nexports.mod = function mod(divident, divisor) {\n  var result = BufferUtil.from(divident);\n\n  while (result.length - divisor.length >= 0) {\n    var coeff = result[0];\n\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff);\n    } // remove all zeros from buffer head\n\n\n    var offset = 0;\n\n    while (offset < result.length && result[offset] === 0) {\n      offset++;\n    }\n\n    result = result.slice(offset);\n  }\n\n  return result;\n};\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\n\n\nexports.generateECPolynomial = function generateECPolynomial(degree) {\n  var poly = BufferUtil.from([1]);\n\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)]);\n  }\n\n  return poly;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9wb2x5bm9taWFsLmpzP2JmZjAiXSwibmFtZXMiOlsiQnVmZmVyVXRpbCIsInJlcXVpcmUiLCJHRiIsImV4cG9ydHMiLCJtdWwiLCJwMSIsInAyIiwiY29lZmYiLCJhbGxvYyIsImxlbmd0aCIsImkiLCJqIiwibW9kIiwiZGl2aWRlbnQiLCJkaXZpc29yIiwicmVzdWx0IiwiZnJvbSIsIm9mZnNldCIsInNsaWNlIiwiZ2VuZXJhdGVFQ1BvbHlub21pYWwiLCJkZWdyZWUiLCJwb2x5IiwiZXhwIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFVLEdBQUdDLG1CQUFPLENBQUMsdUlBQUQsQ0FBeEI7O0FBQ0EsSUFBSUMsRUFBRSxHQUFHRCxtQkFBTyxDQUFDLGdJQUFELENBQWhCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBRSxPQUFPLENBQUNDLEdBQVIsR0FBYyxTQUFTQSxHQUFULENBQWNDLEVBQWQsRUFBa0JDLEVBQWxCLEVBQXNCO0FBQ2xDLE1BQUlDLEtBQUssR0FBR1AsVUFBVSxDQUFDUSxLQUFYLENBQWlCSCxFQUFFLENBQUNJLE1BQUgsR0FBWUgsRUFBRSxDQUFDRyxNQUFmLEdBQXdCLENBQXpDLENBQVo7O0FBRUEsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTCxFQUFFLENBQUNJLE1BQXZCLEVBQStCQyxDQUFDLEVBQWhDLEVBQW9DO0FBQ2xDLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0wsRUFBRSxDQUFDRyxNQUF2QixFQUErQkUsQ0FBQyxFQUFoQyxFQUFvQztBQUNsQ0osV0FBSyxDQUFDRyxDQUFDLEdBQUdDLENBQUwsQ0FBTCxJQUFnQlQsRUFBRSxDQUFDRSxHQUFILENBQU9DLEVBQUUsQ0FBQ0ssQ0FBRCxDQUFULEVBQWNKLEVBQUUsQ0FBQ0ssQ0FBRCxDQUFoQixDQUFoQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0osS0FBUDtBQUNELENBVkQ7QUFZQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FKLE9BQU8sQ0FBQ1MsR0FBUixHQUFjLFNBQVNBLEdBQVQsQ0FBY0MsUUFBZCxFQUF3QkMsT0FBeEIsRUFBaUM7QUFDN0MsTUFBSUMsTUFBTSxHQUFHZixVQUFVLENBQUNnQixJQUFYLENBQWdCSCxRQUFoQixDQUFiOztBQUVBLFNBQVFFLE1BQU0sQ0FBQ04sTUFBUCxHQUFnQkssT0FBTyxDQUFDTCxNQUF6QixJQUFvQyxDQUEzQyxFQUE4QztBQUM1QyxRQUFJRixLQUFLLEdBQUdRLE1BQU0sQ0FBQyxDQUFELENBQWxCOztBQUVBLFNBQUssSUFBSUwsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0ksT0FBTyxDQUFDTCxNQUE1QixFQUFvQ0MsQ0FBQyxFQUFyQyxFQUF5QztBQUN2Q0ssWUFBTSxDQUFDTCxDQUFELENBQU4sSUFBYVIsRUFBRSxDQUFDRSxHQUFILENBQU9VLE9BQU8sQ0FBQ0osQ0FBRCxDQUFkLEVBQW1CSCxLQUFuQixDQUFiO0FBQ0QsS0FMMkMsQ0FPNUM7OztBQUNBLFFBQUlVLE1BQU0sR0FBRyxDQUFiOztBQUNBLFdBQU9BLE1BQU0sR0FBR0YsTUFBTSxDQUFDTixNQUFoQixJQUEwQk0sTUFBTSxDQUFDRSxNQUFELENBQU4sS0FBbUIsQ0FBcEQ7QUFBdURBLFlBQU07QUFBN0Q7O0FBQ0FGLFVBQU0sR0FBR0EsTUFBTSxDQUFDRyxLQUFQLENBQWFELE1BQWIsQ0FBVDtBQUNEOztBQUVELFNBQU9GLE1BQVA7QUFDRCxDQWpCRDtBQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FaLE9BQU8sQ0FBQ2dCLG9CQUFSLEdBQStCLFNBQVNBLG9CQUFULENBQStCQyxNQUEvQixFQUF1QztBQUNwRSxNQUFJQyxJQUFJLEdBQUdyQixVQUFVLENBQUNnQixJQUFYLENBQWdCLENBQUMsQ0FBRCxDQUFoQixDQUFYOztBQUNBLE9BQUssSUFBSU4sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1UsTUFBcEIsRUFBNEJWLENBQUMsRUFBN0IsRUFBaUM7QUFDL0JXLFFBQUksR0FBR2xCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZaUIsSUFBWixFQUFrQixDQUFDLENBQUQsRUFBSW5CLEVBQUUsQ0FBQ29CLEdBQUgsQ0FBT1osQ0FBUCxDQUFKLENBQWxCLENBQVA7QUFDRDs7QUFFRCxTQUFPVyxJQUFQO0FBQ0QsQ0FQRCIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3BvbHlub21pYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2J1ZmZlcicpXG52YXIgR0YgPSByZXF1aXJlKCcuL2dhbG9pcy1maWVsZCcpXG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gcG9seW5vbWlhbHMgaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge0J1ZmZlcn0gcDEgUG9seW5vbWlhbFxuICogQHBhcmFtICB7QnVmZmVyfSBwMiBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgIFByb2R1Y3Qgb2YgcDEgYW5kIHAyXG4gKi9cbmV4cG9ydHMubXVsID0gZnVuY3Rpb24gbXVsIChwMSwgcDIpIHtcbiAgdmFyIGNvZWZmID0gQnVmZmVyVXRpbC5hbGxvYyhwMS5sZW5ndGggKyBwMi5sZW5ndGggLSAxKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcDEubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHAyLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb2VmZltpICsgal0gXj0gR0YubXVsKHAxW2ldLCBwMltqXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29lZmZcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJlbWFpbmRlciBvZiBwb2x5bm9taWFscyBkaXZpc2lvblxuICpcbiAqIEBwYXJhbSAge0J1ZmZlcn0gZGl2aWRlbnQgUG9seW5vbWlhbFxuICogQHBhcmFtICB7QnVmZmVyfSBkaXZpc29yICBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgICAgIFJlbWFpbmRlclxuICovXG5leHBvcnRzLm1vZCA9IGZ1bmN0aW9uIG1vZCAoZGl2aWRlbnQsIGRpdmlzb3IpIHtcbiAgdmFyIHJlc3VsdCA9IEJ1ZmZlclV0aWwuZnJvbShkaXZpZGVudClcblxuICB3aGlsZSAoKHJlc3VsdC5sZW5ndGggLSBkaXZpc29yLmxlbmd0aCkgPj0gMCkge1xuICAgIHZhciBjb2VmZiA9IHJlc3VsdFswXVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXZpc29yLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gXj0gR0YubXVsKGRpdmlzb3JbaV0sIGNvZWZmKVxuICAgIH1cblxuICAgIC8vIHJlbW92ZSBhbGwgemVyb3MgZnJvbSBidWZmZXIgaGVhZFxuICAgIHZhciBvZmZzZXQgPSAwXG4gICAgd2hpbGUgKG9mZnNldCA8IHJlc3VsdC5sZW5ndGggJiYgcmVzdWx0W29mZnNldF0gPT09IDApIG9mZnNldCsrXG4gICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKG9mZnNldClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhbiBpcnJlZHVjaWJsZSBnZW5lcmF0b3IgcG9seW5vbWlhbCBvZiBzcGVjaWZpZWQgZGVncmVlXG4gKiAodXNlZCBieSBSZWVkLVNvbG9tb24gZW5jb2RlcilcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRlZ3JlZSBEZWdyZWUgb2YgdGhlIGdlbmVyYXRvciBwb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgICBCdWZmZXIgY29udGFpbmluZyBwb2x5bm9taWFsIGNvZWZmaWNpZW50c1xuICovXG5leHBvcnRzLmdlbmVyYXRlRUNQb2x5bm9taWFsID0gZnVuY3Rpb24gZ2VuZXJhdGVFQ1BvbHlub21pYWwgKGRlZ3JlZSkge1xuICB2YXIgcG9seSA9IEJ1ZmZlclV0aWwuZnJvbShbMV0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGVncmVlOyBpKyspIHtcbiAgICBwb2x5ID0gZXhwb3J0cy5tdWwocG9seSwgWzEsIEdGLmV4cChpKV0pXG4gIH1cblxuICByZXR1cm4gcG9seVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/polynomial.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/qrcode.js":
/*!*************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/qrcode.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js\");\n\nvar Utils = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\");\n\nvar ECLevel = __webpack_require__(/*! ./error-correction-level */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-level.js\");\n\nvar BitBuffer = __webpack_require__(/*! ./bit-buffer */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-buffer.js\");\n\nvar BitMatrix = __webpack_require__(/*! ./bit-matrix */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/bit-matrix.js\");\n\nvar AlignmentPattern = __webpack_require__(/*! ./alignment-pattern */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alignment-pattern.js\");\n\nvar FinderPattern = __webpack_require__(/*! ./finder-pattern */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/finder-pattern.js\");\n\nvar MaskPattern = __webpack_require__(/*! ./mask-pattern */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mask-pattern.js\");\n\nvar ECCode = __webpack_require__(/*! ./error-correction-code */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-code.js\");\n\nvar ReedSolomonEncoder = __webpack_require__(/*! ./reed-solomon-encoder */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/reed-solomon-encoder.js\");\n\nvar Version = __webpack_require__(/*! ./version */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version.js\");\n\nvar FormatInfo = __webpack_require__(/*! ./format-info */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/format-info.js\");\n\nvar Mode = __webpack_require__(/*! ./mode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\");\n\nvar Segments = __webpack_require__(/*! ./segments */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/segments.js\");\n\nvar isArray = __webpack_require__(/*! isarray */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/isarray/index.js\");\n/**\n * QRCode for JavaScript\n *\n * modified by Ryan Day for nodejs support\n * Copyright (c) 2011 Ryan Day\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n//---------------------------------------------------------------------\n// QRCode for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//   http://www.opensource.org/licenses/mit-license.php\n//\n// The word \"QR Code\" is registered trademark of\n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n*/\n\n/**\n * Add finder patterns bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\n\n\nfunction setupFinderPattern(matrix, version) {\n  var size = matrix.size;\n  var pos = FinderPattern.getPositions(version);\n\n  for (var i = 0; i < pos.length; i++) {\n    var row = pos[i][0];\n    var col = pos[i][1];\n\n    for (var r = -1; r <= 7; r++) {\n      if (row + r <= -1 || size <= row + r) continue;\n\n      for (var c = -1; c <= 7; c++) {\n        if (col + c <= -1 || size <= col + c) continue;\n\n        if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {\n          matrix.set(row + r, col + c, true, true);\n        } else {\n          matrix.set(row + r, col + c, false, true);\n        }\n      }\n    }\n  }\n}\n/**\n * Add timing pattern bits to matrix\n *\n * Note: this function must be called before {@link setupAlignmentPattern}\n *\n * @param  {BitMatrix} matrix Modules matrix\n */\n\n\nfunction setupTimingPattern(matrix) {\n  var size = matrix.size;\n\n  for (var r = 8; r < size - 8; r++) {\n    var value = r % 2 === 0;\n    matrix.set(r, 6, value, true);\n    matrix.set(6, r, value, true);\n  }\n}\n/**\n * Add alignment patterns bits to matrix\n *\n * Note: this function must be called after {@link setupTimingPattern}\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\n\n\nfunction setupAlignmentPattern(matrix, version) {\n  var pos = AlignmentPattern.getPositions(version);\n\n  for (var i = 0; i < pos.length; i++) {\n    var row = pos[i][0];\n    var col = pos[i][1];\n\n    for (var r = -2; r <= 2; r++) {\n      for (var c = -2; c <= 2; c++) {\n        if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {\n          matrix.set(row + r, col + c, true, true);\n        } else {\n          matrix.set(row + r, col + c, false, true);\n        }\n      }\n    }\n  }\n}\n/**\n * Add version info bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */\n\n\nfunction setupVersionInfo(matrix, version) {\n  var size = matrix.size;\n  var bits = Version.getEncodedBits(version);\n  var row, col, mod;\n\n  for (var i = 0; i < 18; i++) {\n    row = Math.floor(i / 3);\n    col = i % 3 + size - 8 - 3;\n    mod = (bits >> i & 1) === 1;\n    matrix.set(row, col, mod, true);\n    matrix.set(col, row, mod, true);\n  }\n}\n/**\n * Add format info bits to matrix\n *\n * @param  {BitMatrix} matrix               Modules matrix\n * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n * @param  {Number}    maskPattern          Mask pattern reference value\n */\n\n\nfunction setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {\n  var size = matrix.size;\n  var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);\n  var i, mod;\n\n  for (i = 0; i < 15; i++) {\n    mod = (bits >> i & 1) === 1; // vertical\n\n    if (i < 6) {\n      matrix.set(i, 8, mod, true);\n    } else if (i < 8) {\n      matrix.set(i + 1, 8, mod, true);\n    } else {\n      matrix.set(size - 15 + i, 8, mod, true);\n    } // horizontal\n\n\n    if (i < 8) {\n      matrix.set(8, size - i - 1, mod, true);\n    } else if (i < 9) {\n      matrix.set(8, 15 - i - 1 + 1, mod, true);\n    } else {\n      matrix.set(8, 15 - i - 1, mod, true);\n    }\n  } // fixed module\n\n\n  matrix.set(size - 8, 8, 1, true);\n}\n/**\n * Add encoded data bits to matrix\n *\n * @param  {BitMatrix} matrix Modules matrix\n * @param  {Buffer}    data   Data codewords\n */\n\n\nfunction setupData(matrix, data) {\n  var size = matrix.size;\n  var inc = -1;\n  var row = size - 1;\n  var bitIndex = 7;\n  var byteIndex = 0;\n\n  for (var col = size - 1; col > 0; col -= 2) {\n    if (col === 6) col--;\n\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (!matrix.isReserved(row, col - c)) {\n          var dark = false;\n\n          if (byteIndex < data.length) {\n            dark = (data[byteIndex] >>> bitIndex & 1) === 1;\n          }\n\n          matrix.set(row, col - c, dark);\n          bitIndex--;\n\n          if (bitIndex === -1) {\n            byteIndex++;\n            bitIndex = 7;\n          }\n        }\n      }\n\n      row += inc;\n\n      if (row < 0 || size <= row) {\n        row -= inc;\n        inc = -inc;\n        break;\n      }\n    }\n  }\n}\n/**\n * Create encoded codewords from data input\n *\n * @param  {Number}   version              QR Code version\n * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n * @param  {ByteData} data                 Data input\n * @return {Buffer}                        Buffer containing encoded codewords\n */\n\n\nfunction createData(version, errorCorrectionLevel, segments) {\n  // Prepare data buffer\n  var buffer = new BitBuffer();\n  segments.forEach(function (data) {\n    // prefix data with mode indicator (4 bits)\n    buffer.put(data.mode.bit, 4); // Prefix data with character count indicator.\n    // The character count indicator is a string of bits that represents the\n    // number of characters that are being encoded.\n    // The character count indicator must be placed after the mode indicator\n    // and must be a certain number of bits long, depending on the QR version\n    // and data mode\n    // @see {@link Mode.getCharCountIndicator}.\n\n    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version)); // add binary data sequence to buffer\n\n    data.write(buffer);\n  }); // Calculate required number of bits\n\n  var totalCodewords = Utils.getSymbolTotalCodewords(version);\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8; // Add a terminator.\n  // If the bit string is shorter than the total number of required bits,\n  // a terminator of up to four 0s must be added to the right side of the string.\n  // If the bit string is more than four bits shorter than the required number of bits,\n  // add four 0s to the end.\n\n  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n    buffer.put(0, 4);\n  } // If the bit string is fewer than four bits shorter, add only the number of 0s that\n  // are needed to reach the required number of bits.\n  // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n  // pad the string on the right with 0s to make the string's length a multiple of 8.\n\n\n  while (buffer.getLengthInBits() % 8 !== 0) {\n    buffer.putBit(0);\n  } // Add pad bytes if the string is still shorter than the total number of required bits.\n  // Extend the buffer to fill the data capacity of the symbol corresponding to\n  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n  // and 00010001 (0x11) alternately.\n\n\n  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;\n\n  for (var i = 0; i < remainingByte; i++) {\n    buffer.put(i % 2 ? 0x11 : 0xEC, 8);\n  }\n\n  return createCodewords(buffer, version, errorCorrectionLevel);\n}\n/**\n * Encode input data with Reed-Solomon and return codewords with\n * relative error correction bits\n *\n * @param  {BitBuffer} bitBuffer            Data to encode\n * @param  {Number}    version              QR Code version\n * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n * @return {Buffer}                         Buffer containing encoded codewords\n */\n\n\nfunction createCodewords(bitBuffer, version, errorCorrectionLevel) {\n  // Total codewords for this QR code version (Data + Error correction)\n  var totalCodewords = Utils.getSymbolTotalCodewords(version); // Total number of error correction codewords\n\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel); // Total number of data codewords\n\n  var dataTotalCodewords = totalCodewords - ecTotalCodewords; // Total number of blocks\n\n  var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel); // Calculate how many blocks each group should contain\n\n  var blocksInGroup2 = totalCodewords % ecTotalBlocks;\n  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;\n  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);\n  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);\n  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1; // Number of EC codewords is the same for both groups\n\n  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1; // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n\n  var rs = new ReedSolomonEncoder(ecCount);\n  var offset = 0;\n  var dcData = new Array(ecTotalBlocks);\n  var ecData = new Array(ecTotalBlocks);\n  var maxDataSize = 0;\n  var buffer = BufferUtil.from(bitBuffer.buffer); // Divide the buffer into the required number of blocks\n\n  for (var b = 0; b < ecTotalBlocks; b++) {\n    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2; // extract a block of data from buffer\n\n    dcData[b] = buffer.slice(offset, offset + dataSize); // Calculate EC codewords for this data block\n\n    ecData[b] = rs.encode(dcData[b]);\n    offset += dataSize;\n    maxDataSize = Math.max(maxDataSize, dataSize);\n  } // Create final data\n  // Interleave the data and error correction codewords from each block\n\n\n  var data = BufferUtil.alloc(totalCodewords);\n  var index = 0;\n  var i, r; // Add data codewords\n\n  for (i = 0; i < maxDataSize; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      if (i < dcData[r].length) {\n        data[index++] = dcData[r][i];\n      }\n    }\n  } // Apped EC codewords\n\n\n  for (i = 0; i < ecCount; i++) {\n    for (r = 0; r < ecTotalBlocks; r++) {\n      data[index++] = ecData[r][i];\n    }\n  }\n\n  return data;\n}\n/**\n * Build QR Code symbol\n *\n * @param  {String} data                 Input string\n * @param  {Number} version              QR Code version\n * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n * @param  {MaskPattern} maskPattern     Mask pattern\n * @return {Object}                      Object containing symbol data\n */\n\n\nfunction createSymbol(data, version, errorCorrectionLevel, maskPattern) {\n  var segments;\n\n  if (isArray(data)) {\n    segments = Segments.fromArray(data);\n  } else if (typeof data === 'string') {\n    var estimatedVersion = version;\n\n    if (!estimatedVersion) {\n      var rawSegments = Segments.rawSplit(data); // Estimate best version that can contain raw splitted segments\n\n      estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);\n    } // Build optimized segments\n    // If estimated version is undefined, try with the highest version\n\n\n    segments = Segments.fromString(data, estimatedVersion || 40);\n  } else {\n    throw new Error('Invalid data');\n  } // Get the min version that can contain data\n\n\n  var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel); // If no version is found, data cannot be stored\n\n  if (!bestVersion) {\n    throw new Error('The amount of data is too big to be stored in a QR Code');\n  } // If not specified, use min version as default\n\n\n  if (!version) {\n    version = bestVersion; // Check if the specified version can contain the data\n  } else if (version < bestVersion) {\n    throw new Error('\\n' + 'The chosen QR Code version cannot contain this amount of data.\\n' + 'Minimum version required to store current data is: ' + bestVersion + '.\\n');\n  }\n\n  var dataBits = createData(version, errorCorrectionLevel, segments); // Allocate matrix buffer\n\n  var moduleCount = Utils.getSymbolSize(version);\n  var modules = new BitMatrix(moduleCount); // Add function modules\n\n  setupFinderPattern(modules, version);\n  setupTimingPattern(modules);\n  setupAlignmentPattern(modules, version); // Add temporary dummy bits for format info just to set them as reserved.\n  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n  // since the masking operation must be performed only on the encoding region.\n  // These blocks will be replaced with correct values later in code.\n\n  setupFormatInfo(modules, errorCorrectionLevel, 0);\n\n  if (version >= 7) {\n    setupVersionInfo(modules, version);\n  } // Add data codewords\n\n\n  setupData(modules, dataBits);\n\n  if (isNaN(maskPattern)) {\n    // Find best mask pattern\n    maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));\n  } // Apply mask pattern\n\n\n  MaskPattern.applyMask(maskPattern, modules); // Replace format info bits with correct values\n\n  setupFormatInfo(modules, errorCorrectionLevel, maskPattern);\n  return {\n    modules: modules,\n    version: version,\n    errorCorrectionLevel: errorCorrectionLevel,\n    maskPattern: maskPattern,\n    segments: segments\n  };\n}\n/**\n * QR Code\n *\n * @param {String | Array} data                 Input data\n * @param {Object} options                      Optional configurations\n * @param {Number} options.version              QR Code version\n * @param {String} options.errorCorrectionLevel Error correction level\n * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n */\n\n\nexports.create = function create(data, options) {\n  if (typeof data === 'undefined' || data === '') {\n    throw new Error('No input text');\n  }\n\n  var errorCorrectionLevel = ECLevel.M;\n  var version;\n  var mask;\n\n  if (typeof options !== 'undefined') {\n    // Use higher error correction level as default\n    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);\n    version = Version.from(options.version);\n    mask = MaskPattern.from(options.maskPattern);\n\n    if (options.toSJISFunc) {\n      Utils.setToSJISFunction(options.toSJISFunc);\n    }\n  }\n\n  return createSymbol(data, version, errorCorrectionLevel, mask);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/qrcode.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/reed-solomon-encoder.js":
/*!***************************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/reed-solomon-encoder.js ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js\");\n\nvar Polynomial = __webpack_require__(/*! ./polynomial */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/polynomial.js\");\n\nvar Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer;\n\nfunction ReedSolomonEncoder(degree) {\n  this.genPoly = undefined;\n  this.degree = degree;\n  if (this.degree) this.initialize(this.degree);\n}\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\n\n\nReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree;\n  this.genPoly = Polynomial.generateECPolynomial(this.degree);\n};\n/**\n * Encodes a chunk of data\n *\n * @param  {Buffer} data Buffer containing input data\n * @return {Buffer}      Buffer containing encoded data\n */\n\n\nReedSolomonEncoder.prototype.encode = function encode(data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized');\n  } // Calculate EC for this data block\n  // extends data size to data+genPoly size\n\n\n  var pad = BufferUtil.alloc(this.degree);\n  var paddedData = Buffer.concat([data, pad], data.length + this.degree); // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n\n  var remainder = Polynomial.mod(paddedData, this.genPoly); // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n\n  var start = this.degree - remainder.length;\n\n  if (start > 0) {\n    var buff = BufferUtil.alloc(this.degree);\n    remainder.copy(buff, start);\n    return buff;\n  }\n\n  return remainder;\n};\n\nmodule.exports = ReedSolomonEncoder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWVkLXNvbG9tb24tZW5jb2Rlci5qcz8zNWZiIl0sIm5hbWVzIjpbIkJ1ZmZlclV0aWwiLCJyZXF1aXJlIiwiUG9seW5vbWlhbCIsIkJ1ZmZlciIsIlJlZWRTb2xvbW9uRW5jb2RlciIsImRlZ3JlZSIsImdlblBvbHkiLCJ1bmRlZmluZWQiLCJpbml0aWFsaXplIiwicHJvdG90eXBlIiwiZ2VuZXJhdGVFQ1BvbHlub21pYWwiLCJlbmNvZGUiLCJkYXRhIiwiRXJyb3IiLCJwYWQiLCJhbGxvYyIsInBhZGRlZERhdGEiLCJjb25jYXQiLCJsZW5ndGgiLCJyZW1haW5kZXIiLCJtb2QiLCJzdGFydCIsImJ1ZmYiLCJjb3B5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHVJQUFELENBQXhCOztBQUNBLElBQUlDLFVBQVUsR0FBR0QsbUJBQU8sQ0FBQyw0SEFBRCxDQUF4Qjs7QUFDQSxJQUFJRSxNQUFNLEdBQUdGLG1CQUFPLENBQUMsOENBQUQsQ0FBUCxDQUFrQkUsTUFBL0I7O0FBRUEsU0FBU0Msa0JBQVQsQ0FBNkJDLE1BQTdCLEVBQXFDO0FBQ25DLE9BQUtDLE9BQUwsR0FBZUMsU0FBZjtBQUNBLE9BQUtGLE1BQUwsR0FBY0EsTUFBZDtBQUVBLE1BQUksS0FBS0EsTUFBVCxFQUFpQixLQUFLRyxVQUFMLENBQWdCLEtBQUtILE1BQXJCO0FBQ2xCO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUQsa0JBQWtCLENBQUNLLFNBQW5CLENBQTZCRCxVQUE3QixHQUEwQyxTQUFTQSxVQUFULENBQXFCSCxNQUFyQixFQUE2QjtBQUNyRTtBQUNBLE9BQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNBLE9BQUtDLE9BQUwsR0FBZUosVUFBVSxDQUFDUSxvQkFBWCxDQUFnQyxLQUFLTCxNQUFyQyxDQUFmO0FBQ0QsQ0FKRDtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FELGtCQUFrQixDQUFDSyxTQUFuQixDQUE2QkUsTUFBN0IsR0FBc0MsU0FBU0EsTUFBVCxDQUFpQkMsSUFBakIsRUFBdUI7QUFDM0QsTUFBSSxDQUFDLEtBQUtOLE9BQVYsRUFBbUI7QUFDakIsVUFBTSxJQUFJTyxLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNELEdBSDBELENBSzNEO0FBQ0E7OztBQUNBLE1BQUlDLEdBQUcsR0FBR2QsVUFBVSxDQUFDZSxLQUFYLENBQWlCLEtBQUtWLE1BQXRCLENBQVY7QUFDQSxNQUFJVyxVQUFVLEdBQUdiLE1BQU0sQ0FBQ2MsTUFBUCxDQUFjLENBQUNMLElBQUQsRUFBT0UsR0FBUCxDQUFkLEVBQTJCRixJQUFJLENBQUNNLE1BQUwsR0FBYyxLQUFLYixNQUE5QyxDQUFqQixDQVIyRCxDQVUzRDtBQUNBOztBQUNBLE1BQUljLFNBQVMsR0FBR2pCLFVBQVUsQ0FBQ2tCLEdBQVgsQ0FBZUosVUFBZixFQUEyQixLQUFLVixPQUFoQyxDQUFoQixDQVoyRCxDQWMzRDtBQUNBO0FBQ0E7O0FBQ0EsTUFBSWUsS0FBSyxHQUFHLEtBQUtoQixNQUFMLEdBQWNjLFNBQVMsQ0FBQ0QsTUFBcEM7O0FBQ0EsTUFBSUcsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNiLFFBQUlDLElBQUksR0FBR3RCLFVBQVUsQ0FBQ2UsS0FBWCxDQUFpQixLQUFLVixNQUF0QixDQUFYO0FBQ0FjLGFBQVMsQ0FBQ0ksSUFBVixDQUFlRCxJQUFmLEVBQXFCRCxLQUFyQjtBQUVBLFdBQU9DLElBQVA7QUFDRDs7QUFFRCxTQUFPSCxTQUFQO0FBQ0QsQ0ExQkQ7O0FBNEJBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUJyQixrQkFBakIiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWVkLXNvbG9tb24tZW5jb2Rlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcbnZhciBQb2x5bm9taWFsID0gcmVxdWlyZSgnLi9wb2x5bm9taWFsJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gUmVlZFNvbG9tb25FbmNvZGVyIChkZWdyZWUpIHtcbiAgdGhpcy5nZW5Qb2x5ID0gdW5kZWZpbmVkXG4gIHRoaXMuZGVncmVlID0gZGVncmVlXG5cbiAgaWYgKHRoaXMuZGVncmVlKSB0aGlzLmluaXRpYWxpemUodGhpcy5kZWdyZWUpXG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZW5jb2Rlci5cbiAqIFRoZSBpbnB1dCBwYXJhbSBzaG91bGQgY29ycmVzcG9uZCB0byB0aGUgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIGluaXRpYWxpemUgKGRlZ3JlZSkge1xuICAvLyBjcmVhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcbiAgdGhpcy5nZW5Qb2x5ID0gUG9seW5vbWlhbC5nZW5lcmF0ZUVDUG9seW5vbWlhbCh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgY2h1bmsgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge0J1ZmZlcn0gZGF0YSBCdWZmZXIgY29udGFpbmluZyBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgQnVmZmVyIGNvbnRhaW5pbmcgZW5jb2RlZCBkYXRhXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlIChkYXRhKSB7XG4gIGlmICghdGhpcy5nZW5Qb2x5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvZGVyIG5vdCBpbml0aWFsaXplZCcpXG4gIH1cblxuICAvLyBDYWxjdWxhdGUgRUMgZm9yIHRoaXMgZGF0YSBibG9ja1xuICAvLyBleHRlbmRzIGRhdGEgc2l6ZSB0byBkYXRhK2dlblBvbHkgc2l6ZVxuICB2YXIgcGFkID0gQnVmZmVyVXRpbC5hbGxvYyh0aGlzLmRlZ3JlZSlcbiAgdmFyIHBhZGRlZERhdGEgPSBCdWZmZXIuY29uY2F0KFtkYXRhLCBwYWRdLCBkYXRhLmxlbmd0aCArIHRoaXMuZGVncmVlKVxuXG4gIC8vIFRoZSBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBhcmUgdGhlIHJlbWFpbmRlciBhZnRlciBkaXZpZGluZyB0aGUgZGF0YSBjb2Rld29yZHNcbiAgLy8gYnkgYSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICB2YXIgcmVtYWluZGVyID0gUG9seW5vbWlhbC5tb2QocGFkZGVkRGF0YSwgdGhpcy5nZW5Qb2x5KVxuXG4gIC8vIHJldHVybiBFQyBkYXRhIGJsb2NrcyAobGFzdCBuIGJ5dGUsIHdoZXJlIG4gaXMgdGhlIGRlZ3JlZSBvZiBnZW5Qb2x5KVxuICAvLyBJZiBjb2VmZmljaWVudHMgbnVtYmVyIGluIHJlbWFpbmRlciBhcmUgbGVzcyB0aGFuIGdlblBvbHkgZGVncmVlLFxuICAvLyBwYWQgd2l0aCAwcyB0byB0aGUgbGVmdCB0byByZWFjaCB0aGUgbmVlZGVkIG51bWJlciBvZiBjb2VmZmljaWVudHNcbiAgdmFyIHN0YXJ0ID0gdGhpcy5kZWdyZWUgLSByZW1haW5kZXIubGVuZ3RoXG4gIGlmIChzdGFydCA+IDApIHtcbiAgICB2YXIgYnVmZiA9IEJ1ZmZlclV0aWwuYWxsb2ModGhpcy5kZWdyZWUpXG4gICAgcmVtYWluZGVyLmNvcHkoYnVmZiwgc3RhcnQpXG5cbiAgICByZXR1cm4gYnVmZlxuICB9XG5cbiAgcmV0dXJuIHJlbWFpbmRlclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZWRTb2xvbW9uRW5jb2RlclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/reed-solomon-encoder.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/regex.js":
/*!************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/regex.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var numeric = '[0-9]+';\nvar alphanumeric = '[A-Z $%*+\\\\-./:]+';\nvar kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' + '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' + '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' + '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';\nkanji = kanji.replace(/u/g, \"\\\\u\");\nvar byte = '(?:(?![A-Z0-9 $%*+\\\\-./:]|' + kanji + ')(?:.|[\\r\\n]))+';\nexports.KANJI = new RegExp(kanji, 'g');\nexports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\\\-./:]+', 'g');\nexports.BYTE = new RegExp(byte, 'g');\nexports.NUMERIC = new RegExp(numeric, 'g');\nexports.ALPHANUMERIC = new RegExp(alphanumeric, 'g');\nvar TEST_KANJI = new RegExp('^' + kanji + '$');\nvar TEST_NUMERIC = new RegExp('^' + numeric + '$');\nvar TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\\\-./:]+$');\n\nexports.testKanji = function testKanji(str) {\n  return TEST_KANJI.test(str);\n};\n\nexports.testNumeric = function testNumeric(str) {\n  return TEST_NUMERIC.test(str);\n};\n\nexports.testAlphanumeric = function testAlphanumeric(str) {\n  return TEST_ALPHANUMERIC.test(str);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWdleC5qcz82OTEzIl0sIm5hbWVzIjpbIm51bWVyaWMiLCJhbHBoYW51bWVyaWMiLCJrYW5qaSIsInJlcGxhY2UiLCJieXRlIiwiZXhwb3J0cyIsIktBTkpJIiwiUmVnRXhwIiwiQllURV9LQU5KSSIsIkJZVEUiLCJOVU1FUklDIiwiQUxQSEFOVU1FUklDIiwiVEVTVF9LQU5KSSIsIlRFU1RfTlVNRVJJQyIsIlRFU1RfQUxQSEFOVU1FUklDIiwidGVzdEthbmppIiwic3RyIiwidGVzdCIsInRlc3ROdW1lcmljIiwidGVzdEFscGhhbnVtZXJpYyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFHLFFBQWQ7QUFDQSxJQUFJQyxZQUFZLEdBQUcsbUJBQW5CO0FBQ0EsSUFBSUMsS0FBSyxHQUFHLGtEQUNWLGdFQURVLEdBRVYsdURBRlUsR0FHVixrREFIRjtBQUlBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0MsT0FBTixDQUFjLElBQWQsRUFBb0IsS0FBcEIsQ0FBUjtBQUVBLElBQUlDLElBQUksR0FBRywrQkFBK0JGLEtBQS9CLEdBQXVDLGlCQUFsRDtBQUVBRyxPQUFPLENBQUNDLEtBQVIsR0FBZ0IsSUFBSUMsTUFBSixDQUFXTCxLQUFYLEVBQWtCLEdBQWxCLENBQWhCO0FBQ0FHLE9BQU8sQ0FBQ0csVUFBUixHQUFxQixJQUFJRCxNQUFKLENBQVcsdUJBQVgsRUFBb0MsR0FBcEMsQ0FBckI7QUFDQUYsT0FBTyxDQUFDSSxJQUFSLEdBQWUsSUFBSUYsTUFBSixDQUFXSCxJQUFYLEVBQWlCLEdBQWpCLENBQWY7QUFDQUMsT0FBTyxDQUFDSyxPQUFSLEdBQWtCLElBQUlILE1BQUosQ0FBV1AsT0FBWCxFQUFvQixHQUFwQixDQUFsQjtBQUNBSyxPQUFPLENBQUNNLFlBQVIsR0FBdUIsSUFBSUosTUFBSixDQUFXTixZQUFYLEVBQXlCLEdBQXpCLENBQXZCO0FBRUEsSUFBSVcsVUFBVSxHQUFHLElBQUlMLE1BQUosQ0FBVyxNQUFNTCxLQUFOLEdBQWMsR0FBekIsQ0FBakI7QUFDQSxJQUFJVyxZQUFZLEdBQUcsSUFBSU4sTUFBSixDQUFXLE1BQU1QLE9BQU4sR0FBZ0IsR0FBM0IsQ0FBbkI7QUFDQSxJQUFJYyxpQkFBaUIsR0FBRyxJQUFJUCxNQUFKLENBQVcsd0JBQVgsQ0FBeEI7O0FBRUFGLE9BQU8sQ0FBQ1UsU0FBUixHQUFvQixTQUFTQSxTQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUMzQyxTQUFPSixVQUFVLENBQUNLLElBQVgsQ0FBZ0JELEdBQWhCLENBQVA7QUFDRCxDQUZEOztBQUlBWCxPQUFPLENBQUNhLFdBQVIsR0FBc0IsU0FBU0EsV0FBVCxDQUFzQkYsR0FBdEIsRUFBMkI7QUFDL0MsU0FBT0gsWUFBWSxDQUFDSSxJQUFiLENBQWtCRCxHQUFsQixDQUFQO0FBQ0QsQ0FGRDs7QUFJQVgsT0FBTyxDQUFDYyxnQkFBUixHQUEyQixTQUFTQSxnQkFBVCxDQUEyQkgsR0FBM0IsRUFBZ0M7QUFDekQsU0FBT0YsaUJBQWlCLENBQUNHLElBQWxCLENBQXVCRCxHQUF2QixDQUFQO0FBQ0QsQ0FGRCIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3JlZ2V4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG51bWVyaWMgPSAnWzAtOV0rJ1xudmFyIGFscGhhbnVtZXJpYyA9ICdbQS1aICQlKitcXFxcLS4vOl0rJ1xudmFyIGthbmppID0gJyg/Olt1MzAwMC11MzAzRl18W3UzMDQwLXUzMDlGXXxbdTMwQTAtdTMwRkZdfCcgK1xuICAnW3VGRjAwLXVGRkVGXXxbdTRFMDAtdTlGQUZdfFt1MjYwNS11MjYwNl18W3UyMTkwLXUyMTk1XXx1MjAzQnwnICtcbiAgJ1t1MjAxMHUyMDE1dTIwMTh1MjAxOXUyMDI1dTIwMjZ1MjAxQ3UyMDFEdTIyMjV1MjI2MF18JyArXG4gICdbdTAzOTEtdTA0NTFdfFt1MDBBN3UwMEE4dTAwQjF1MDBCNHUwMEQ3dTAwRjddKSsnXG5rYW5qaSA9IGthbmppLnJlcGxhY2UoL3UvZywgJ1xcXFx1JylcblxudmFyIGJ5dGUgPSAnKD86KD8hW0EtWjAtOSAkJSorXFxcXC0uLzpdfCcgKyBrYW5qaSArICcpKD86LnxbXFxyXFxuXSkpKydcblxuZXhwb3J0cy5LQU5KSSA9IG5ldyBSZWdFeHAoa2FuamksICdnJylcbmV4cG9ydHMuQllURV9LQU5KSSA9IG5ldyBSZWdFeHAoJ1teQS1aMC05ICQlKitcXFxcLS4vOl0rJywgJ2cnKVxuZXhwb3J0cy5CWVRFID0gbmV3IFJlZ0V4cChieXRlLCAnZycpXG5leHBvcnRzLk5VTUVSSUMgPSBuZXcgUmVnRXhwKG51bWVyaWMsICdnJylcbmV4cG9ydHMuQUxQSEFOVU1FUklDID0gbmV3IFJlZ0V4cChhbHBoYW51bWVyaWMsICdnJylcblxudmFyIFRFU1RfS0FOSkkgPSBuZXcgUmVnRXhwKCdeJyArIGthbmppICsgJyQnKVxudmFyIFRFU1RfTlVNRVJJQyA9IG5ldyBSZWdFeHAoJ14nICsgbnVtZXJpYyArICckJylcbnZhciBURVNUX0FMUEhBTlVNRVJJQyA9IG5ldyBSZWdFeHAoJ15bQS1aMC05ICQlKitcXFxcLS4vOl0rJCcpXG5cbmV4cG9ydHMudGVzdEthbmppID0gZnVuY3Rpb24gdGVzdEthbmppIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfS0FOSkkudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdE51bWVyaWMgPSBmdW5jdGlvbiB0ZXN0TnVtZXJpYyAoc3RyKSB7XG4gIHJldHVybiBURVNUX05VTUVSSUMudGVzdChzdHIpXG59XG5cbmV4cG9ydHMudGVzdEFscGhhbnVtZXJpYyA9IGZ1bmN0aW9uIHRlc3RBbHBoYW51bWVyaWMgKHN0cikge1xuICByZXR1cm4gVEVTVF9BTFBIQU5VTUVSSUMudGVzdChzdHIpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/regex.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/segments.js":
/*!***************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/segments.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Mode = __webpack_require__(/*! ./mode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\");\n\nvar NumericData = __webpack_require__(/*! ./numeric-data */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/numeric-data.js\");\n\nvar AlphanumericData = __webpack_require__(/*! ./alphanumeric-data */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/alphanumeric-data.js\");\n\nvar ByteData = __webpack_require__(/*! ./byte-data */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/byte-data.js\");\n\nvar KanjiData = __webpack_require__(/*! ./kanji-data */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/kanji-data.js\");\n\nvar Regex = __webpack_require__(/*! ./regex */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/regex.js\");\n\nvar Utils = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\");\n\nvar dijkstra = __webpack_require__(/*! dijkstrajs */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/dijkstrajs/dijkstra.js\");\n/**\n * Returns UTF8 byte length\n *\n * @param  {String} str Input string\n * @return {Number}     Number of byte\n */\n\n\nfunction getStringByteLength(str) {\n  return unescape(encodeURIComponent(str)).length;\n}\n/**\n * Get a list of segments of the specified mode\n * from a string\n *\n * @param  {Mode}   mode Segment mode\n * @param  {String} str  String to process\n * @return {Array}       Array of object with segments data\n */\n\n\nfunction getSegments(regex, mode, str) {\n  var segments = [];\n  var result;\n\n  while ((result = regex.exec(str)) !== null) {\n    segments.push({\n      data: result[0],\n      index: result.index,\n      mode: mode,\n      length: result[0].length\n    });\n  }\n\n  return segments;\n}\n/**\n * Extracts a series of segments with the appropriate\n * modes from a string\n *\n * @param  {String} dataStr Input string\n * @return {Array}          Array of object with segments data\n */\n\n\nfunction getSegmentsFromString(dataStr) {\n  var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);\n  var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);\n  var byteSegs;\n  var kanjiSegs;\n\n  if (Utils.isKanjiModeEnabled()) {\n    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);\n    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);\n  } else {\n    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);\n    kanjiSegs = [];\n  }\n\n  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);\n  return segs.sort(function (s1, s2) {\n    return s1.index - s2.index;\n  }).map(function (obj) {\n    return {\n      data: obj.data,\n      mode: obj.mode,\n      length: obj.length\n    };\n  });\n}\n/**\n * Returns how many bits are needed to encode a string of\n * specified length with the specified mode\n *\n * @param  {Number} length String length\n * @param  {Mode} mode     Segment mode\n * @return {Number}        Bit length\n */\n\n\nfunction getSegmentBitsLength(length, mode) {\n  switch (mode) {\n    case Mode.NUMERIC:\n      return NumericData.getBitsLength(length);\n\n    case Mode.ALPHANUMERIC:\n      return AlphanumericData.getBitsLength(length);\n\n    case Mode.KANJI:\n      return KanjiData.getBitsLength(length);\n\n    case Mode.BYTE:\n      return ByteData.getBitsLength(length);\n  }\n}\n/**\n * Merges adjacent segments which have the same mode\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\n\n\nfunction mergeSegments(segs) {\n  return segs.reduce(function (acc, curr) {\n    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;\n\n    if (prevSeg && prevSeg.mode === curr.mode) {\n      acc[acc.length - 1].data += curr.data;\n      return acc;\n    }\n\n    acc.push(curr);\n    return acc;\n  }, []);\n}\n/**\n * Generates a list of all possible nodes combination which\n * will be used to build a segments graph.\n *\n * Nodes are divided by groups. Each group will contain a list of all the modes\n * in which is possible to encode the given text.\n *\n * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n * The group for '12345' will contain then 3 objects, one for each\n * possible encoding mode.\n *\n * Each node represents a possible segment.\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */\n\n\nfunction buildNodes(segs) {\n  var nodes = [];\n\n  for (var i = 0; i < segs.length; i++) {\n    var seg = segs[i];\n\n    switch (seg.mode) {\n      case Mode.NUMERIC:\n        nodes.push([seg, {\n          data: seg.data,\n          mode: Mode.ALPHANUMERIC,\n          length: seg.length\n        }, {\n          data: seg.data,\n          mode: Mode.BYTE,\n          length: seg.length\n        }]);\n        break;\n\n      case Mode.ALPHANUMERIC:\n        nodes.push([seg, {\n          data: seg.data,\n          mode: Mode.BYTE,\n          length: seg.length\n        }]);\n        break;\n\n      case Mode.KANJI:\n        nodes.push([seg, {\n          data: seg.data,\n          mode: Mode.BYTE,\n          length: getStringByteLength(seg.data)\n        }]);\n        break;\n\n      case Mode.BYTE:\n        nodes.push([{\n          data: seg.data,\n          mode: Mode.BYTE,\n          length: getStringByteLength(seg.data)\n        }]);\n    }\n  }\n\n  return nodes;\n}\n/**\n * Builds a graph from a list of nodes.\n * All segments in each node group will be connected with all the segments of\n * the next group and so on.\n *\n * At each connection will be assigned a weight depending on the\n * segment's byte length.\n *\n * @param  {Array} nodes    Array of object with segments data\n * @param  {Number} version QR Code version\n * @return {Object}         Graph of all possible segments\n */\n\n\nfunction buildGraph(nodes, version) {\n  var table = {};\n  var graph = {\n    'start': {}\n  };\n  var prevNodeIds = ['start'];\n\n  for (var i = 0; i < nodes.length; i++) {\n    var nodeGroup = nodes[i];\n    var currentNodeIds = [];\n\n    for (var j = 0; j < nodeGroup.length; j++) {\n      var node = nodeGroup[j];\n      var key = '' + i + j;\n      currentNodeIds.push(key);\n      table[key] = {\n        node: node,\n        lastCount: 0\n      };\n      graph[key] = {};\n\n      for (var n = 0; n < prevNodeIds.length; n++) {\n        var prevNodeId = prevNodeIds[n];\n\n        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n          graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);\n          table[prevNodeId].lastCount += node.length;\n        } else {\n          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;\n          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version); // switch cost\n        }\n      }\n    }\n\n    prevNodeIds = currentNodeIds;\n  }\n\n  for (n = 0; n < prevNodeIds.length; n++) {\n    graph[prevNodeIds[n]]['end'] = 0;\n  }\n\n  return {\n    map: graph,\n    table: table\n  };\n}\n/**\n * Builds a segment from a specified data and mode.\n * If a mode is not specified, the more suitable will be used.\n *\n * @param  {String} data             Input data\n * @param  {Mode | String} modesHint Data mode\n * @return {Segment}                 Segment\n */\n\n\nfunction buildSingleSegment(data, modesHint) {\n  var mode;\n  var bestMode = Mode.getBestModeForData(data);\n  mode = Mode.from(modesHint, bestMode); // Make sure data can be encoded\n\n  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n    throw new Error('\"' + data + '\"' + ' cannot be encoded with mode ' + Mode.toString(mode) + '.\\n Suggested mode is: ' + Mode.toString(bestMode));\n  } // Use Mode.BYTE if Kanji support is disabled\n\n\n  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n    mode = Mode.BYTE;\n  }\n\n  switch (mode) {\n    case Mode.NUMERIC:\n      return new NumericData(data);\n\n    case Mode.ALPHANUMERIC:\n      return new AlphanumericData(data);\n\n    case Mode.KANJI:\n      return new KanjiData(data);\n\n    case Mode.BYTE:\n      return new ByteData(data);\n  }\n}\n/**\n * Builds a list of segments from an array.\n * Array can contain Strings or Objects with segment's info.\n *\n * For each item which is a string, will be generated a segment with the given\n * string and the more appropriate encoding mode.\n *\n * For each item which is an object, will be generated a segment with the given\n * data and mode.\n * Objects must contain at least the property \"data\".\n * If property \"mode\" is not present, the more suitable mode will be used.\n *\n * @param  {Array} array Array of objects with segments data\n * @return {Array}       Array of Segments\n */\n\n\nexports.fromArray = function fromArray(array) {\n  return array.reduce(function (acc, seg) {\n    if (typeof seg === 'string') {\n      acc.push(buildSingleSegment(seg, null));\n    } else if (seg.data) {\n      acc.push(buildSingleSegment(seg.data, seg.mode));\n    }\n\n    return acc;\n  }, []);\n};\n/**\n * Builds an optimized sequence of segments from a string,\n * which will produce the shortest possible bitstream.\n *\n * @param  {String} data    Input string\n * @param  {Number} version QR Code version\n * @return {Array}          Array of segments\n */\n\n\nexports.fromString = function fromString(data, version) {\n  var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());\n  var nodes = buildNodes(segs);\n  var graph = buildGraph(nodes, version);\n  var path = dijkstra.find_path(graph.map, 'start', 'end');\n  var optimizedSegs = [];\n\n  for (var i = 1; i < path.length - 1; i++) {\n    optimizedSegs.push(graph.table[path[i]].node);\n  }\n\n  return exports.fromArray(mergeSegments(optimizedSegs));\n};\n/**\n * Splits a string in various segments with the modes which\n * best represent their content.\n * The produced segments are far from being optimized.\n * The output of this function is only used to estimate a QR Code version\n * which may contain the data.\n *\n * @param  {string} data Input string\n * @return {Array}       Array of segments\n */\n\n\nexports.rawSplit = function rawSplit(data) {\n  return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9zZWdtZW50cy5qcz84Y2I5Il0sIm5hbWVzIjpbIk1vZGUiLCJyZXF1aXJlIiwiTnVtZXJpY0RhdGEiLCJBbHBoYW51bWVyaWNEYXRhIiwiQnl0ZURhdGEiLCJLYW5qaURhdGEiLCJSZWdleCIsIlV0aWxzIiwiZGlqa3N0cmEiLCJnZXRTdHJpbmdCeXRlTGVuZ3RoIiwic3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJsZW5ndGgiLCJnZXRTZWdtZW50cyIsInJlZ2V4IiwibW9kZSIsInNlZ21lbnRzIiwicmVzdWx0IiwiZXhlYyIsInB1c2giLCJkYXRhIiwiaW5kZXgiLCJnZXRTZWdtZW50c0Zyb21TdHJpbmciLCJkYXRhU3RyIiwibnVtU2VncyIsIk5VTUVSSUMiLCJhbHBoYU51bVNlZ3MiLCJBTFBIQU5VTUVSSUMiLCJieXRlU2VncyIsImthbmppU2VncyIsImlzS2FuamlNb2RlRW5hYmxlZCIsIkJZVEUiLCJLQU5KSSIsIkJZVEVfS0FOSkkiLCJzZWdzIiwiY29uY2F0Iiwic29ydCIsInMxIiwiczIiLCJtYXAiLCJvYmoiLCJnZXRTZWdtZW50Qml0c0xlbmd0aCIsImdldEJpdHNMZW5ndGgiLCJtZXJnZVNlZ21lbnRzIiwicmVkdWNlIiwiYWNjIiwiY3VyciIsInByZXZTZWciLCJidWlsZE5vZGVzIiwibm9kZXMiLCJpIiwic2VnIiwiYnVpbGRHcmFwaCIsInZlcnNpb24iLCJ0YWJsZSIsImdyYXBoIiwicHJldk5vZGVJZHMiLCJub2RlR3JvdXAiLCJjdXJyZW50Tm9kZUlkcyIsImoiLCJub2RlIiwia2V5IiwibGFzdENvdW50IiwibiIsInByZXZOb2RlSWQiLCJnZXRDaGFyQ291bnRJbmRpY2F0b3IiLCJidWlsZFNpbmdsZVNlZ21lbnQiLCJtb2Rlc0hpbnQiLCJiZXN0TW9kZSIsImdldEJlc3RNb2RlRm9yRGF0YSIsImZyb20iLCJiaXQiLCJFcnJvciIsInRvU3RyaW5nIiwiZXhwb3J0cyIsImZyb21BcnJheSIsImFycmF5IiwiZnJvbVN0cmluZyIsInBhdGgiLCJmaW5kX3BhdGgiLCJvcHRpbWl6ZWRTZWdzIiwicmF3U3BsaXQiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxnSEFBRCxDQUFsQjs7QUFDQSxJQUFJQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsZ0lBQUQsQ0FBekI7O0FBQ0EsSUFBSUUsZ0JBQWdCLEdBQUdGLG1CQUFPLENBQUMsMElBQUQsQ0FBOUI7O0FBQ0EsSUFBSUcsUUFBUSxHQUFHSCxtQkFBTyxDQUFDLDBIQUFELENBQXRCOztBQUNBLElBQUlJLFNBQVMsR0FBR0osbUJBQU8sQ0FBQyw0SEFBRCxDQUF2Qjs7QUFDQSxJQUFJSyxLQUFLLEdBQUdMLG1CQUFPLENBQUMsa0hBQUQsQ0FBbkI7O0FBQ0EsSUFBSU0sS0FBSyxHQUFHTixtQkFBTyxDQUFDLGtIQUFELENBQW5COztBQUNBLElBQUlPLFFBQVEsR0FBR1AsbUJBQU8sQ0FBQyxtSEFBRCxDQUF0QjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU1EsbUJBQVQsQ0FBOEJDLEdBQTlCLEVBQW1DO0FBQ2pDLFNBQU9DLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNGLEdBQUQsQ0FBbkIsQ0FBUixDQUFrQ0csTUFBekM7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNDLFdBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCQyxJQUE3QixFQUFtQ04sR0FBbkMsRUFBd0M7QUFDdEMsTUFBSU8sUUFBUSxHQUFHLEVBQWY7QUFDQSxNQUFJQyxNQUFKOztBQUVBLFNBQU8sQ0FBQ0EsTUFBTSxHQUFHSCxLQUFLLENBQUNJLElBQU4sQ0FBV1QsR0FBWCxDQUFWLE1BQStCLElBQXRDLEVB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QUFJeUMsYUFBYSxHQUFHLEVBQXBCOztBQUNBLE9BQUssSUFBSTlCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc0QixJQUFJLENBQUNsRSxNQUFMLEdBQWMsQ0FBbEMsRUFBcUNzQyxDQUFDLEVBQXRDLEVBQTBDO0FBQ3hDOEIsaUJBQWEsQ0FBQzdELElBQWQsQ0FBbUJvQyxLQUFLLENBQUNELEtBQU4sQ0FBWXdCLElBQUksQ0FBQzVCLENBQUQsQ0FBaEIsRUFBcUJVLElBQXhDO0FBQ0Q7O0FBRUQsU0FBT2MsT0FBTyxDQUFDQyxTQUFSLENBQWtCaEMsYUFBYSxDQUFDcUMsYUFBRCxDQUEvQixDQUFQO0FBQ0QsQ0FiRDtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQU4sT0FBTyxDQUFDTyxRQUFSLEdBQW1CLFNBQVNBLFFBQVQsQ0FBbUI3RCxJQUFuQixFQUF5QjtBQUMxQyxTQUFPc0QsT0FBTyxDQUFDQyxTQUFSLENBQ0xyRCxxQkFBcUIsQ0FBQ0YsSUFBRCxFQUFPZCxLQUFLLENBQUN3QixrQkFBTixFQUFQLENBRGhCLENBQVA7QUFHRCxDQUpEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvc2VnbWVudHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG52YXIgTnVtZXJpY0RhdGEgPSByZXF1aXJlKCcuL251bWVyaWMtZGF0YScpXG52YXIgQWxwaGFudW1lcmljRGF0YSA9IHJlcXVpcmUoJy4vYWxwaGFudW1lcmljLWRhdGEnKVxudmFyIEJ5dGVEYXRhID0gcmVxdWlyZSgnLi9ieXRlLWRhdGEnKVxudmFyIEthbmppRGF0YSA9IHJlcXVpcmUoJy4va2FuamktZGF0YScpXG52YXIgUmVnZXggPSByZXF1aXJlKCcuL3JlZ2V4JylcbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxudmFyIGRpamtzdHJhID0gcmVxdWlyZSgnZGlqa3N0cmFqcycpXG5cbi8qKlxuICogUmV0dXJucyBVVEY4IGJ5dGUgbGVuZ3RoXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBzdHIgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBOdW1iZXIgb2YgYnl0ZVxuICovXG5mdW5jdGlvbiBnZXRTdHJpbmdCeXRlTGVuZ3RoIChzdHIpIHtcbiAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKS5sZW5ndGhcbn1cblxuLyoqXG4gKiBHZXQgYSBsaXN0IG9mIHNlZ21lbnRzIG9mIHRoZSBzcGVjaWZpZWQgbW9kZVxuICogZnJvbSBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAge01vZGV9ICAgbW9kZSBTZWdtZW50IG1vZGVcbiAqIEBwYXJhbSAge1N0cmluZ30gc3RyICBTdHJpbmcgdG8gcHJvY2Vzc1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2VnbWVudHMgKHJlZ2V4LCBtb2RlLCBzdHIpIHtcbiAgdmFyIHNlZ21lbnRzID0gW11cbiAgdmFyIHJlc3VsdFxuXG4gIHdoaWxlICgocmVzdWx0ID0gcmVnZXguZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgZGF0YTogcmVzdWx0WzBdLFxuICAgICAgaW5kZXg6IHJlc3VsdC5pbmRleCxcbiAgICAgIG1vZGU6IG1vZGUsXG4gICAgICBsZW5ndGg6IHJlc3VsdFswXS5sZW5ndGhcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzXG59XG5cbi8qKlxuICogRXh0cmFjdHMgYSBzZXJpZXMgb2Ygc2VnbWVudHMgd2l0aCB0aGUgYXBwcm9wcmlhdGVcbiAqIG1vZGVzIGZyb20gYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGFTdHIgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTZWdtZW50c0Zyb21TdHJpbmcgKGRhdGFTdHIpIHtcbiAgdmFyIG51bVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5OVU1FUklDLCBNb2RlLk5VTUVSSUMsIGRhdGFTdHIpXG4gIHZhciBhbHBoYU51bVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5BTFBIQU5VTUVSSUMsIE1vZGUuQUxQSEFOVU1FUklDLCBkYXRhU3RyKVxuICB2YXIgYnl0ZVNlZ3NcbiAgdmFyIGthbmppU2Vnc1xuXG4gIGlmIChVdGlscy5pc0thbmppTW9kZUVuYWJsZWQoKSkge1xuICAgIGJ5dGVTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguQllURSwgTW9kZS5CWVRFLCBkYXRhU3RyKVxuICAgIGthbmppU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4LktBTkpJLCBNb2RlLktBTkpJLCBkYXRhU3RyKVxuICB9IGVsc2Uge1xuICAgIGJ5dGVTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguQllURV9LQU5KSSwgTW9kZS5CWVRFLCBkYXRhU3RyKVxuICAgIGthbmppU2VncyA9IFtdXG4gIH1cblxuICB2YXIgc2VncyA9IG51bVNlZ3MuY29uY2F0KGFscGhhTnVtU2VncywgYnl0ZVNlZ3MsIGthbmppU2VncylcblxuICByZXR1cm4gc2Vnc1xuICAgIC5zb3J0KGZ1bmN0aW9uIChzMSwgczIpIHtcbiAgICAgIHJldHVybiBzMS5pbmRleCAtIHMyLmluZGV4XG4gICAgfSlcbiAgICAubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGE6IG9iai5kYXRhLFxuICAgICAgICBtb2RlOiBvYmoubW9kZSxcbiAgICAgICAgbGVuZ3RoOiBvYmoubGVuZ3RoXG4gICAgICB9XG4gICAgfSlcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGhvdyBtYW55IGJpdHMgYXJlIG5lZWRlZCB0byBlbmNvZGUgYSBzdHJpbmcgb2ZcbiAqIHNwZWNpZmllZCBsZW5ndGggd2l0aCB0aGUgc3BlY2lmaWVkIG1vZGVcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGxlbmd0aCBTdHJpbmcgbGVuZ3RoXG4gKiBAcGFyYW0gIHtNb2RlfSBtb2RlICAgICBTZWdtZW50IG1vZGVcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgIEJpdCBsZW5ndGhcbiAqL1xuZnVuY3Rpb24gZ2V0U2VnbWVudEJpdHNMZW5ndGggKGxlbmd0aCwgbW9kZSkge1xuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgIHJldHVybiBOdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgcmV0dXJuIEFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aChsZW5ndGgpXG4gICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgcmV0dXJuIEthbmppRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgICBjYXNlIE1vZGUuQllURTpcbiAgICAgIHJldHVybiBCeXRlRGF0YS5nZXRCaXRzTGVuZ3RoKGxlbmd0aClcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlcyBhZGphY2VudCBzZWdtZW50cyB3aGljaCBoYXZlIHRoZSBzYW1lIG1vZGVcbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gc2VncyBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlU2VnbWVudHMgKHNlZ3MpIHtcbiAgcmV0dXJuIHNlZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICB2YXIgcHJldlNlZyA9IGFjYy5sZW5ndGggLSAxID49IDAgPyBhY2NbYWNjLmxlbmd0aCAtIDFdIDogbnVsbFxuICAgIGlmIChwcmV2U2VnICYmIHByZXZTZWcubW9kZSA9PT0gY3Vyci5tb2RlKSB7XG4gICAgICBhY2NbYWNjLmxlbmd0aCAtIDFdLmRhdGEgKz0gY3Vyci5kYXRhXG4gICAgICByZXR1cm4gYWNjXG4gICAgfVxuXG4gICAgYWNjLnB1c2goY3VycilcbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIG5vZGVzIGNvbWJpbmF0aW9uIHdoaWNoXG4gKiB3aWxsIGJlIHVzZWQgdG8gYnVpbGQgYSBzZWdtZW50cyBncmFwaC5cbiAqXG4gKiBOb2RlcyBhcmUgZGl2aWRlZCBieSBncm91cHMuIEVhY2ggZ3JvdXAgd2lsbCBjb250YWluIGEgbGlzdCBvZiBhbGwgdGhlIG1vZGVzXG4gKiBpbiB3aGljaCBpcyBwb3NzaWJsZSB0byBlbmNvZGUgdGhlIGdpdmVuIHRleHQuXG4gKlxuICogRm9yIGV4YW1wbGUgdGhlIHRleHQgJzEyMzQ1JyBjYW4gYmUgZW5jb2RlZCBhcyBOdW1lcmljLCBBbHBoYW51bWVyaWMgb3IgQnl0ZS5cbiAqIFRoZSBncm91cCBmb3IgJzEyMzQ1JyB3aWxsIGNvbnRhaW4gdGhlbiAzIG9iamVjdHMsIG9uZSBmb3IgZWFjaFxuICogcG9zc2libGUgZW5jb2RpbmcgbW9kZS5cbiAqXG4gKiBFYWNoIG5vZGUgcmVwcmVzZW50cyBhIHBvc3NpYmxlIHNlZ21lbnQuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IHNlZ3MgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICogQHJldHVybiB7QXJyYXl9ICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBidWlsZE5vZGVzIChzZWdzKSB7XG4gIHZhciBub2RlcyA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWcgPSBzZWdzW2ldXG5cbiAgICBzd2l0Y2ggKHNlZy5tb2RlKSB7XG4gICAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgICAgbm9kZXMucHVzaChbc2VnLFxuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQUxQSEFOVU1FUklDLCBsZW5ndGg6IHNlZy5sZW5ndGggfSxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogc2VnLmxlbmd0aCB9XG4gICAgICAgIF0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE1vZGUuQUxQSEFOVU1FUklDOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IHNlZy5sZW5ndGggfVxuICAgICAgICBdKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBNb2RlLktBTkpJOlxuICAgICAgICBub2Rlcy5wdXNoKFtzZWcsXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IGdldFN0cmluZ0J5dGVMZW5ndGgoc2VnLmRhdGEpIH1cbiAgICAgICAgXSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgICAgICBub2Rlcy5wdXNoKFtcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkJZVEUsIGxlbmd0aDogZ2V0U3RyaW5nQnl0ZUxlbmd0aChzZWcuZGF0YSkgfVxuICAgICAgICBdKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2Rlc1xufVxuXG4vKipcbiAqIEJ1aWxkcyBhIGdyYXBoIGZyb20gYSBsaXN0IG9mIG5vZGVzLlxuICogQWxsIHNlZ21lbnRzIGluIGVhY2ggbm9kZSBncm91cCB3aWxsIGJlIGNvbm5lY3RlZCB3aXRoIGFsbCB0aGUgc2VnbWVudHMgb2ZcbiAqIHRoZSBuZXh0IGdyb3VwIGFuZCBzbyBvbi5cbiAqXG4gKiBBdCBlYWNoIGNvbm5lY3Rpb24gd2lsbCBiZSBhc3NpZ25lZCBhIHdlaWdodCBkZXBlbmRpbmcgb24gdGhlXG4gKiBzZWdtZW50J3MgYnl0ZSBsZW5ndGguXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IG5vZGVzICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICBHcmFwaCBvZiBhbGwgcG9zc2libGUgc2VnbWVudHNcbiAqL1xuZnVuY3Rpb24gYnVpbGRHcmFwaCAobm9kZXMsIHZlcnNpb24pIHtcbiAgdmFyIHRhYmxlID0ge31cbiAgdmFyIGdyYXBoID0geydzdGFydCc6IHt9fVxuICB2YXIgcHJldk5vZGVJZHMgPSBbJ3N0YXJ0J11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGVHcm91cCA9IG5vZGVzW2ldXG4gICAgdmFyIGN1cnJlbnROb2RlSWRzID0gW11cblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbm9kZUdyb3VwLmxlbmd0aDsgaisrKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVHcm91cFtqXVxuICAgICAgdmFyIGtleSA9ICcnICsgaSArIGpcblxuICAgICAgY3VycmVudE5vZGVJZHMucHVzaChrZXkpXG4gICAgICB0YWJsZVtrZXldID0geyBub2RlOiBub2RlLCBsYXN0Q291bnQ6IDAgfVxuICAgICAgZ3JhcGhba2V5XSA9IHt9XG5cbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgcHJldk5vZGVJZHMubGVuZ3RoOyBuKyspIHtcbiAgICAgICAgdmFyIHByZXZOb2RlSWQgPSBwcmV2Tm9kZUlkc1tuXVxuXG4gICAgICAgIGlmICh0YWJsZVtwcmV2Tm9kZUlkXSAmJiB0YWJsZVtwcmV2Tm9kZUlkXS5ub2RlLm1vZGUgPT09IG5vZGUubW9kZSkge1xuICAgICAgICAgIGdyYXBoW3ByZXZOb2RlSWRdW2tleV0gPVxuICAgICAgICAgICAgZ2V0U2VnbWVudEJpdHNMZW5ndGgodGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50ICsgbm9kZS5sZW5ndGgsIG5vZGUubW9kZSkgLVxuICAgICAgICAgICAgZ2V0U2VnbWVudEJpdHNMZW5ndGgodGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50LCBub2RlLm1vZGUpXG5cbiAgICAgICAgICB0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQgKz0gbm9kZS5sZW5ndGhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGFibGVbcHJldk5vZGVJZF0pIHRhYmxlW3ByZXZOb2RlSWRdLmxhc3RDb3VudCA9IG5vZGUubGVuZ3RoXG5cbiAgICAgICAgICBncmFwaFtwcmV2Tm9kZUlkXVtrZXldID0gZ2V0U2VnbWVudEJpdHNMZW5ndGgobm9kZS5sZW5ndGgsIG5vZGUubW9kZSkgK1xuICAgICAgICAgICAgNCArIE1vZGUuZ2V0Q2hhckNvdW50SW5kaWNhdG9yKG5vZGUubW9kZSwgdmVyc2lvbikgLy8gc3dpdGNoIGNvc3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHByZXZOb2RlSWRzID0gY3VycmVudE5vZGVJZHNcbiAgfVxuXG4gIGZvciAobiA9IDA7IG4gPCBwcmV2Tm9kZUlkcy5sZW5ndGg7IG4rKykge1xuICAgIGdyYXBoW3ByZXZOb2RlSWRzW25dXVsnZW5kJ10gPSAwXG4gIH1cblxuICByZXR1cm4geyBtYXA6IGdyYXBoLCB0YWJsZTogdGFibGUgfVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhIHNlZ21lbnQgZnJvbSBhIHNwZWNpZmllZCBkYXRhIGFuZCBtb2RlLlxuICogSWYgYSBtb2RlIGlzIG5vdCBzcGVjaWZpZWQsIHRoZSBtb3JlIHN1aXRhYmxlIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGEgICAgICAgICAgICAgSW5wdXQgZGF0YVxuICogQHBhcmFtICB7TW9kZSB8IFN0cmluZ30gbW9kZXNIaW50IERhdGEgbW9kZVxuICogQHJldHVybiB7U2VnbWVudH0gICAgICAgICAgICAgICAgIFNlZ21lbnRcbiAqL1xuZnVuY3Rpb24gYnVpbGRTaW5nbGVTZWdtZW50IChkYXRhLCBtb2Rlc0hpbnQpIHtcbiAgdmFyIG1vZGVcbiAgdmFyIGJlc3RNb2RlID0gTW9kZS5nZXRCZXN0TW9kZUZvckRhdGEoZGF0YSlcblxuICBtb2RlID0gTW9kZS5mcm9tKG1vZGVzSGludCwgYmVzdE1vZGUpXG5cbiAgLy8gTWFrZSBzdXJlIGRhdGEgY2FuIGJlIGVuY29kZWRcbiAgaWYgKG1vZGUgIT09IE1vZGUuQllURSAmJiBtb2RlLmJpdCA8IGJlc3RNb2RlLmJpdCkge1xuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgZGF0YSArICdcIicgK1xuICAgICAgJyBjYW5ub3QgYmUgZW5jb2RlZCB3aXRoIG1vZGUgJyArIE1vZGUudG9TdHJpbmcobW9kZSkgK1xuICAgICAgJy5cXG4gU3VnZ2VzdGVkIG1vZGUgaXM6ICcgKyBNb2RlLnRvU3RyaW5nKGJlc3RNb2RlKSlcbiAgfVxuXG4gIC8vIFVzZSBNb2RlLkJZVEUgaWYgS2Fuamkgc3VwcG9ydCBpcyBkaXNhYmxlZFxuICBpZiAobW9kZSA9PT0gTW9kZS5LQU5KSSAmJiAhVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpIHtcbiAgICBtb2RlID0gTW9kZS5CWVRFXG4gIH1cblxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgIHJldHVybiBuZXcgTnVtZXJpY0RhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICByZXR1cm4gbmV3IEFscGhhbnVtZXJpY0RhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5LQU5KSTpcbiAgICAgIHJldHVybiBuZXcgS2FuamlEYXRhKGRhdGEpXG5cbiAgICBjYXNlIE1vZGUuQllURTpcbiAgICAgIHJldHVybiBuZXcgQnl0ZURhdGEoZGF0YSlcbiAgfVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhIGxpc3Qgb2Ygc2VnbWVudHMgZnJvbSBhbiBhcnJheS5cbiAqIEFycmF5IGNhbiBjb250YWluIFN0cmluZ3Mgb3IgT2JqZWN0cyB3aXRoIHNlZ21lbnQncyBpbmZvLlxuICpcbiAqIEZvciBlYWNoIGl0ZW0gd2hpY2ggaXMgYSBzdHJpbmcsIHdpbGwgYmUgZ2VuZXJhdGVkIGEgc2VnbWVudCB3aXRoIHRoZSBnaXZlblxuICogc3RyaW5nIGFuZCB0aGUgbW9yZSBhcHByb3ByaWF0ZSBlbmNvZGluZyBtb2RlLlxuICpcbiAqIEZvciBlYWNoIGl0ZW0gd2hpY2ggaXMgYW4gb2JqZWN0LCB3aWxsIGJlIGdlbmVyYXRlZCBhIHNlZ21lbnQgd2l0aCB0aGUgZ2l2ZW5cbiAqIGRhdGEgYW5kIG1vZGUuXG4gKiBPYmplY3RzIG11c3QgY29udGFpbiBhdCBsZWFzdCB0aGUgcHJvcGVydHkgXCJkYXRhXCIuXG4gKiBJZiBwcm9wZXJ0eSBcIm1vZGVcIiBpcyBub3QgcHJlc2VudCwgdGhlIG1vcmUgc3VpdGFibGUgbW9kZSB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IGFycmF5IEFycmF5IG9mIG9iamVjdHMgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2YgU2VnbWVudHNcbiAqL1xuZXhwb3J0cy5mcm9tQXJyYXkgPSBmdW5jdGlvbiBmcm9tQXJyYXkgKGFycmF5KSB7XG4gIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc2VnKSB7XG4gICAgaWYgKHR5cGVvZiBzZWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhY2MucHVzaChidWlsZFNpbmdsZVNlZ21lbnQoc2VnLCBudWxsKSlcbiAgICB9IGVsc2UgaWYgKHNlZy5kYXRhKSB7XG4gICAgICBhY2MucHVzaChidWlsZFNpbmdsZVNlZ21lbnQoc2VnLmRhdGEsIHNlZy5tb2RlKSlcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhbiBvcHRpbWl6ZWQgc2VxdWVuY2Ugb2Ygc2VnbWVudHMgZnJvbSBhIHN0cmluZyxcbiAqIHdoaWNoIHdpbGwgcHJvZHVjZSB0aGUgc2hvcnRlc3QgcG9zc2libGUgYml0c3RyZWFtLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YSAgICBJbnB1dCBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBzZWdtZW50c1xuICovXG5leHBvcnRzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiBmcm9tU3RyaW5nIChkYXRhLCB2ZXJzaW9uKSB7XG4gIHZhciBzZWdzID0gZ2V0U2VnbWVudHNGcm9tU3RyaW5nKGRhdGEsIFV0aWxzLmlzS2FuamlNb2RlRW5hYmxlZCgpKVxuXG4gIHZhciBub2RlcyA9IGJ1aWxkTm9kZXMoc2VncylcbiAgdmFyIGdyYXBoID0gYnVpbGRHcmFwaChub2RlcywgdmVyc2lvbilcbiAgdmFyIHBhdGggPSBkaWprc3RyYS5maW5kX3BhdGgoZ3JhcGgubWFwLCAnc3RhcnQnLCAnZW5kJylcblxuICB2YXIgb3B0aW1pemVkU2VncyA9IFtdXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgcGF0aC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBvcHRpbWl6ZWRTZWdzLnB1c2goZ3JhcGgudGFibGVbcGF0aFtpXV0ubm9kZSlcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmZyb21BcnJheShtZXJnZVNlZ21lbnRzKG9wdGltaXplZFNlZ3MpKVxufVxuXG4vKipcbiAqIFNwbGl0cyBhIHN0cmluZyBpbiB2YXJpb3VzIHNlZ21lbnRzIHdpdGggdGhlIG1vZGVzIHdoaWNoXG4gKiBiZXN0IHJlcHJlc2VudCB0aGVpciBjb250ZW50LlxuICogVGhlIHByb2R1Y2VkIHNlZ21lbnRzIGFyZSBmYXIgZnJvbSBiZWluZyBvcHRpbWl6ZWQuXG4gKiBUaGUgb3V0cHV0IG9mIHRoaXMgZnVuY3Rpb24gaXMgb25seSB1c2VkIHRvIGVzdGltYXRlIGEgUVIgQ29kZSB2ZXJzaW9uXG4gKiB3aGljaCBtYXkgY29udGFpbiB0aGUgZGF0YS5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGRhdGEgSW5wdXQgc3RyaW5nXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2Ygc2VnbWVudHNcbiAqL1xuZXhwb3J0cy5yYXdTcGxpdCA9IGZ1bmN0aW9uIHJhd1NwbGl0IChkYXRhKSB7XG4gIHJldHVybiBleHBvcnRzLmZyb21BcnJheShcbiAgICBnZXRTZWdtZW50c0Zyb21TdHJpbmcoZGF0YSwgVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpXG4gIClcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/segments.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js":
/*!************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toSJISFunction;\nvar CODEWORDS_COUNT = [0, // Not used\n26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706];\n/**\n * Returns the QR Code size for the specified version\n *\n * @param  {Number} version QR Code version\n * @return {Number}         size of QR code\n */\n\nexports.getSymbolSize = function getSymbolSize(version) {\n  if (!version) throw new Error('\"version\" cannot be null or undefined');\n  if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40');\n  return version * 4 + 17;\n};\n/**\n * Returns the total number of codewords used to store data and EC information.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Data length in bits\n */\n\n\nexports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {\n  return CODEWORDS_COUNT[version];\n};\n/**\n * Encode data with Bose-Chaudhuri-Hocquenghem\n *\n * @param  {Number} data Value to encode\n * @return {Number}      Encoded value\n */\n\n\nexports.getBCHDigit = function (data) {\n  var digit = 0;\n\n  while (data !== 0) {\n    digit++;\n    data >>>= 1;\n  }\n\n  return digit;\n};\n\nexports.setToSJISFunction = function setToSJISFunction(f) {\n  if (typeof f !== 'function') {\n    throw new Error('\"toSJISFunc\" is not a valid function.');\n  }\n\n  toSJISFunction = f;\n};\n\nexports.isKanjiModeEnabled = function () {\n  return typeof toSJISFunction !== 'undefined';\n};\n\nexports.toSJIS = function toSJIS(kanji) {\n  return toSJISFunction(kanji);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS91dGlscy5qcz8zZGZhIl0sIm5hbWVzIjpbInRvU0pJU0Z1bmN0aW9uIiwiQ09ERVdPUkRTX0NPVU5UIiwiZXhwb3J0cyIsImdldFN5bWJvbFNpemUiLCJ2ZXJzaW9uIiwiRXJyb3IiLCJnZXRTeW1ib2xUb3RhbENvZGV3b3JkcyIsImdldEJDSERpZ2l0IiwiZGF0YSIsImRpZ2l0Iiwic2V0VG9TSklTRnVuY3Rpb24iLCJmIiwiaXNLYW5qaU1vZGVFbmFibGVkIiwidG9TSklTIiwia2FuamkiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLGNBQUo7QUFDQSxJQUFJQyxlQUFlLEdBQUcsQ0FDcEIsQ0FEb0IsRUFDakI7QUFDSCxFQUZvQixFQUVoQixFQUZnQixFQUVaLEVBRlksRUFFUixHQUZRLEVBRUgsR0FGRyxFQUVFLEdBRkYsRUFFTyxHQUZQLEVBRVksR0FGWixFQUVpQixHQUZqQixFQUVzQixHQUZ0QixFQUdwQixHQUhvQixFQUdmLEdBSGUsRUFHVixHQUhVLEVBR0wsR0FISyxFQUdBLEdBSEEsRUFHSyxHQUhMLEVBR1UsR0FIVixFQUdlLEdBSGYsRUFHb0IsR0FIcEIsRUFHeUIsSUFIekIsRUFJcEIsSUFKb0IsRUFJZCxJQUpjLEVBSVIsSUFKUSxFQUlGLElBSkUsRUFJSSxJQUpKLEVBSVUsSUFKVixFQUlnQixJQUpoQixFQUlzQixJQUp0QixFQUk0QixJQUo1QixFQUlrQyxJQUpsQyxFQUtwQixJQUxvQixFQUtkLElBTGMsRUFLUixJQUxRLEVBS0YsSUFMRSxFQUtJLElBTEosRUFLVSxJQUxWLEVBS2dCLElBTGhCLEVBS3NCLElBTHRCLEVBSzRCLElBTDVCLEVBS2tDLElBTGxDLENBQXRCO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBQyxPQUFPLENBQUNDLGFBQVIsR0FBd0IsU0FBU0EsYUFBVCxDQUF3QkMsT0FBeEIsRUFBaUM7QUFDdkQsTUFBSSxDQUFDQSxPQUFMLEVBQWMsTUFBTSxJQUFJQyxLQUFKLENBQVUsdUNBQVYsQ0FBTjtBQUNkLE1BQUlELE9BQU8sR0FBRyxDQUFWLElBQWVBLE9BQU8sR0FBRyxFQUE3QixFQUFpQyxNQUFNLElBQUlDLEtBQUosQ0FBVSwyQ0FBVixDQUFOO0FBQ2pDLFNBQU9ELE9BQU8sR0FBRyxDQUFWLEdBQWMsRUFBckI7QUFDRCxDQUpEO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQUYsT0FBTyxDQUFDSSx1QkFBUixHQUFrQyxTQUFTQSx1QkFBVCxDQUFrQ0YsT0FBbEMsRUFBMkM7QUFDM0UsU0FBT0gsZUFBZSxDQUFDRyxPQUFELENBQXRCO0FBQ0QsQ0FGRDtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FGLE9BQU8sQ0FBQ0ssV0FBUixHQUFzQixVQUFVQyxJQUFWLEVBQWdCO0FBQ3BDLE1BQUlDLEtBQUssR0FBRyxDQUFaOztBQUVBLFNBQU9ELElBQUksS0FBSyxDQUFoQixFQUFtQjtBQUNqQkMsU0FBSztBQUNMRCxRQUFJLE1BQU0sQ0FBVjtBQUNEOztBQUVELFNBQU9DLEtBQVA7QUFDRCxDQVREOztBQVdBUCxPQUFPLENBQUNRLGlCQUFSLEdBQTRCLFNBQVNBLGlCQUFULENBQTRCQyxDQUE1QixFQUErQjtBQUN6RCxNQUFJLE9BQU9BLENBQVAsS0FBYSxVQUFqQixFQUE2QjtBQUMzQixVQUFNLElBQUlOLEtBQUosQ0FBVSx1Q0FBVixDQUFOO0FBQ0Q7O0FBRURMLGdCQUFjLEdBQUdXLENBQWpCO0FBQ0QsQ0FORDs7QUFRQVQsT0FBTyxDQUFDVSxrQkFBUixHQUE2QixZQUFZO0FBQ3ZDLFNBQU8sT0FBT1osY0FBUCxLQUEwQixXQUFqQztBQUNELENBRkQ7O0FBSUFFLE9BQU8sQ0FBQ1csTUFBUixHQUFpQixTQUFTQSxNQUFULENBQWlCQyxLQUFqQixFQUF3QjtBQUN2QyxTQUFPZCxjQUFjLENBQUNjLEtBQUQsQ0FBckI7QUFDRCxDQUZEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TSklTRnVuY3Rpb25cbnZhciBDT0RFV09SRFNfQ09VTlQgPSBbXG4gIDAsIC8vIE5vdCB1c2VkXG4gIDI2LCA0NCwgNzAsIDEwMCwgMTM0LCAxNzIsIDE5NiwgMjQyLCAyOTIsIDM0NixcbiAgNDA0LCA0NjYsIDUzMiwgNTgxLCA2NTUsIDczMywgODE1LCA5MDEsIDk5MSwgMTA4NSxcbiAgMTE1NiwgMTI1OCwgMTM2NCwgMTQ3NCwgMTU4OCwgMTcwNiwgMTgyOCwgMTkyMSwgMjA1MSwgMjE4NSxcbiAgMjMyMywgMjQ2NSwgMjYxMSwgMjc2MSwgMjg3NiwgMzAzNCwgMzE5NiwgMzM2MiwgMzUzMiwgMzcwNlxuXVxuXG4vKipcbiAqIFJldHVybnMgdGhlIFFSIENvZGUgc2l6ZSBmb3IgdGhlIHNwZWNpZmllZCB2ZXJzaW9uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIHNpemUgb2YgUVIgY29kZVxuICovXG5leHBvcnRzLmdldFN5bWJvbFNpemUgPSBmdW5jdGlvbiBnZXRTeW1ib2xTaXplICh2ZXJzaW9uKSB7XG4gIGlmICghdmVyc2lvbikgdGhyb3cgbmV3IEVycm9yKCdcInZlcnNpb25cIiBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKVxuICBpZiAodmVyc2lvbiA8IDEgfHwgdmVyc2lvbiA+IDQwKSB0aHJvdyBuZXcgRXJyb3IoJ1widmVyc2lvblwiIHNob3VsZCBiZSBpbiByYW5nZSBmcm9tIDEgdG8gNDAnKVxuICByZXR1cm4gdmVyc2lvbiAqIDQgKyAxN1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRvdGFsIG51bWJlciBvZiBjb2Rld29yZHMgdXNlZCB0byBzdG9yZSBkYXRhIGFuZCBFQyBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgRGF0YSBsZW5ndGggaW4gYml0c1xuICovXG5leHBvcnRzLmdldFN5bWJvbFRvdGFsQ29kZXdvcmRzID0gZnVuY3Rpb24gZ2V0U3ltYm9sVG90YWxDb2Rld29yZHMgKHZlcnNpb24pIHtcbiAgcmV0dXJuIENPREVXT1JEU19DT1VOVFt2ZXJzaW9uXVxufVxuXG4vKipcbiAqIEVuY29kZSBkYXRhIHdpdGggQm9zZS1DaGF1ZGh1cmktSG9jcXVlbmdoZW1cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGRhdGEgVmFsdWUgdG8gZW5jb2RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgRW5jb2RlZCB2YWx1ZVxuICovXG5leHBvcnRzLmdldEJDSERpZ2l0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdmFyIGRpZ2l0ID0gMFxuXG4gIHdoaWxlIChkYXRhICE9PSAwKSB7XG4gICAgZGlnaXQrK1xuICAgIGRhdGEgPj4+PSAxXG4gIH1cblxuICByZXR1cm4gZGlnaXRcbn1cblxuZXhwb3J0cy5zZXRUb1NKSVNGdW5jdGlvbiA9IGZ1bmN0aW9uIHNldFRvU0pJU0Z1bmN0aW9uIChmKSB7XG4gIGlmICh0eXBlb2YgZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJ0b1NKSVNGdW5jXCIgaXMgbm90IGEgdmFsaWQgZnVuY3Rpb24uJylcbiAgfVxuXG4gIHRvU0pJU0Z1bmN0aW9uID0gZlxufVxuXG5leHBvcnRzLmlzS2FuamlNb2RlRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiB0b1NKSVNGdW5jdGlvbiAhPT0gJ3VuZGVmaW5lZCdcbn1cblxuZXhwb3J0cy50b1NKSVMgPSBmdW5jdGlvbiB0b1NKSVMgKGthbmppKSB7XG4gIHJldHVybiB0b1NKSVNGdW5jdGlvbihrYW5qaSlcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version-check.js":
/*!********************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version-check.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */\nexports.isValid = function isValid(version) {\n  return !isNaN(version) && version >= 1 && version <= 40;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS92ZXJzaW9uLWNoZWNrLmpzPzI1YjEiXSwibmFtZXMiOlsiZXhwb3J0cyIsImlzVmFsaWQiLCJ2ZXJzaW9uIiwiaXNOYU4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQSxPQUFPLENBQUNDLE9BQVIsR0FBa0IsU0FBU0EsT0FBVCxDQUFrQkMsT0FBbEIsRUFBMkI7QUFDM0MsU0FBTyxDQUFDQyxLQUFLLENBQUNELE9BQUQsQ0FBTixJQUFtQkEsT0FBTyxJQUFJLENBQTlCLElBQW1DQSxPQUFPLElBQUksRUFBckQ7QUFDRCxDQUZEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdmVyc2lvbi1jaGVjay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgaWYgUVIgQ29kZSB2ZXJzaW9uIGlzIHZhbGlkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgdHJ1ZSBpZiB2YWxpZCB2ZXJzaW9uLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAodmVyc2lvbikge1xuICByZXR1cm4gIWlzTmFOKHZlcnNpb24pICYmIHZlcnNpb24gPj0gMSAmJiB2ZXJzaW9uIDw9IDQwXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version-check.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version.js":
/*!**************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Utils = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/utils.js\");\n\nvar ECCode = __webpack_require__(/*! ./error-correction-code */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-code.js\");\n\nvar ECLevel = __webpack_require__(/*! ./error-correction-level */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/error-correction-level.js\");\n\nvar Mode = __webpack_require__(/*! ./mode */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/mode.js\");\n\nvar VersionCheck = __webpack_require__(/*! ./version-check */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version-check.js\");\n\nvar isArray = __webpack_require__(/*! isarray */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/isarray/index.js\"); // Generator polynomial used to encode version information\n\n\nvar G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\nvar G18_BCH = Utils.getBCHDigit(G18);\n\nfunction getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getReservedBitsCount(mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4;\n}\n\nfunction getTotalBitsFromDataArray(segments, version) {\n  var totalBits = 0;\n  segments.forEach(function (data) {\n    var reservedBits = getReservedBitsCount(data.mode, version);\n    totalBits += reservedBits + data.getBitsLength();\n  });\n  return totalBits;\n}\n\nfunction getBestVersionForMixedData(segments, errorCorrectionLevel) {\n  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    var length = getTotalBitsFromDataArray(segments, currentVersion);\n\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion;\n    }\n  }\n\n  return undefined;\n}\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\n\n\nexports.from = function from(value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10);\n  }\n\n  return defaultValue;\n};\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\n\n\nexports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version');\n  } // Use Byte mode as default\n\n\n  if (typeof mode === 'undefined') mode = Mode.BYTE; // Total codewords for this QR code version (Data + Error correction)\n\n  var totalCodewords = Utils.getSymbolTotalCodewords(version); // Total number of error correction codewords\n\n  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel); // Total number of data codewords\n\n  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version); // Return max number of storable codewords\n\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor(usableBits / 10 * 3);\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor(usableBits / 11 * 2);\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13);\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8);\n  }\n};\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\n\n\nexports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n  var seg;\n  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n\n  if (isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl);\n    }\n\n    if (data.length === 0) {\n      return 1;\n    }\n\n    seg = data[0];\n  } else {\n    seg = data;\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n};\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\n\n\nexports.getEncodedBits = function getEncodedBits(version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version');\n  }\n\n  var d = version << 12;\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n  }\n\n  return version << 12 | d;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/core/version.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/canvas.js":
/*!*****************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/canvas.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Utils = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/utils.js\");\n\nfunction clearCanvas(ctx, canvas, size) {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  if (!canvas.style) canvas.style = {};\n  canvas.height = size;\n  canvas.width = size;\n  canvas.style.height = size + 'px';\n  canvas.style.width = size + 'px';\n}\n\nfunction getCanvasElement() {\n  try {\n    return document.createElement('canvas');\n  } catch (e) {\n    throw new Error('You need to specify a canvas element');\n  }\n}\n\nexports.render = function render(qrData, canvas, options) {\n  var opts = options;\n  var canvasEl = canvas;\n\n  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n    opts = canvas;\n    canvas = undefined;\n  }\n\n  if (!canvas) {\n    canvasEl = getCanvasElement();\n  }\n\n  opts = Utils.getOptions(opts);\n  var size = Utils.getImageWidth(qrData.modules.size, opts);\n  var ctx = canvasEl.getContext('2d');\n  var image = ctx.createImageData(size, size);\n  Utils.qrToImageData(image.data, qrData, opts);\n  clearCanvas(ctx, canvasEl, size);\n  ctx.putImageData(image, 0, 0);\n  return canvasEl;\n};\n\nexports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {\n  var opts = options;\n\n  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n    opts = canvas;\n    canvas = undefined;\n  }\n\n  if (!opts) opts = {};\n  var canvasEl = exports.render(qrData, canvas, opts);\n  var type = opts.type || 'image/png';\n  var rendererOpts = opts.rendererOpts || {};\n  return canvasEl.toDataURL(type, rendererOpts.quality);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvY2FudmFzLmpzP2Y1ZjciXSwibmFtZXMiOlsiVXRpbHMiLCJyZXF1aXJlIiwiY2xlYXJDYW52YXMiLCJjdHgiLCJjYW52YXMiLCJzaXplIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJzdHlsZSIsImdldENhbnZhc0VsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlIiwiRXJyb3IiLCJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsIm9wdHMiLCJjYW52YXNFbCIsImdldENvbnRleHQiLCJ1bmRlZmluZWQiLCJnZXRPcHRpb25zIiwiZ2V0SW1hZ2VXaWR0aCIsIm1vZHVsZXMiLCJpbWFnZSIsImNyZWF0ZUltYWdlRGF0YSIsInFyVG9JbWFnZURhdGEiLCJkYXRhIiwicHV0SW1hZ2VEYXRhIiwicmVuZGVyVG9EYXRhVVJMIiwidHlwZSIsInJlbmRlcmVyT3B0cyIsInRvRGF0YVVSTCIsInF1YWxpdHkiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxzSEFBRCxDQUFuQjs7QUFFQSxTQUFTQyxXQUFULENBQXNCQyxHQUF0QixFQUEyQkMsTUFBM0IsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ3ZDRixLQUFHLENBQUNHLFNBQUosQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CRixNQUFNLENBQUNHLEtBQTNCLEVBQWtDSCxNQUFNLENBQUNJLE1BQXpDO0FBRUEsTUFBSSxDQUFDSixNQUFNLENBQUNLLEtBQVosRUFBbUJMLE1BQU0sQ0FBQ0ssS0FBUCxHQUFlLEVBQWY7QUFDbkJMLFFBQU0sQ0FBQ0ksTUFBUCxHQUFnQkgsSUFBaEI7QUFDQUQsUUFBTSxDQUFDRyxLQUFQLEdBQWVGLElBQWY7QUFDQUQsUUFBTSxDQUFDSyxLQUFQLENBQWFELE1BQWIsR0FBc0JILElBQUksR0FBRyxJQUE3QjtBQUNBRCxRQUFNLENBQUNLLEtBQVAsQ0FBYUYsS0FBYixHQUFxQkYsSUFBSSxHQUFHLElBQTVCO0FBQ0Q7O0FBRUQsU0FBU0ssZ0JBQVQsR0FBNkI7QUFDM0IsTUFBSTtBQUNGLFdBQU9DLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixRQUF2QixDQUFQO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWLFVBQU0sSUFBSUMsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDRDtBQUNGOztBQUVEQyxPQUFPLENBQUNDLE1BQVIsR0FBaUIsU0FBU0EsTUFBVCxDQUFpQkMsTUFBakIsRUFBeUJiLE1BQXpCLEVBQWlDYyxPQUFqQyxFQUEwQztBQUN6RCxNQUFJQyxJQUFJLEdBQUdELE9BQVg7QUFDQSxNQUFJRSxRQUFRLEdBQUdoQixNQUFmOztBQUVBLE1BQUksT0FBT2UsSUFBUCxLQUFnQixXQUFoQixLQUFnQyxDQUFDZixNQUFELElBQVcsQ0FBQ0EsTUFBTSxDQUFDaUIsVUFBbkQsQ0FBSixFQUFvRTtBQUNsRUYsUUFBSSxHQUFHZixNQUFQO0FBQ0FBLFVBQU0sR0FBR2tCLFNBQVQ7QUFDRDs7QUFFRCxNQUFJLENBQUNsQixNQUFMLEVBQWE7QUFDWGdCLFlBQVEsR0FBR1YsZ0JBQWdCLEVBQTNCO0FBQ0Q7O0FBRURTLE1BQUksR0FBR25CLEtBQUssQ0FBQ3VCLFVBQU4sQ0FBaUJKLElBQWpCLENBQVA7QUFDQSxNQUFJZCxJQUFJLEdBQUdMLEtBQUssQ0FBQ3dCLGFBQU4sQ0FBb0JQLE1BQU0sQ0FBQ1EsT0FBUCxDQUFlcEIsSUFBbkMsRUFBeUNjLElBQXpDLENBQVg7QUFFQSxNQUFJaEIsR0FBRyxHQUFHaUIsUUFBUSxDQUFDQyxVQUFULENBQW9CLElBQXBCLENBQVY7QUFDQSxNQUFJSyxLQUFLLEdBQUd2QixHQUFHLENBQUN3QixlQUFKLENBQW9CdEIsSUFBcEIsRUFBMEJBLElBQTFCLENBQVo7QUFDQUwsT0FBSyxDQUFDNEIsYUFBTixDQUFvQkYsS0FBSyxDQUFDRyxJQUExQixFQUFnQ1osTUFBaEMsRUFBd0NFLElBQXhDO0FBRUFqQixhQUFXLENBQUNDLEdBQUQsRUFBTWlCLFFBQU4sRUFBZ0JmLElBQWhCLENBQVg7QUFDQUYsS0FBRyxDQUFDMkIsWUFBSixDQUFpQkosS0FBakIsRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0I7QUFFQSxTQUFPTixRQUFQO0FBQ0QsQ0F4QkQ7O0FBMEJBTCxPQUFPLENBQUNnQixlQUFSLEdBQTBCLFNBQVNBLGVBQVQsQ0FBMEJkLE1BQTFCLEVBQWtDYixNQUFsQyxFQUEwQ2MsT0FBMUMsRUFBbUQ7QUFDM0UsTUFBSUMsSUFBSSxHQUFHRCxPQUFYOztBQUVBLE1BQUksT0FBT0MsSUFBUCxLQUFnQixXQUFoQixLQUFnQyxDQUFDZixNQUFELElBQVcsQ0FBQ0EsTUFBTSxDQUFDaUIsVUFBbkQsQ0FBSixFQUFvRTtBQUNsRUYsUUFBSSxHQUFHZixNQUFQO0FBQ0FBLFVBQU0sR0FBR2tCLFNBQVQ7QUFDRDs7QUFFRCxNQUFJLENBQUNILElBQUwsRUFBV0EsSUFBSSxHQUFHLEVBQVA7QUFFWCxNQUFJQyxRQUFRLEdBQUdMLE9BQU8sQ0FBQ0MsTUFBUixDQUFlQyxNQUFmLEVBQXVCYixNQUF2QixFQUErQmUsSUFBL0IsQ0FBZjtBQUVBLE1BQUlhLElBQUksR0FBR2IsSUFBSSxDQUFDYSxJQUFMLElBQWEsV0FBeEI7QUFDQSxNQUFJQyxZQUFZLEdBQUdkLElBQUksQ0FBQ2MsWUFBTCxJQUFxQixFQUF4QztBQUVBLFNBQU9iLFFBQVEsQ0FBQ2MsU0FBVCxDQUFtQkYsSUFBbkIsRUFBeUJDLFlBQVksQ0FBQ0UsT0FBdEMsQ0FBUDtBQUNELENBaEJEIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL2NhbnZhcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5mdW5jdGlvbiBjbGVhckNhbnZhcyAoY3R4LCBjYW52YXMsIHNpemUpIHtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cbiAgaWYgKCFjYW52YXMuc3R5bGUpIGNhbnZhcy5zdHlsZSA9IHt9XG4gIGNhbnZhcy5oZWlnaHQgPSBzaXplXG4gIGNhbnZhcy53aWR0aCA9IHNpemVcbiAgY2FudmFzLnN0eWxlLmhlaWdodCA9IHNpemUgKyAncHgnXG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IHNpemUgKyAncHgnXG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc0VsZW1lbnQgKCkge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgY2FudmFzIGVsZW1lbnQnKVxuICB9XG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIGNhbnZhcywgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IG9wdGlvbnNcbiAgdmFyIGNhbnZhc0VsID0gY2FudmFzXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFjYW52YXMpIHtcbiAgICBjYW52YXNFbCA9IGdldENhbnZhc0VsZW1lbnQoKVxuICB9XG5cbiAgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0cylcbiAgdmFyIHNpemUgPSBVdGlscy5nZXRJbWFnZVdpZHRoKHFyRGF0YS5tb2R1bGVzLnNpemUsIG9wdHMpXG5cbiAgdmFyIGN0eCA9IGNhbnZhc0VsLmdldENvbnRleHQoJzJkJylcbiAgdmFyIGltYWdlID0gY3R4LmNyZWF0ZUltYWdlRGF0YShzaXplLCBzaXplKVxuICBVdGlscy5xclRvSW1hZ2VEYXRhKGltYWdlLmRhdGEsIHFyRGF0YSwgb3B0cylcblxuICBjbGVhckNhbnZhcyhjdHgsIGNhbnZhc0VsLCBzaXplKVxuICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKVxuXG4gIHJldHVybiBjYW52YXNFbFxufVxuXG5leHBvcnRzLnJlbmRlclRvRGF0YVVSTCA9IGZ1bmN0aW9uIHJlbmRlclRvRGF0YVVSTCAocXJEYXRhLCBjYW52YXMsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cblxuICB2YXIgY2FudmFzRWwgPSBleHBvcnRzLnJlbmRlcihxckRhdGEsIGNhbnZhcywgb3B0cylcblxuICB2YXIgdHlwZSA9IG9wdHMudHlwZSB8fCAnaW1hZ2UvcG5nJ1xuICB2YXIgcmVuZGVyZXJPcHRzID0gb3B0cy5yZW5kZXJlck9wdHMgfHwge31cblxuICByZXR1cm4gY2FudmFzRWwudG9EYXRhVVJMKHR5cGUsIHJlbmRlcmVyT3B0cy5xdWFsaXR5KVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/canvas.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/svg-tag.js":
/*!******************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/svg-tag.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Utils = __webpack_require__(/*! ./utils */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/utils.js\");\n\nfunction getColorAttrib(color, attrib) {\n  var alpha = color.a / 255;\n  var str = attrib + '=\"' + color.hex + '\"';\n  return alpha < 1 ? str + ' ' + attrib + '-opacity=\"' + alpha.toFixed(2).slice(1) + '\"' : str;\n}\n\nfunction svgCmd(cmd, x, y) {\n  var str = cmd + x;\n  if (typeof y !== 'undefined') str += ' ' + y;\n  return str;\n}\n\nfunction qrToPath(data, size, margin) {\n  var path = '';\n  var moveBy = 0;\n  var newRow = false;\n  var lineLength = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    var col = Math.floor(i % size);\n    var row = Math.floor(i / size);\n    if (!col && !newRow) newRow = true;\n\n    if (data[i]) {\n      lineLength++;\n\n      if (!(i > 0 && col > 0 && data[i - 1])) {\n        path += newRow ? svgCmd('M', col + margin, 0.5 + row + margin) : svgCmd('m', moveBy, 0);\n        moveBy = 0;\n        newRow = false;\n      }\n\n      if (!(col + 1 < size && data[i + 1])) {\n        path += svgCmd('h', lineLength);\n        lineLength = 0;\n      }\n    } else {\n      moveBy++;\n    }\n  }\n\n  return path;\n}\n\nexports.render = function render(qrData, options, cb) {\n  var opts = Utils.getOptions(options);\n  var size = qrData.modules.size;\n  var data = qrData.modules.data;\n  var qrcodesize = size + opts.margin * 2;\n  var bg = !opts.color.light.a ? '' : '<path ' + getColorAttrib(opts.color.light, 'fill') + ' d=\"M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z\"/>';\n  var path = '<path ' + getColorAttrib(opts.color.dark, 'stroke') + ' d=\"' + qrToPath(data, size, opts.margin) + '\"/>';\n  var viewBox = 'viewBox=\"' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '\"';\n  var width = !opts.width ? '' : 'width=\"' + opts.width + '\" height=\"' + opts.width + '\" ';\n  var svgTag = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + width + viewBox + ' shape-rendering=\"crispEdges\">' + bg + path + '</svg>\\n';\n\n  if (typeof cb === 'function') {\n    cb(null, svgTag);\n  }\n\n  return svgTag;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvc3ZnLXRhZy5qcz9jZmMxIl0sIm5hbWVzIjpbIlV0aWxzIiwicmVxdWlyZSIsImdldENvbG9yQXR0cmliIiwiY29sb3IiLCJhdHRyaWIiLCJhbHBoYSIsImEiLCJzdHIiLCJoZXgiLCJ0b0ZpeGVkIiwic2xpY2UiLCJzdmdDbWQiLCJjbWQiLCJ4IiwieSIsInFyVG9QYXRoIiwiZGF0YSIsInNpemUiLCJtYXJnaW4iLCJwYXRoIiwibW92ZUJ5IiwibmV3Um93IiwibGluZUxlbmd0aCIsImkiLCJsZW5ndGgiLCJjb2wiLCJNYXRoIiwiZmxvb3IiLCJyb3ciLCJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIiwib3B0cyIsImdldE9wdGlvbnMiLCJtb2R1bGVzIiwicXJjb2Rlc2l6ZSIsImJnIiwibGlnaHQiLCJkYXJrIiwidmlld0JveCIsIndpZHRoIiwic3ZnVGFnIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsc0hBQUQsQ0FBbkI7O0FBRUEsU0FBU0MsY0FBVCxDQUF5QkMsS0FBekIsRUFBZ0NDLE1BQWhDLEVBQXdDO0FBQ3RDLE1BQUlDLEtBQUssR0FBR0YsS0FBSyxDQUFDRyxDQUFOLEdBQVUsR0FBdEI7QUFDQSxNQUFJQyxHQUFHLEdBQUdILE1BQU0sR0FBRyxJQUFULEdBQWdCRCxLQUFLLENBQUNLLEdBQXRCLEdBQTRCLEdBQXRDO0FBRUEsU0FBT0gsS0FBSyxHQUFHLENBQVIsR0FDSEUsR0FBRyxHQUFHLEdBQU4sR0FBWUgsTUFBWixHQUFxQixZQUFyQixHQUFvQ0MsS0FBSyxDQUFDSSxPQUFOLENBQWMsQ0FBZCxFQUFpQkMsS0FBakIsQ0FBdUIsQ0FBdkIsQ0FBcEMsR0FBZ0UsR0FEN0QsR0FF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Q0FBV3FDLElBQVosRUFBa0IsUUFBbEIsQ0FBekIsR0FDQSxNQURBLEdBQ1N6QixRQUFRLENBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhaUIsSUFBSSxDQUFDaEIsTUFBbEIsQ0FEakIsR0FDNkMsS0FGL0M7QUFJQSxNQUFJdUIsT0FBTyxHQUFHLGNBQWMsTUFBZCxHQUF1QkosVUFBdkIsR0FBb0MsR0FBcEMsR0FBMENBLFVBQTFDLEdBQXVELEdBQXJFO0FBRUEsTUFBSUssS0FBSyxHQUFHLENBQUNSLElBQUksQ0FBQ1EsS0FBTixHQUFjLEVBQWQsR0FBbUIsWUFBWVIsSUFBSSxDQUFDUSxLQUFqQixHQUF5QixZQUF6QixHQUF3Q1IsSUFBSSxDQUFDUSxLQUE3QyxHQUFxRCxJQUFwRjtBQUVBLE1BQUlDLE1BQU0sR0FBRyw2Q0FBNkNELEtBQTdDLEdBQXFERCxPQUFyRCxHQUErRCxnQ0FBL0QsR0FBa0dILEVBQWxHLEdBQXVHbkIsSUFBdkcsR0FBOEcsVUFBM0g7O0FBRUEsTUFBSSxPQUFPYyxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUJBLE1BQUUsQ0FBQyxJQUFELEVBQU9VLE1BQVAsQ0FBRjtBQUNEOztBQUVELFNBQU9BLE1BQVA7QUFDRCxDQTFCRCIsImZpbGUiOiIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9zdmctdGFnLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIGdldENvbG9yQXR0cmliIChjb2xvciwgYXR0cmliKSB7XG4gIHZhciBhbHBoYSA9IGNvbG9yLmEgLyAyNTVcbiAgdmFyIHN0ciA9IGF0dHJpYiArICc9XCInICsgY29sb3IuaGV4ICsgJ1wiJ1xuXG4gIHJldHVybiBhbHBoYSA8IDFcbiAgICA/IHN0ciArICcgJyArIGF0dHJpYiArICctb3BhY2l0eT1cIicgKyBhbHBoYS50b0ZpeGVkKDIpLnNsaWNlKDEpICsgJ1wiJ1xuICAgIDogc3RyXG59XG5cbmZ1bmN0aW9uIHN2Z0NtZCAoY21kLCB4LCB5KSB7XG4gIHZhciBzdHIgPSBjbWQgKyB4XG4gIGlmICh0eXBlb2YgeSAhPT0gJ3VuZGVmaW5lZCcpIHN0ciArPSAnICcgKyB5XG5cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBxclRvUGF0aCAoZGF0YSwgc2l6ZSwgbWFyZ2luKSB7XG4gIHZhciBwYXRoID0gJydcbiAgdmFyIG1vdmVCeSA9IDBcbiAgdmFyIG5ld1JvdyA9IGZhbHNlXG4gIHZhciBsaW5lTGVuZ3RoID0gMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjb2wgPSBNYXRoLmZsb29yKGkgJSBzaXplKVxuICAgIHZhciByb3cgPSBNYXRoLmZsb29yKGkgLyBzaXplKVxuXG4gICAgaWYgKCFjb2wgJiYgIW5ld1JvdykgbmV3Um93ID0gdHJ1ZVxuXG4gICAgaWYgKGRhdGFbaV0pIHtcbiAgICAgIGxpbmVMZW5ndGgrK1xuXG4gICAgICBpZiAoIShpID4gMCAmJiBjb2wgPiAwICYmIGRhdGFbaSAtIDFdKSkge1xuICAgICAgICBwYXRoICs9IG5ld1Jvd1xuICAgICAgICAgID8gc3ZnQ21kKCdNJywgY29sICsgbWFyZ2luLCAwLjUgKyByb3cgKyBtYXJnaW4pXG4gICAgICAgICAgOiBzdmdDbWQoJ20nLCBtb3ZlQnksIDApXG5cbiAgICAgICAgbW92ZUJ5ID0gMFxuICAgICAgICBuZXdSb3cgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZiAoIShjb2wgKyAxIDwgc2l6ZSAmJiBkYXRhW2kgKyAxXSkpIHtcbiAgICAgICAgcGF0aCArPSBzdmdDbWQoJ2gnLCBsaW5lTGVuZ3RoKVxuICAgICAgICBsaW5lTGVuZ3RoID0gMFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtb3ZlQnkrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXRoXG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICB2YXIgc2l6ZSA9IHFyRGF0YS5tb2R1bGVzLnNpemVcbiAgdmFyIGRhdGEgPSBxckRhdGEubW9kdWxlcy5kYXRhXG4gIHZhciBxcmNvZGVzaXplID0gc2l6ZSArIG9wdHMubWFyZ2luICogMlxuXG4gIHZhciBiZyA9ICFvcHRzLmNvbG9yLmxpZ2h0LmFcbiAgICA/ICcnXG4gICAgOiAnPHBhdGggJyArIGdldENvbG9yQXR0cmliKG9wdHMuY29sb3IubGlnaHQsICdmaWxsJykgK1xuICAgICAgJyBkPVwiTTAgMGgnICsgcXJjb2Rlc2l6ZSArICd2JyArIHFyY29kZXNpemUgKyAnSDB6XCIvPidcblxuICB2YXIgcGF0aCA9XG4gICAgJzxwYXRoICcgKyBnZXRDb2xvckF0dHJpYihvcHRzLmNvbG9yLmRhcmssICdzdHJva2UnKSArXG4gICAgJyBkPVwiJyArIHFyVG9QYXRoKGRhdGEsIHNpemUsIG9wdHMubWFyZ2luKSArICdcIi8+J1xuXG4gIHZhciB2aWV3Qm94ID0gJ3ZpZXdCb3g9XCInICsgJzAgMCAnICsgcXJjb2Rlc2l6ZSArICcgJyArIHFyY29kZXNpemUgKyAnXCInXG5cbiAgdmFyIHdpZHRoID0gIW9wdHMud2lkdGggPyAnJyA6ICd3aWR0aD1cIicgKyBvcHRzLndpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBvcHRzLndpZHRoICsgJ1wiICdcblxuICB2YXIgc3ZnVGFnID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICcgKyB3aWR0aCArIHZpZXdCb3ggKyAnIHNoYXBlLXJlbmRlcmluZz1cImNyaXNwRWRnZXNcIj4nICsgYmcgKyBwYXRoICsgJzwvc3ZnPlxcbidcblxuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IobnVsbCwgc3ZnVGFnKVxuICB9XG5cbiAgcmV0dXJuIHN2Z1RhZ1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/svg-tag.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/utils.js":
/*!****************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/utils.js ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function hex2rgba(hex) {\n  if (typeof hex === 'number') {\n    hex = hex.toString();\n  }\n\n  if (typeof hex !== 'string') {\n    throw new Error('Color should be defined as hex string');\n  }\n\n  var hexCode = hex.slice().replace('#', '').split('');\n\n  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {\n    throw new Error('Invalid hex color: ' + hex);\n  } // Convert from short to long form (fff -> ffffff)\n\n\n  if (hexCode.length === 3 || hexCode.length === 4) {\n    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {\n      return [c, c];\n    }));\n  } // Add default alpha value\n\n\n  if (hexCode.length === 6) hexCode.push('F', 'F');\n  var hexValue = parseInt(hexCode.join(''), 16);\n  return {\n    r: hexValue >> 24 & 255,\n    g: hexValue >> 16 & 255,\n    b: hexValue >> 8 & 255,\n    a: hexValue & 255,\n    hex: '#' + hexCode.slice(0, 6).join('')\n  };\n}\n\nexports.getOptions = function getOptions(options) {\n  if (!options) options = {};\n  if (!options.color) options.color = {};\n  var margin = typeof options.margin === 'undefined' || options.margin === null || options.margin < 0 ? 4 : options.margin;\n  var width = options.width && options.width >= 21 ? options.width : undefined;\n  var scale = options.scale || 4;\n  return {\n    width: width,\n    scale: width ? 4 : scale,\n    margin: margin,\n    color: {\n      dark: hex2rgba(options.color.dark || '#000000ff'),\n      light: hex2rgba(options.color.light || '#ffffffff')\n    },\n    type: options.type,\n    rendererOpts: options.rendererOpts || {}\n  };\n};\n\nexports.getScale = function getScale(qrSize, opts) {\n  return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;\n};\n\nexports.getImageWidth = function getImageWidth(qrSize, opts) {\n  var scale = exports.getScale(qrSize, opts);\n  return Math.floor((qrSize + opts.margin * 2) * scale);\n};\n\nexports.qrToImageData = function qrToImageData(imgData, qr, opts) {\n  var size = qr.modules.size;\n  var data = qr.modules.data;\n  var scale = exports.getScale(size, opts);\n  var symbolSize = Math.floor((size + opts.margin * 2) * scale);\n  var scaledMargin = opts.margin * scale;\n  var palette = [opts.color.light, opts.color.dark];\n\n  for (var i = 0; i < symbolSize; i++) {\n    for (var j = 0; j < symbolSize; j++) {\n      var posDst = (i * symbolSize + j) * 4;\n      var pxColor = opts.color.light;\n\n      if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {\n        var iSrc = Math.floor((i - scaledMargin) / scale);\n        var jSrc = Math.floor((j - scaledMargin) / scale);\n        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];\n      }\n\n      imgData[posDst++] = pxColor.r;\n      imgData[posDst++] = pxColor.g;\n      imgData[posDst++] = pxColor.b;\n      imgData[posDst] = pxColor.a;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/renderer/utils.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js":
/*!*************************************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Implementation of a subset of node.js Buffer methods for the browser.\n * Based on https://github.com/feross/buffer\n */\n\n/* eslint-disable no-proto */\n\n\nvar isArray = __webpack_require__(/*! isarray */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/isarray/index.js\");\n\nfunction typedArraySupport() {\n  // Can typed array instances be augmented?\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42;\n  } catch (e) {\n    return false;\n  }\n}\n\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\nvar K_MAX_LENGTH = Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n\nfunction Buffer(arg, offset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, offset, length);\n  }\n\n  if (typeof arg === 'number') {\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, offset, length);\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array; // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true,\n      enumerable: false,\n      writable: false\n    });\n  }\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}\n\nfunction createBuffer(that, length) {\n  var buf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    buf = new Uint8Array(length);\n    buf.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    buf = that;\n\n    if (buf === null) {\n      buf = new Buffer(length);\n    }\n\n    buf.length = length;\n  }\n\n  return buf;\n}\n\nfunction allocUnsafe(that, size) {\n  var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      buf[i] = 0;\n    }\n  }\n\n  return buf;\n}\n\nfunction fromString(that, string) {\n  var length = byteLength(string) | 0;\n  var buf = createBuffer(that, length);\n  var actual = buf.write(string);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual);\n  }\n\n  return buf;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  var buf = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255;\n  }\n\n  return buf;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  var buf;\n\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array);\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset);\n  } else {\n    buf = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    buf.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    buf = fromArrayLike(that, buf);\n  }\n\n  return buf;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    var buf = createBuffer(that, len);\n\n    if (buf.length === 0) {\n      return buf;\n    }\n\n    obj.copy(buf, 0, 0, len);\n    return buf;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction byteLength(string) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0;\n  return utf8ToBytes(string).length;\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction from(that, value, offset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, offset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, offset);\n  }\n\n  return fromObject(that, value);\n}\n\nBuffer.prototype.write = function write(string, offset, length) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n    } else {\n      length = undefined;\n    }\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  return utf8Write(this, string, offset, length);\n};\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance\n\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n};\n\nBuffer.prototype.fill = function fill(val, start, end) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : new Buffer(val);\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return createBuffer(null, 0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = allocUnsafe(null, length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nBuffer.byteLength = byteLength;\nBuffer.prototype._isBuffer = true;\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nmodule.exports.alloc = function (size) {\n  var buffer = new Buffer(size);\n  buffer.fill(0);\n  return buffer;\n};\n\nmodule.exports.from = function (data) {\n  return new Buffer(data);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/node_modules/qrcode/lib/utils/typedarray-buffer.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations sync recursive ^\\.\\/.*$":
/*!*************************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/translations sync ^\.\/.*$ ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var map = {\n\t\"./en\": \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/en.js\",\n\t\"./en.js\": \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/en.js\",\n\t\"./nl\": \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/nl.js\",\n\t\"./nl.js\": \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/nl.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations sync recursive ^\\\\.\\\\/.*$\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvdHJhbnNsYXRpb25zIHN5bmMgXlxcLlxcLy4qJD84MmMzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL3RyYW5zbGF0aW9ucyBzeW5jIHJlY3Vyc2l2ZSBeXFwuXFwvLiokLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2VuXCI6IFwiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvdHJhbnNsYXRpb25zL2VuLmpzXCIsXG5cdFwiLi9lbi5qc1wiOiBcIi4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL3RyYW5zbGF0aW9ucy9lbi5qc1wiLFxuXHRcIi4vbmxcIjogXCIuLi8uLi8uLi9hZnN0dWRlcmVuL2lybWEtZnJvbnRlbmQtcGFja2FnZXMvcGx1Z2lucy9pcm1hLXdlYi90cmFuc2xhdGlvbnMvbmwuanNcIixcblx0XCIuL25sLmpzXCI6IFwiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvdHJhbnNsYXRpb25zL25sLmpzXCJcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL3RyYW5zbGF0aW9ucyBzeW5jIHJlY3Vyc2l2ZSBeXFxcXC5cXFxcLy4qJFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations sync recursive ^\\.\\/.*$\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/en.js":
/*!*****************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/translations/en.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  header: 'Continue with <i class=\"irma-web-logo\">IRMA</i>',\n  helper: 'Can\\'t figure it out? Take a look at the <a href=\"https://irma.app/\">IRMA website</a>.',\n  loading: 'Just a second please!',\n  button: 'Open IRMA app',\n  qrCode: 'Show QR code',\n  app: 'Follow the steps in the IRMA app',\n  retry: 'Try again',\n  back: 'Go back',\n  cancelled: 'The session is cancelled',\n  timeout: 'Sorry! We haven\\'t heard<br/>from you for too long',\n  error: 'Sorry! Something went wrong',\n  refused: 'Access is denied',\n  browser: 'We\\'re sorry, but your browser does not meet the minimum requirements',\n  success: 'Success!',\n  cancel: 'Cancel'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvdHJhbnNsYXRpb25zL2VuLmpzP2I4NTUiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhlYWRlciIsImhlbHBlciIsImxvYWRpbmciLCJidXR0b24iLCJxckNvZGUiLCJhcHAiLCJyZXRyeSIsImJhY2siLCJjYW5jZWxsZWQiLCJ0aW1lb3V0IiwiZXJyb3IiLCJyZWZ1c2VkIiwiYnJvd3NlciIsInN1Y2Nlc3MiLCJjYW5jZWwiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsUUFBTSxFQUFLLGlEQURJO0FBRWZDLFFBQU0sRUFBSyx3RkFGSTtBQUdmQyxTQUFPLEVBQUksdUJBSEk7QUFJZkMsUUFBTSxFQUFLLGVBSkk7QUFLZkMsUUFBTSxFQUFLLGNBTEk7QUFNZkMsS0FBRyxFQUFRLGtDQU5JO0FBT2ZDLE9BQUssRUFBTSxXQVBJO0FBUWZDLE1BQUksRUFBTyxTQVJJO0FBU2ZDLFdBQVMsRUFBRSwwQkFUSTtBQVVmQyxTQUFPLEVBQUksb0RBVkk7QUFXZkMsT0FBSyxFQUFNLDZCQVhJO0FBWWZDLFNBQU8sRUFBSSxrQkFaSTtBQWFmQyxTQUFPLEVBQUksdUVBYkk7QUFjZkMsU0FBTyxFQUFJLFVBZEk7QUFlZkMsUUFBTSxFQUFLO0FBZkksQ0FBakIiLCJmaWxlIjoiLi4vLi4vLi4vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvdHJhbnNsYXRpb25zL2VuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGhlYWRlcjogICAgJ0NvbnRpbnVlIHdpdGggPGkgY2xhc3M9XCJpcm1hLXdlYi1sb2dvXCI+SVJNQTwvaT4nLFxuICBoZWxwZXI6ICAgICdDYW5cXCd0IGZpZ3VyZSBpdCBvdXQ/IFRha2UgYSBsb29rIGF0IHRoZSA8YSBocmVmPVwiaHR0cHM6Ly9pcm1hLmFwcC9cIj5JUk1BIHdlYnNpdGU8L2E+LicsXG4gIGxvYWRpbmc6ICAgJ0p1c3QgYSBzZWNvbmQgcGxlYXNlIScsXG4gIGJ1dHRvbjogICAgJ09wZW4gSVJNQSBhcHAnLFxuICBxckNvZGU6ICAgICdTaG93IFFSIGNvZGUnLFxuICBhcHA6ICAgICAgICdGb2xsb3cgdGhlIHN0ZXBzIGluIHRoZSBJUk1BIGFwcCcsXG4gIHJldHJ5OiAgICAgJ1RyeSBhZ2FpbicsXG4gIGJhY2s6ICAgICAgJ0dvIGJhY2snLFxuICBjYW5jZWxsZWQ6ICdUaGUgc2Vzc2lvbiBpcyBjYW5jZWxsZWQnLFxuICB0aW1lb3V0OiAgICdTb3JyeSEgV2UgaGF2ZW5cXCd0IGhlYXJkPGJyLz5mcm9tIHlvdSBmb3IgdG9vIGxvbmcnLFxuICBlcnJvcjogICAgICdTb3JyeSEgU29tZXRoaW5nIHdlbnQgd3JvbmcnLFxuICByZWZ1c2VkOiAgICdBY2Nlc3MgaXMgZGVuaWVkJyxcbiAgYnJvd3NlcjogICAnV2VcXCdyZSBzb3JyeSwgYnV0IHlvdXIgYnJvd3NlciBkb2VzIG5vdCBtZWV0IHRoZSBtaW5pbXVtIHJlcXVpcmVtZW50cycsXG4gIHN1Y2Nlc3M6ICAgJ1N1Y2Nlc3MhJyxcbiAgY2FuY2VsOiAgICAnQ2FuY2VsJ1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/en.js\n");

/***/ }),

/***/ "../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/nl.js":
/*!*****************************************************************************************!*\
  !*** /home/jarco/afstuderen/irma-frontend-packages/plugins/irma-web/translations/nl.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  header: 'Ga verder met <i class=\"irma-web-logo\">IRMA</i>',\n  helper: 'Kom je er niet uit? Kijk dan eerst eens op <a href=\"https://irma.app/\">de website van IRMA</a>.',\n  loading: 'EÃ©n moment alsjeblieft',\n  button: 'Open IRMA app',\n  qrCode: 'Toon QR code',\n  app: 'Volg de instructies in de IRMA-app',\n  retry: 'Opnieuw proberen',\n  back: 'Ga terug',\n  cancelled: 'De handeling is afgebroken',\n  timeout: 'Sorry! We hebben te lang<br/>niks van je gehoord',\n  error: 'Sorry! Er is een fout opgetreden',\n  refused: 'Toegang is geweigerd',\n  browser: 'Het spijt ons, maar je browser voldoet niet aan de minimale eisen',\n  success: 'Gelukt!',\n  cancel: 'Annuleer'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL2hvbWUvamFyY28vYWZzdHVkZXJlbi9pcm1hLWZyb250ZW5kLXBhY2thZ2VzL3BsdWdpbnMvaXJtYS13ZWIvdHJhbnNsYXRpb25zL25sLmpzP2U4MmUiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImhlYWRlciIsImhlbHBlciIsImxvYWRpbmciLCJidXR0b24iLCJxckNvZGUiLCJhcHAiLCJyZXRyeSIsImJhY2siLCJjYW5jZWxsZWQiLCJ0aW1lb3V0IiwiZXJyb3IiLCJyZWZ1c2VkIiwiYnJvd3NlciIsInN1Y2Nlc3MiLCJjYW5jZWwiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsUUFBTSxFQUFLLGlEQURJO0FBRWZDLFFBQU0sRUFBSyxpR0FGSTtBQUdmQyxTQUFPLEVBQUksd0JBSEk7QUFJZkMsUUFBTSxFQUFLLGVBSkk7QUFLZkMsUUFBTSxFQUFLLGNBTEk7QUFNZkMsS0FBRyxFQUFRLG9DQU5JO0FBT2ZDLE9BQUssRUFBTSxrQkFQSTtBQVFmQyxNQUFJLEVBQU8sVUFSSTtBQVNmQyxXQUFTLEVBQUUsNEJBVEk7QUFVZkMsU0FBTyxFQUFJLGtEQVZJO0FBV2ZDLE9BQUssRUFBTSxrQ0FYSTtBQVlmQyxTQUFPLEVBQUksc0JBWkk7QUFhZkMsU0FBTyxFQUFJLG1FQWJJO0FBY2ZDLFNBQU8sRUFBSSxTQWRJO0FBZWZDLFFBQU0sRUFBSztBQWZJLENBQWpCIiwiZmlsZSI6Ii4uLy4uLy4uL2Fmc3R1ZGVyZW4vaXJtYS1mcm9udGVuZC1wYWNrYWdlcy9wbHVnaW5zL2lybWEtd2ViL3RyYW5zbGF0aW9ucy9ubC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBoZWFkZXI6ICAgICdHYSB2ZXJkZXIgbWV0IDxpIGNsYXNzPVwiaXJtYS13ZWItbG9nb1wiPklSTUE8L2k+JyxcbiAgaGVscGVyOiAgICAnS29tIGplIGVyIG5pZXQgdWl0PyBLaWprIGRhbiBlZXJzdCBlZW5zIG9wIDxhIGhyZWY9XCJodHRwczovL2lybWEuYXBwL1wiPmRlIHdlYnNpdGUgdmFuIElSTUE8L2E+LicsXG4gIGxvYWRpbmc6ICAgJ0XDqW4gbW9tZW50IGFsc2plYmxpZWZ0JyxcbiAgYnV0dG9uOiAgICAnT3BlbiBJUk1BIGFwcCcsXG4gIHFyQ29kZTogICAgJ1Rvb24gUVIgY29kZScsXG4gIGFwcDogICAgICAgJ1ZvbGcgZGUgaW5zdHJ1Y3RpZXMgaW4gZGUgSVJNQS1hcHAnLFxuICByZXRyeTogICAgICdPcG5pZXV3IHByb2JlcmVuJyxcbiAgYmFjazogICAgICAnR2EgdGVydWcnLFxuICBjYW5jZWxsZWQ6ICdEZSBoYW5kZWxpbmcgaXMgYWZnZWJyb2tlbicsXG4gIHRpbWVvdXQ6ICAgJ1NvcnJ5ISBXZSBoZWJiZW4gdGUgbGFuZzxici8+bmlrcyB2YW4gamUgZ2Vob29yZCcsXG4gIGVycm9yOiAgICAgJ1NvcnJ5ISBFciBpcyBlZW4gZm91dCBvcGdldHJlZGVuJyxcbiAgcmVmdXNlZDogICAnVG9lZ2FuZyBpcyBnZXdlaWdlcmQnLFxuICBicm93c2VyOiAgICdIZXQgc3BpanQgb25zLCBtYWFyIGplIGJyb3dzZXIgdm9sZG9ldCBuaWV0IGFhbiBkZSBtaW5pbWFsZSBlaXNlbicsXG4gIHN1Y2Nlc3M6ICAgJ0dlbHVrdCEnLFxuICBjYW5jZWw6ICAgICdBbm51bGVlcidcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../afstuderen/irma-frontend-packages/plugins/irma-web/translations/nl.js\n");

/***/ }),

/***/ "./node_modules/@privacybydesign/irma-css/dist/irma.min.css":
/*!******************************************************************!*\
  !*** ./node_modules/@privacybydesign/irma-css/dist/irma.min.css ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var api = __webpack_require__(/*! ../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !../../../css-loader/dist/cjs.js!./irma.min.css */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/@privacybydesign/irma-css/dist/irma.min.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHByaXZhY3lieWRlc2lnbi9pcm1hLWNzcy9kaXN0L2lybWEubWluLmNzcz9hN2EwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyw0SUFBaUU7QUFDbkYsMEJBQTBCLG1CQUFPLENBQUMseUpBQWtEOztBQUVwRjs7QUFFQTtBQUNBLDBCQUEwQixRQUFTO0FBQ25DOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7Ozs7QUFJQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AcHJpdmFjeWJ5ZGVzaWduL2lybWEtY3NzL2Rpc3QvaXJtYS5taW4uY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pcm1hLm1pbi5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@privacybydesign/irma-css/dist/irma.min.css\n");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength;\nexports.toByteArray = toByteArray;\nexports.fromByteArray = fromByteArray;\nvar lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i];\n  revLookup[code.charCodeAt(i)] = i;\n} // Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\n\n\nrevLookup['-'.charCodeAt(0)] = 62;\nrevLookup['_'.charCodeAt(0)] = 63;\n\nfunction getLens(b64) {\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4');\n  } // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n\n\n  var validLen = b64.indexOf('=');\n  if (validLen === -1) validLen = len;\n  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n  return [validLen, placeHoldersLen];\n} // base64 is 4/3 + up to two characters of the original data\n\n\nfunction byteLength(b64) {\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction _byteLength(b64, validLen, placeHoldersLen) {\n  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\n\nfunction toByteArray(b64) {\n  var tmp;\n  var lens = getLens(b64);\n  var validLen = lens[0];\n  var placeHoldersLen = lens[1];\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars\n\n  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n  var i;\n\n  for (i = 0; i < len; i += 4) {\n    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n    arr[curByte++] = tmp >> 16 & 0xFF;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n    arr[curByte++] = tmp >> 8 & 0xFF;\n    arr[curByte++] = tmp & 0xFF;\n  }\n\n  return arr;\n}\n\nfunction tripletToBase64(num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n}\n\nfunction encodeChunk(uint8, start, end) {\n  var tmp;\n  var output = [];\n\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n    output.push(tripletToBase64(tmp));\n  }\n\n  return output.join('');\n}\n\nfunction fromByteArray(uint8) {\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n  // go through the array every three bytes, we'll deal with trailing stuff later\n\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n  } // pad the end with zeros, but make sure to not forget the extra bytes\n\n\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n  }\n\n  return parts.join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n\n/* eslint-disable no-proto */\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\");\n\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\");\n\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\");\n\nexports.Buffer = Buffer;\nexports.SlowBuffer = SlowBuffer;\nexports.INSPECT_MAX_BYTES = 50;\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\n\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();\n/*\n * Export kMaxLength after typed array support is determined.\n */\n\nexports.kMaxLength = kMaxLength();\n\nfunction typedArraySupport() {\n  try {\n    var arr = new Uint8Array(1);\n    arr.__proto__ = {\n      __proto__: Uint8Array.prototype,\n      foo: function foo() {\n        return 42;\n      }\n    };\n    return arr.foo() === 42 && // typed array instances can be augmented\n    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction kMaxLength() {\n  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n}\n\nfunction createBuffer(that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length');\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n\n    that.length = length;\n  }\n\n  return that;\n}\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\n\nfunction Buffer(arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length);\n  } // Common case.\n\n\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error('If encoding is specified then the first argument must be a string');\n    }\n\n    return allocUnsafe(this, arg);\n  }\n\n  return from(this, arg, encodingOrOffset, length);\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n// TODO: Legacy, not needed anymore. Remove in next major version.\n\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr;\n};\n\nfunction from(that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length);\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset);\n  }\n\n  return fromObject(that, value);\n}\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\n\n\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length);\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n\n  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    });\n  }\n}\n\nfunction assertSize(size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number');\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative');\n  }\n}\n\nfunction alloc(that, size, fill, encoding) {\n  assertSize(size);\n\n  if (size <= 0) {\n    return createBuffer(that, size);\n  }\n\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);\n  }\n\n  return createBuffer(that, size);\n}\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\n\n\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding);\n};\n\nfunction allocUnsafe(that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n\n  return that;\n}\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\n\n\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size);\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\n\n\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size);\n};\n\nfunction fromString(that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding');\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that;\n}\n\nfunction fromArrayLike(that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n\n  return that;\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds');\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds');\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n\n  return that;\n}\n\nfunction fromObject(that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that;\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that;\n  }\n\n  if (obj) {\n    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0);\n      }\n\n      return fromArrayLike(that, obj);\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n}\n\nfunction checked(length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');\n  }\n\n  return length | 0;\n}\n\nfunction SlowBuffer(length) {\n  if (+length != length) {\n    // eslint-disable-line eqeqeq\n    length = 0;\n  }\n\n  return Buffer.alloc(+length);\n}\n\nBuffer.isBuffer = function isBuffer(b) {\n  return !!(b != null && b._isBuffer);\n};\n\nBuffer.compare = function compare(a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers');\n  }\n\n  if (a === b) return 0;\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n};\n\nBuffer.isEncoding = function isEncoding(encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nBuffer.concat = function concat(list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers');\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0);\n  }\n\n  var i;\n\n  if (length === undefined) {\n    length = 0;\n\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n\n  return buffer;\n};\n\nfunction byteLength(string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength;\n  }\n\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0; // Use a for loop to avoid recursion\n\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len;\n\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length;\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2;\n\n      case 'hex':\n        return len >>> 1;\n\n      case 'base64':\n        return base64ToBytes(string).length;\n\n      default:\n        if (loweredCase) return utf8ToBytes(string).length; // assume utf8\n\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\nBuffer.byteLength = byteLength;\n\nfunction slowToString(encoding, start, end) {\n  var loweredCase = false; // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\n  if (start === undefined || start < 0) {\n    start = 0;\n  } // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n\n\n  if (start > this.length) {\n    return '';\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return '';\n  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\n\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return '';\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end);\n\n      case 'ascii':\n        return asciiSlice(this, start, end);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end);\n\n      case 'base64':\n        return base64Slice(this, start, end);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\n\n\nBuffer.prototype._isBuffer = true;\n\nfunction swap(b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16() {\n  var len = this.length;\n\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits');\n  }\n\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap32 = function swap32() {\n  var len = this.length;\n\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits');\n  }\n\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n\n  return this;\n};\n\nBuffer.prototype.swap64 = function swap64() {\n  var len = this.length;\n\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits');\n  }\n\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n\n  return this;\n};\n\nBuffer.prototype.toString = function toString() {\n  var length = this.length | 0;\n  if (length === 0) return '';\n  if (arguments.length === 0) return utf8Slice(this, 0, length);\n  return slowToString.apply(this, arguments);\n};\n\nBuffer.prototype.equals = function equals(b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n  if (this === b) return true;\n  return Buffer.compare(this, b) === 0;\n};\n\nBuffer.prototype.inspect = function inspect() {\n  var str = '';\n  var max = exports.INSPECT_MAX_BYTES;\n\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n\n  return '<Buffer ' + str + '>';\n};\n\nBuffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer');\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index');\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0;\n  }\n\n  if (thisStart >= thisEnd) {\n    return -1;\n  }\n\n  if (start >= end) {\n    return 1;\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n  if (this === target) return 0;\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break;\n    }\n  }\n\n  if (x < y) return -1;\n  if (y < x) return 1;\n  return 0;\n}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\n\n\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1; // Normalize byteOffset\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n\n  byteOffset = +byteOffset; // Coerce to Number.\n\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : buffer.length - 1;\n  } // Normalize byteOffset: negative offsets start from the end of the buffer\n\n\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1;else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;else return -1;\n  } // Normalize val\n\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  } // Finally, search either indexOf (if dir is true) or lastIndexOf\n\n\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1;\n    }\n\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n\n    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n      }\n    }\n\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n  }\n\n  throw new TypeError('val must be string, number or Buffer');\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n\n    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read(buf, i) {\n    if (indexSize === 1) {\n      return buf[i];\n    } else {\n      return buf.readUInt16BE(i * indexSize);\n    }\n  }\n\n  var i;\n\n  if (dir) {\n    var foundIndex = -1;\n\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break;\n        }\n      }\n\n      if (found) return i;\n    }\n  }\n\n  return -1;\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1;\n};\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n};\n\nfunction hexWrite(buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n\n    if (length > remaining) {\n      length = remaining;\n    }\n  } // must be an even number of digits\n\n\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i;\n    buf[offset + i] = parsed;\n  }\n\n  return i;\n}\n\nfunction utf8Write(buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length);\n}\n\nfunction latin1Write(buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length);\n}\n\nfunction base64Write(buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length);\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0; // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0; // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    } // legacy write(string, encoding, offset, length) - remove in v0.13\n\n  } else {\n    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds');\n  }\n\n  if (!encoding) encoding = 'utf8';\n  var loweredCase = false;\n\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length);\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length);\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length);\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length);\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length);\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length);\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON() {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  };\n};\n\nfunction base64Slice(buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf);\n  } else {\n    return base64.fromByteArray(buf.slice(start, end));\n  }\n}\n\nfunction utf8Slice(buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n  var i = start;\n\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[i + 1];\n\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n} // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\n\n\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n  } // Decode in chunks to avoid \"call stack size exceeded\".\n\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nfunction asciiSlice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n\n  return ret;\n}\n\nfunction latin1Slice(buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n\n  return ret;\n}\n\nfunction hexSlice(buf, start, end) {\n  var len = buf.length;\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n  var out = '';\n\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n\n  return out;\n}\n\nfunction utf16leSlice(buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n\n  return res;\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n  var newBuf;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf;\n};\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\n\n\nfunction checkOffset(offset, ext, length) {\n  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val;\n};\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset];\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | this[offset + 1] << 8;\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] << 8 | this[offset + 1];\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n};\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n};\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return this[offset];\n  return (0xff - this[offset] + 1) * -1;\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | this[offset + 1] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | this[offset] << 8;\n  return val & 0x8000 ? val | 0xFFFF0000 : val;\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, true, 23, 4);\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return ieee754.read(this, offset, false, 23, 4);\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, true, 52, 8);\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return ieee754.read(this, offset, false, 52, 8);\n};\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n};\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = value & 0xff;\n  return offset + 1;\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 0xff;\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n\n  return offset + 2;\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value & 0xff;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n\n  return offset + 4;\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 0xff;\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n\n  return offset + 4;\n};\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range');\n  if (offset < 0) throw new RangeError('Index out of range');\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4;\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert);\n};\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n  }\n\n  ieee754.write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8;\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert);\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert);\n}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\n\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done\n\n  if (end === start) return 0;\n  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions\n\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds');\n  }\n\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?\n\n  if (end > this.length) end = this.length;\n\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n  }\n\n  return len;\n}; // Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\n\n\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n\n      if (code < 256) {\n        val = code;\n      }\n    }\n\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string');\n    }\n\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding);\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  } // Invalid ranges are not set to a default, so can range check early.\n\n\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index');\n  }\n\n  if (end <= start) {\n    return this;\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n  if (!val) val = 0;\n  var i;\n\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this;\n}; // HELPER FUNCTIONS\n// ================\n\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean(str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''\n\n  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n\n  return str;\n}\n\nfunction stringtrim(str) {\n  if (str.trim) return str.trim();\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n\nfunction toHex(n) {\n  if (n < 16) return '0' + n.toString(16);\n  return n.toString(16);\n}\n\nfunction utf8ToBytes(string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i); // is surrogate component\n\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue;\n        } // valid lead\n\n\n        leadSurrogate = codePoint;\n        continue;\n      } // 2 leads in a row\n\n\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue;\n      } // valid surrogate pair\n\n\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null; // encode utf8\n\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction asciiToBytes(str) {\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n\n  return byteArray;\n}\n\nfunction utf16leToBytes(str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break;\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray;\n}\n\nfunction base64ToBytes(str) {\n  return base64.toByteArray(base64clean(str));\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if (i + offset >= dst.length || i >= src.length) break;\n    dst[i + offset] = src[i];\n  }\n\n  return i;\n}\n\nfunction isnan(val) {\n  return val !== val; // eslint-disable-line no-self-compare\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzP2I2MzkiXSwibmFtZXMiOlsiYmFzZTY0IiwicmVxdWlyZSIsImllZWU3NTQiLCJpc0FycmF5IiwiZXhwb3J0cyIsIkJ1ZmZlciIsIlNsb3dCdWZmZXIiLCJJTlNQRUNUX01BWF9CWVRFUyIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJnbG9iYWwiLCJ1bmRlZmluZWQiLCJ0eXBlZEFycmF5U3VwcG9ydCIsImtNYXhMZW5ndGgiLCJhcnIiLCJVaW50OEFycmF5IiwiX19wcm90b19fIiwicHJvdG90eXBlIiwiZm9vIiwic3ViYXJyYXkiLCJieXRlTGVuZ3RoIiwiZSIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJsZW5ndGgiLCJSYW5nZUVycm9yIiwiYXJnIiwiZW5jb2RpbmdPck9mZnNldCIsIkVycm9yIiwiYWxsb2NVbnNhZmUiLCJmcm9tIiwicG9vbFNpemUiLCJfYXVnbWVudCIsInZhbHVlIiwiVHlwZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJmcm9tQXJyYXlCdWZmZXIiLCJmcm9tU3RyaW5nIiwiZnJvbU9iamVjdCIsIlN5bWJvbCIsInNwZWNpZXMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImFzc2VydFNpemUiLCJzaXplIiwiYWxsb2MiLCJmaWxsIiwiZW5jb2RpbmciLCJjaGVja2VkIiwiaSIsImFsbG9jVW5zYWZlU2xvdyIsInN0cmluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJ3cml0ZSIsInNsaWNlIiwiZnJvbUFycmF5TGlrZSIsImFycmF5IiwiYnl0ZU9mZnNldCIsIm9iaiIsImlzQnVmZmVyIiwibGVuIiwiY29weSIsImJ1ZmZlciIsImlzbmFuIiwidHlwZSIsImRhdGEiLCJ0b1N0cmluZyIsImIiLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwiYSIsIngiLCJ5IiwiTWF0aCIsIm1pbiIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwiY29uY2F0IiwibGlzdCIsInBvcyIsImJ1ZiIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwic3RhcnQiLCJlbmQiLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsIm4iLCJtIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcXVhbHMiLCJpbnNwZWN0Iiwic3RyIiwibWF4IiwibWF0Y2giLCJqb2luIiwidGFyZ2V0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwidmFsIiwiZGlyIiwiaXNOYU4iLCJhcnJheUluZGV4T2YiLCJpbmRleE9mIiwiY2FsbCIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJpbmNsdWRlcyIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1dGYxNmxlVG9CeXRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiQXJyYXkiLCJfYXJyIiwiZnJvbUJ5dGVBcnJheSIsInJlcyIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJwdXNoIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJjb2RlUG9pbnRzIiwiZnJvbUNoYXJDb2RlIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsIm5ld0J1ZiIsInNsaWNlTGVuIiwiY2hlY2tPZmZzZXQiLCJleHQiLCJyZWFkVUludExFIiwibm9Bc3NlcnQiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJjaGVja0ludCIsIndyaXRlVUludExFIiwibWF4Qnl0ZXMiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJvYmplY3RXcml0ZVVJbnQzMiIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJzZXQiLCJjb2RlIiwiY2hhckNvZGVBdCIsIklOVkFMSURfQkFTRTY0X1JFIiwiYmFzZTY0Y2xlYW4iLCJzdHJpbmd0cmltIiwicmVwbGFjZSIsInRyaW0iLCJ1bml0cyIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsImJ5dGVBcnJheSIsImMiLCJoaSIsImxvIiwidG9CeXRlQXJyYXkiLCJzcmMiLCJkc3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBOztBQUVBLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxvREFBRCxDQUFwQjs7QUFDQSxJQUFJQyxPQUFPLEdBQUdELG1CQUFPLENBQUMsZ0RBQUQsQ0FBckI7O0FBQ0EsSUFBSUUsT0FBTyxHQUFHRixtQkFBTyxDQUFDLGdEQUFELENBQXJCOztBQUVBRyxPQUFPLENBQUNDLE1BQVIsR0FBaUJBLE1BQWpCO0FBQ0FELE9BQU8sQ0FBQ0UsVUFBUixHQUFxQkEsVUFBckI7QUFDQUYsT0FBTyxDQUFDRyxpQkFBUixHQUE0QixFQUE1QjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUYsTUFBTSxDQUFDRyxtQkFBUCxHQUE2QkMsTUFBTSxDQUFDRCxtQkFBUCxLQUErQkUsU0FBL0IsR0FDekJELE1BQU0sQ0FBQ0QsbUJBRGtCLEdBRXpCRyxpQkFBaUIsRUFGckI7QUFJQTtBQUNBO0FBQ0E7O0FBQ0FQLE9BQU8sQ0FBQ1EsVUFBUixHQUFxQkEsVUFBVSxFQUEvQjs7QUFFQSxTQUFTRCxpQkFBVCxHQUE4QjtBQUM1QixNQUFJO0FBQ0YsUUFBSUUsR0FBRyxHQUFHLElBQUlDLFVBQUosQ0FBZSxDQUFmLENBQVY7QUFDQUQsT0FBRyxDQUFDRSxTQUFKLEdBQWdCO0FBQUNBLGVBQVMsRUFBRUQsVUFBVSxDQUFDRSxTQUF2QjtBQUFrQ0MsU0FBRyxFQUFFLGVBQVk7QUFBRSxlQUFPLEVBQVA7QUFBVztBQUFoRSxLQUFoQjtBQUNBLFdBQU9KLEdBQUcsQ0FBQ0ksR0FBSixPQUFjLEVBQWQsSUFBb0I7QUFDdkIs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R0FBRyxHQUFUO0FBQ0FELGFBQVMsQ0FBQzFFLElBQVYsQ0FBZTZFLEVBQWY7QUFDQUgsYUFBUyxDQUFDMUUsSUFBVixDQUFlNEUsRUFBZjtBQUNEOztBQUVELFNBQU9GLFNBQVA7QUFDRDs7QUFFRCxTQUFTckosYUFBVCxDQUF3Qm9CLEdBQXhCLEVBQTZCO0FBQzNCLFNBQU96RyxNQUFNLENBQUM4TyxXQUFQLENBQW1CWCxXQUFXLENBQUMxSCxHQUFELENBQTlCLENBQVA7QUFDRDs7QUFFRCxTQUFTbUMsVUFBVCxDQUFxQm1HLEdBQXJCLEVBQTBCQyxHQUExQixFQUErQjVHLE1BQS9CLEVBQXVDN0csTUFBdkMsRUFBK0M7QUFDN0MsT0FBSyxJQUFJMEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzFCLE1BQXBCLEVBQTRCLEVBQUUwQixDQUE5QixFQUFpQztBQUMvQixRQUFLQSxDQUFDLEdBQUdtRixNQUFKLElBQWM0RyxHQUFHLENBQUN6TixNQUFuQixJQUErQjBCLENBQUMsSUFBSThMLEdBQUcsQ0FBQ3hOLE1BQTVDLEVBQXFEO0FBQ3JEeU4sT0FBRyxDQUFDL0wsQ0FBQyxHQUFHbUYsTUFBTCxDQUFILEdBQWtCMkcsR0FBRyxDQUFDOUwsQ0FBRCxDQUFyQjtBQUNEOztBQUNELFNBQU9BLENBQVA7QUFDRDs7QUFFRCxTQUFTZSxLQUFULENBQWdCbUQsR0FBaEIsRUFBcUI7QUFDbkIsU0FBT0EsR0FBRyxLQUFLQSxHQUFmLENBRG1CLENBQ0E7QUFDcEIsQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/builtin-status-codes/browser.js":
/*!******************************************************!*\
  !*** ./node_modules/builtin-status-codes/browser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Unordered Collection\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVpbHRpbi1zdGF0dXMtY29kZXMvYnJvd3Nlci5qcz84YzA1Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZixTQUFPLFVBRFE7QUFFZixTQUFPLHFCQUZRO0FBR2YsU0FBTyxZQUhRO0FBSWYsU0FBTyxJQUpRO0FBS2YsU0FBTyxTQUxRO0FBTWYsU0FBTyxVQU5RO0FBT2YsU0FBTywrQkFQUTtBQVFmLFNBQU8sWUFSUTtBQVNmLFNBQU8sZUFUUTtBQVVmLFNBQU8saUJBVlE7QUFXZixTQUFPLGNBWFE7QUFZZixTQUFPLGtCQVpRO0FBYWYsU0FBTyxTQWJRO0FBY2YsU0FBTyxrQkFkUTtBQWVmLFNBQU8sbUJBZlE7QUFnQmYsU0FBTyxPQWhCUTtBQWlCZixTQUFPLFdBakJRO0FBa0JmLFNBQU8sY0FsQlE7QUFtQmYsU0FBTyxXQW5CUTtBQW9CZixTQUFPLG9CQXBCUTtBQXFCZixTQUFPLG9CQXJCUTtBQXNCZixTQUFPLGFBdEJRO0FBdUJmLFNBQU8sY0F2QlE7QUF3QmYsU0FBTyxrQkF4QlE7QUF5QmYsU0FBTyxXQXpCUTtBQTBCZixTQUFPLFdBMUJRO0FBMkJmLFNBQU8sb0JBM0JRO0FBNEJmLFNBQU8sZ0JBNUJRO0FBNkJmLFNBQU8sK0JBN0JRO0FBOEJmLFNBQU8saUJBOUJRO0FBK0JmLFNBQU8sVUEvQlE7QUFnQ2YsU0FBTyxNQWhDUTtBQWlDZixTQUFPLGlCQWpDUTtBQWtDZixTQUFPLHFCQWxDUTtBQW1DZixTQUFPLG1CQW5DUTtBQW9DZixTQUFPLGNBcENRO0FBcUNmLFNBQU8sd0JBckNRO0FBc0NmLFNBQU8sdUJBdENRO0FBdUNmLFNBQU8sb0JBdkNRO0FBd0NmLFNBQU8sY0F4Q1E7QUF5Q2YsU0FBTyxxQkF6Q1E7QUEwQ2YsU0FBTyxzQkExQ1E7QUEyQ2YsU0FBTyxRQTNDUTtBQTRDZixTQUFPLG1CQTVDUTtBQTZDZixTQUFPLHNCQTdDUTtBQThDZixTQUFPLGtCQTlDUTtBQStDZixTQUFPLHVCQS9DUTtBQWdEZixTQUFPLG1CQWhEUTtBQWlEZixTQUFPLGlDQWpEUTtBQWtEZixTQUFPLCtCQWxEUTtBQW1EZixTQUFPLHVCQW5EUTtBQW9EZixTQUFPLGlCQXBEUTtBQXFEZixTQUFPLGFBckRRO0FBc0RmLFNBQU8scUJBdERRO0FBdURmLFNBQU8saUJBdkRRO0FBd0RmLFNBQU8sNEJBeERRO0FBeURmLFNBQU8seUJBekRRO0FBMERmLFNBQU8sc0JBMURRO0FBMkRmLFNBQU8sZUEzRFE7QUE0RGYsU0FBTywwQkE1RFE7QUE2RGYsU0FBTyxjQTdEUTtBQThEZixTQUFPO0FBOURRLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2J1aWx0aW4tc3RhdHVzLWNvZGVzL2Jyb3dzZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCIxMDBcIjogXCJDb250aW51ZVwiLFxuICBcIjEwMVwiOiBcIlN3aXRjaGluZyBQcm90b2NvbHNcIixcbiAgXCIxMDJcIjogXCJQcm9jZXNzaW5nXCIsXG4gIFwiMjAwXCI6IFwiT0tcIixcbiAgXCIyMDFcIjogXCJDcmVhdGVkXCIsXG4gIFwiMjAyXCI6IFwiQWNjZXB0ZWRcIixcbiAgXCIyMDNcIjogXCJOb24tQXV0aG9yaXRhdGl2ZSBJbmZvcm1hdGlvblwiLFxuICBcIjIwNFwiOiBcIk5vIENvbnRlbnRcIixcbiAgXCIyMDVcIjogXCJSZXNldCBDb250ZW50XCIsXG4gIFwiMjA2XCI6IFwiUGFydGlhbCBDb250ZW50XCIsXG4gIFwiMjA3XCI6IFwiTXVsdGktU3RhdHVzXCIsXG4gIFwiMjA4XCI6IFwiQWxyZWFkeSBSZXBvcnRlZFwiLFxuICBcIjIyNlwiOiBcIklNIFVzZWRcIixcbiAgXCIzMDBcIjogXCJNdWx0aXBsZSBDaG9pY2VzXCIsXG4gIFwiMzAxXCI6IFwiTW92ZWQgUGVybWFuZW50bHlcIixcbiAgXCIzMDJcIjogXCJGb3VuZFwiLFxuICBcIjMwM1wiOiBcIlNlZSBPdGhlclwiLFxuICBcIjMwNFwiOiBcIk5vdCBNb2RpZmllZFwiLFxuICBcIjMwNVwiOiBcIlVzZSBQcm94eVwiLFxuICBcIjMwN1wiOiBcIlRlbXBvcmFyeSBSZWRpcmVjdFwiLFxuICBcIjMwOFwiOiBcIlBlcm1hbmVudCBSZWRpcmVjdFwiLFxuICBcIjQwMFwiOiBcIkJhZCBSZXF1ZXN0XCIsXG4gIFwiNDAxXCI6IFwiVW5hdXRob3JpemVkXCIsXG4gIFwiNDAyXCI6IFwiUGF5bWVudCBSZXF1aXJlZFwiLFxuICBcIjQwM1wiOiBcIkZvcmJpZGRlblwiLFxuICBcIjQwNFwiOiBcIk5vdCBGb3VuZFwiLFxuICBcIjQwNVwiOiBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiLFxuICBcIjQwNlwiOiBcIk5vdCBBY2NlcHRhYmxlXCIsXG4gIFwiNDA3XCI6IFwiUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWRcIixcbiAgXCI0MDhcIjogXCJSZXF1ZXN0IFRpbWVvdXRcIixcbiAgXCI0MDlcIjogXCJDb25mbGljdFwiLFxuICBcIjQxMFwiOiBcIkdvbmVcIixcbiAgXCI0MTFcIjogXCJMZW5ndGggUmVxdWlyZWRcIixcbiAgXCI0MTJcIjogXCJQcmVjb25kaXRpb24gRmFpbGVkXCIsXG4gIFwiNDEzXCI6IFwiUGF5bG9hZCBUb28gTGFyZ2VcIixcbiAgXCI0MTRcIjogXCJVUkkgVG9vIExvbmdcIixcbiAgXCI0MTVcIjogXCJVbnN1cHBvcnRlZCBNZWRpYSBUeXBlXCIsXG4gIFwiNDE2XCI6IFwiUmFuZ2UgTm90IFNhdGlzZmlhYmxlXCIsXG4gIFwiNDE3XCI6IFwiRXhwZWN0YXRpb24gRmFpbGVkXCIsXG4gIFwiNDE4XCI6IFwiSSdtIGEgdGVhcG90XCIsXG4gIFwiNDIxXCI6IFwiTWlzZGlyZWN0ZWQgUmVxdWVzdFwiLFxuICBcIjQyMlwiOiBcIlVucHJvY2Vzc2FibGUgRW50aXR5XCIsXG4gIFwiNDIzXCI6IFwiTG9ja2VkXCIsXG4gIFwiNDI0XCI6IFwiRmFpbGVkIERlcGVuZGVuY3lcIixcbiAgXCI0MjVcIjogXCJVbm9yZGVyZWQgQ29sbGVjdGlvblwiLFxuICBcIjQyNlwiOiBcIlVwZ3JhZGUgUmVxdWlyZWRcIixcbiAgXCI0MjhcIjogXCJQcmVjb25kaXRpb24gUmVxdWlyZWRcIixcbiAgXCI0MjlcIjogXCJUb28gTWFueSBSZXF1ZXN0c1wiLFxuICBcIjQzMVwiOiBcIlJlcXVlc3QgSGVhZGVyIEZpZWxkcyBUb28gTGFyZ2VcIixcbiAgXCI0NTFcIjogXCJVbmF2YWlsYWJsZSBGb3IgTGVnYWwgUmVhc29uc1wiLFxuICBcIjUwMFwiOiBcIkludGVybmFsIFNlcnZlciBFcnJvclwiLFxuICBcIjUwMVwiOiBcIk5vdCBJbXBsZW1lbnRlZFwiLFxuICBcIjUwMlwiOiBcIkJhZCBHYXRld2F5XCIsXG4gIFwiNTAzXCI6IFwiU2VydmljZSBVbmF2YWlsYWJsZVwiLFxuICBcIjUwNFwiOiBcIkdhdGV3YXkgVGltZW91dFwiLFxuICBcIjUwNVwiOiBcIkhUVFAgVmVyc2lvbiBOb3QgU3VwcG9ydGVkXCIsXG4gIFwiNTA2XCI6IFwiVmFyaWFudCBBbHNvIE5lZ290aWF0ZXNcIixcbiAgXCI1MDdcIjogXCJJbnN1ZmZpY2llbnQgU3RvcmFnZVwiLFxuICBcIjUwOFwiOiBcIkxvb3AgRGV0ZWN0ZWRcIixcbiAgXCI1MDlcIjogXCJCYW5kd2lkdGggTGltaXQgRXhjZWVkZWRcIixcbiAgXCI1MTBcIjogXCJOb3QgRXh0ZW5kZWRcIixcbiAgXCI1MTFcIjogXCJOZXR3b3JrIEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCJcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/builtin-status-codes/browser.js\n");

/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n\n  return objectToString(arg) === '[object Array]';\n}\n\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return _typeof(arg) === 'symbol';\n}\n\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\n\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return _typeof(arg) === 'object' && arg !== null;\n}\n\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\n\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return objectToString(e) === '[object Error]' || e instanceof Error;\n}\n\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol\n  typeof arg === 'undefined';\n}\n\nexports.isPrimitive = isPrimitive;\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzPzNhN2MiXSwibmFtZXMiOlsiaXNBcnJheSIsImFyZyIsIkFycmF5Iiwib2JqZWN0VG9TdHJpbmciLCJleHBvcnRzIiwiaXNCb29sZWFuIiwiaXNOdWxsIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc051bWJlciIsImlzU3RyaW5nIiwiaXNTeW1ib2wiLCJpc1VuZGVmaW5lZCIsImlzUmVnRXhwIiwicmUiLCJpc09iamVjdCIsImlzRGF0ZSIsImQiLCJpc0Vycm9yIiwiZSIsIkVycm9yIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiaXNCdWZmZXIiLCJCdWZmZXIiLCJvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUEsU0FBU0EsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0I7QUFDcEIsTUFBSUMsS0FBSyxDQUFDRixPQUFWLEVBQW1CO0FBQ2pCLFdBQU9FLEtBQUssQ0FBQ0YsT0FBTixDQUFjQyxHQUFkLENBQVA7QUFDRDs7QUFDRCxTQUFPRSxjQUFjLENBQUNGLEdBQUQsQ0FBZCxLQUF3QixnQkFBL0I7QUFDRDs7QUFDREcsT0FBTyxDQUFDSixPQUFSLEdBQWtCQSxPQUFsQjs7QUFFQSxTQUFTSyxTQUFULENBQW1CSixHQUFuQixFQUF3QjtBQUN0QixTQUFPLE9BQU9BLEdBQVAsS0FBZSxTQUF0QjtBQUNEOztBQUNERyxPQUFPLENBQUNDLFNBQVIsR0FBb0JBLFNBQXBCOztBQUVBLFNBQVNDLE1BQVQsQ0FBZ0JMLEdBQWhCLEVBQXFCO0FBQ25CLFNBQU9BLEdBQUcsS0FBSyxJQUFmO0FBQ0Q7O0FBQ0RHLE9BQU8sQ0FBQ0UsTUFBUixHQUFpQkEsTUFBakI7O0FBRUEsU0FBU0MsaUJBQVQsQ0FBMkJOLEdBQTNCLEVBQWdDO0FBQzlCLFNBQU9BLEdBQUcsSUFBSSxJQUFkO0FBQ0Q7O0FBQ0RHLE9BQU8sQ0FBQ0csaUJBQVIsR0FBNEJBLGlCQUE1Qjs7QUFFQSxTQUFTQyxRQUFULENBQWtCUCxHQUFsQixFQUF1QjtBQUNyQixTQUFPLE9BQU9BLEdBQVAsS0FBZSxRQUF0QjtBQUNEOztBQUNERyxPQUFPLENBQUNJLFFBQVIsR0FBbUJBLFFBQW5COztBQUVBLFNBQVNDLFFBQVQsQ0FBa0JSLEdBQWxCLEVBQXVCO0FBQ3JCLFNBQU8sT0FBT0EsR0FBUCxLQUFlLFFBQXRCO0FBQ0Q7O0FBQ0RHLE9BQU8sQ0FBQ0ssUUFBUixHQUFtQkEsUUFBbkI7O0FBRUEsU0FBU0MsUUFBVCxDQUFrQlQsR0FBbEIsRUFBdUI7QUFDckIsU0FBTyxRQUFPQSxHQUFQLE1BQWUsUUFBdEI7QUFDRDs7QUFDREcsT0FBTyxDQUFDTSxRQUFSLEdBQW1CQSxRQUFuQjs7QUFFQSxTQUFTQyxXQUFULENBQXFCVixHQUFyQixFQUEwQjtBQUN4QixTQUFPQSxHQUFHLEtBQUssS0FBSyxDQUFwQjtBQUNEOztBQUNERyxPQUFPLENBQUNPLFdBQVIsR0FBc0JBLFdBQXRCOztBQUVBLFNBQVNDLFFBQVQsQ0FBa0JDLEVBQWxCLEVBQXNCO0FBQ3BCLFNBQU9WLGNBQWMsQ0FBQ1UsRUFBRCxDQUFkLEtBQXVCLGlCQUE5QjtBQUNEOztBQUNEVCxPQUFPLENBQUNRLFFBQVIsR0FBbUJBLFFBQW5COztBQUVBLFNBQVNFLFFBQVQsQ0FBa0JiLEdBQWxCLEVBQXVCO0FBQ3JCLFNBQU8sUUFBT0EsR0FBUCxNQUFlLFFBQWYsSUFBMkJBLEdBQUcsS0FBSyxJQUExQztBQUNEOztBQUNERyxPQUFPLENBQUNVLFFBQVIsR0FBbUJBLFFBQW5COztBQUVBLFNBQVNDLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLFNBQU9iLGNBQWMsQ0FBQ2EsQ0FBRCxDQUFkLEtBQXNCLGVBQTdCO0FBQ0Q7O0FBQ0RaLE9BQU8sQ0FBQ1csTUFBUixHQUFpQkEsTUFBakI7O0FBRUEsU0FBU0UsT0FBVCxDQUFpQkMsQ0FBakIsRUFBb0I7QUFDbEIsU0FBUWYsY0FBYyxDQUFDZSxDQUFELENBQWQsS0FBc0IsZ0JBQXRCLElBQTBDQSxDQUFDLFlBQVlDLEtBQS9EO0FBQ0Q7O0FBQ0RmLE9BQU8sQ0FBQ2EsT0FBUixHQUFrQkEsT0FBbEI7O0FBRUEsU0FBU0csVUFBVCxDQUFvQm5CLEdBQXBCLEVBQXlCO0FBQ3ZCLFNBQU8sT0FBT0EsR0FBUCxLQUFlLFVBQXRCO0FBQ0Q7O0FBQ0RHLE9BQU8sQ0FBQ2dCLFVBQVIsR0FBcUJBLFVBQXJCOztBQUVBLFNBQVNDLFdBQVQsQ0FBcUJwQixHQUFyQixFQUEwQjtBQUN4QixTQUFPQSxHQUFHLEtBQUssSUFBUixJQUNBLE9BQU9BLEdBQVAsS0FBZSxTQURmLElBRUEsT0FBT0EsR0FBUCxLQUFlLFFBRmYsSUFHQSxPQUFPQSxHQUFQLEtBQWUsUUFIZixJQUlBLFFBQU9BLEdBQVAsTUFBZSxRQUpmLElBSTRCO0FBQzVCLFNBQU9BLEdBQVAsS0FBZSxXQUx0QjtBQU1EOztBQUNERyxPQUFPLENBQUNpQixXQUFSLEdBQXNCQSxXQUF0QjtBQUVBakIsT0FBTyxDQUFDa0IsUUFBUixHQUFtQkMsTUFBTSxDQUFDRCxRQUExQjs7QUFFQSxTQUFTbkIsY0FBVCxDQUF3QnFCLENBQXhCLEVBQTJCO0FBQ3pCLFNBQU9DLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCSixDQUEvQixDQUFQO0FBQ0QsQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/core-util-is/lib/util.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/@privacybydesign/irma-css/dist/irma.min.css":
/*!********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/@privacybydesign/irma-css/dist/irma.min.css ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, \".irma-web-center-child{background-color:inherit;box-sizing:border-box;margin:0;padding:0;width:100%;height:100%;display:flex;align-items:center;justify-content:center}.irma-web-popup{background-color:inherit;box-sizing:border-box;margin:0;padding:0;position:fixed;top:0;left:0;right:0;bottom:0;z-index:2000;background-color:rgba(0,0,0,0.5);opacity:0;visibility:hidden;overflow:auto;display:flex;align-items:center;justify-content:center}.irma-web-popup>*{margin:auto 0 !important;transform:scale(0.7)}.irma-web-popup.irma-web-popup-active{opacity:1;visibility:visible}.irma-web-popup.irma-web-popup-active>*{transform:scale(1)}.irma-web-form{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:flex;flex-direction:column;width:80%;min-width:262px;max-width:400px;height:480px;background-color:#004c92;border:1px solid white;border-radius:10px}@media screen and (max-width:768px){.irma-web-form{min-height:440px}}.irma-web-form .irma-web-header{background-color:inherit;box-sizing:border-box;margin:0;padding:0;position:relative;flex:0 0 auto;padding:2rem;margin:0 1rem;overflow:hidden;text-align:center;border-top-left-radius:9px;border-top-right-radius:9px}@media screen and (max-width:768px){.irma-web-form .irma-web-header{padding:1em}}.irma-web-form .irma-web-header p{background-color:inherit;box-sizing:border-box;margin:0;padding:0;font-family:\\\"Roboto\\\",Tahoma,Arial,sans-serif;font-weight:500;font-size:20px;color:white}@media screen and (max-width:768px){.irma-web-form .irma-web-header p{font-family:\\\"Roboto\\\",Tahoma,Arial,sans-serif;font-weight:500;font-size:16px;color:white}}.irma-web-form .irma-web-header p i.irma-web-logo{width:70px;height:55px}.irma-web-form .irma-web-header .irma-web-helper{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:flex;align-items:center;justify-content:center;position:absolute;bottom:1rem;left:0;right:0;height:calc(100% - 2rem);background-color:#47679e;border-top-left-radius:6px;border-top-right-radius:6px;border-bottom-left-radius:1px;border-bottom-right-radius:1px}.irma-web-form .irma-web-header .irma-web-helper p,.irma-web-form .irma-web-header .irma-web-helper a{font-family:\\\"Roboto\\\",Tahoma,Arial,sans-serif;font-weight:300;font-size:13px;color:white}.irma-web-form .irma-web-header .irma-web-helper p{margin:1em;text-align:center}.irma-web-form .irma-web-header>*:not(.irma-web-helper):not(.irma-web-close){transform:translateX(0);-webkit-transition:-webkit-transform .4s ease;-webkit-transition:transform .4s ease;transition:transform .4s ease}.irma-web-form .irma-web-header .irma-web-helper{transform:translateX(120%);-webkit-transition:-webkit-transform .4s ease;-webkit-transition:transform .4s ease;transition:transform .4s ease}.irma-web-form .irma-web-header.irma-web-show-helper>*:not(.irma-web-helper):not(.irma-web-close){transform:translateX(-120%)}.irma-web-form .irma-web-header.irma-web-show-helper .irma-web-helper{transform:translateX(0)}.irma-web-form .irma-web-header .irma-web-close{background-color:inherit;box-sizing:border-box;margin:0;padding:0;position:absolute;top:1rem;right:0;width:26px;height:26px;background-color:white;border-radius:50%;border:0;cursor:pointer}.irma-web-form .irma-web-header .irma-web-close:before,.irma-web-form .irma-web-header .irma-web-close:after{content:\\\" \\\";display:block;position:absolute;top:5.2px;left:10.92px;width:4.16px;height:15.6px;background-color:#004c92;transform:rotateZ(45deg);transform-origin:center}.irma-web-form .irma-web-header .irma-web-close:after{transform:rotateZ(-45deg)}.irma-web-form .irma-web-content{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:flex;align-items:center;justify-content:center;flex:1 1 auto;margin:0 1rem 1rem 1rem;background-color:white;border-bottom-right-radius:6px;border-bottom-left-radius:6px;border-top-left-radius:1px;border-top-right-radius:1px}.irma-web-form .irma-web-content .irma-web-centered{background-color:inherit;box-sizing:border-box;margin:0;padding:0;height:auto;text-align:center}.irma-web-form .irma-web-content .irma-web-centered img,.irma-web-form .irma-web-content .irma-web-centered canvas{cursor:none}.irma-web-form .irma-web-content p{background-color:inherit;box-sizing:border-box;margin:0;padding:0;font-family:\\\"Roboto\\\",Tahoma,Arial,sans-serif;font-weight:300;font-size:15px;color:#7f7f7f;margin:1em 4em}@media screen and (max-width:768px){.irma-web-form .irma-web-content p{margin:1em 2em}}.irma-web-form .irma-web-content p:first-child{margin-top:0}.irma-web-form .irma-web-content p:last-child{margin-bottom:0}.irma-web-form .irma-web-content a{background-color:inherit;box-sizing:border-box;margin:0;padding:0;font-family:\\\"Roboto\\\",Tahoma,Arial,sans-serif;font-weight:300;font-size:15px;color:#7f7f7f;text-decoration:underline;cursor:pointer}.irma-web-form .irma-web-content a:hover{color:#004c92}.irma-web-button{background-color:inherit;box-sizing:border-box;margin:0;padding:0;font-family:\\\"Roboto\\\",Tahoma,Arial,sans-serif;font-weight:300;font-size:14px;color:#7f7f7f;display:inline-block;padding:1.5em 4em;background-color:#004c92;border:1px solid #00315f;border-radius:10px;box-shadow:1px 1px 3px rgba(0,0,0,0.5);text-decoration:none;color:white;font-weight:500;cursor:pointer;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.irma-web-button:active{transform:scale3d(0.99,0.99,1);transform-origin:center}.irma-web-button:focus{outline:0}.irma-web-logo{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:inline-block;vertical-align:middle;background-image:url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1522.71 1381.02'%3E%3Cdefs%3E%3CclipPath id='a'%3E%3Cpath fill='none' d='M1366.53 814.27l-101.22-301.78 67.32-3.08 102.1 293.27V148.6H89.91v1107.11h1344.82V818.75l-68.2-4.48z'/%3E%3C/clipPath%3E%3C/defs%3E%3Cg data-name='Layer 2'%3E%3Cg data-name='Layer 1'%3E%3Cg data-name='Rounded Rectangle 1'%3E%3Cpath d='M382 1351.23c-35.92 0-67.3-21.45-78.11-53.37L114 736.23c-14.22-42 11-88.67 56.24-104l903.9-306.31a92.59 92.59 0 0129.72-4.94c35.92 0 67.32 21.45 78.12 53.39L1371.83 936c14.22 42-11 88.68-56.23 104l-903.92 306.3a92.27 92.27 0 01-29.72 4.94z' fill='%23d44454'/%3E%3Cpath d='M1103.83 350.79c22.61 0 43 12.62 49.87 33.12l189.89 561.62c9 26.5-7.85 56.15-37.58 66.23l-903.9 306.3a62.81 62.81 0 01-20.16 3.36c-22.6 0-42.94-12.62-49.88-33.12L142.2 726.68c-9-26.5 7.86-56.16 37.57-66.22l903.9-306.31a62.81 62.81 0 0120.16-3.36m0-59.61a122.26 122.26 0 00-39.29 6.51L160.64 604c-60.78 20.59-94.39 84.19-74.91 141.78l189.89 561.61c14.9 44 57.64 73.63 106.35 73.63a122 122 0 0039.3-6.51l903.89-306.3c60.79-20.61 94.39-84.22 74.91-141.79l-189.9-561.6c-14.9-44.05-57.63-73.64-106.34-73.64z' fill='%23d44454'/%3E%3Cpath d='M425.74 1060.06c-35.92 0-67.3-21.45-78.11-53.38L157.75 445.06c-14.22-42 11-88.68 56.24-104l903.9-306.31a92.31 92.31 0 0129.72-4.94c35.92 0 67.32 21.45 78.12 53.38l189.88 561.62c14.22 42-11 88.67-56.23 104l-903.92 306.3a92 92 0 01-29.72 5z' fill='%23ffbb58'/%3E%3Cpath d='M1147.61 59.61c22.61 0 43 12.62 49.87 33.13l189.89 561.61c9 26.51-7.85 56.16-37.58 66.24l-903.9 306.29a62.54 62.54 0 01-20.16 3.36c-22.6 0-43-12.62-49.88-33.11L186 435.51c-9-26.51 7.86-56.16 37.57-66.23L1127.45 63a62.56 62.56 0 0120.16-3.37m0-59.61a122.26 122.26 0 00-39.29 6.51l-903.9 306.29C143.64 333.42 110 397 129.51 454.6l189.89 561.61c14.9 44 57.63 73.63 106.35 73.63a122 122 0 0039.3-6.51L1368.94 777c60.79-20.6 94.39-84.21 74.91-141.79L1254 73.64C1239.05 29.59 1196.32 0 1147.61 0z' fill='%23ffbb58'/%3E%3Cpath d='M185.21 1099.47c-35.35-6.37-62.43-33-67.4-66.39L30.63 446.67c-6.53-43.88 26.58-85.31 73.8-92.37l943.92-141a92.26 92.26 0 0130.13.41c35.35 6.37 62.44 33.06 67.4 66.4l87.19 586.4c6.53 43.87-26.58 85.31-73.81 92.38l-943.92 141a92 92 0 01-30.13-.41z' fill='%232bc194'/%3E%3Cpath d='M1073.19 243c22.25 4 40 20 43.2 41.45l87.18 586.4c4.13 27.68-17.69 53.87-48.73 58.52l-943.91 141a62.68 62.68 0 01-20.44-.27c-22.25-4-40-20-43.21-41.44L60.11 442.28c-4.13-27.67 17.7-53.87 48.73-58.5l943.92-141a62.62 62.62 0 0120.43.27m10.58-58.66a122 122 0 00-39.82-.57L100 324.82C36.56 334.3-7.8 390.93 1.15 451.05l87.18 586.4c6.85 46 43.66 82.69 91.6 91.34a122.33 122.33 0 0039.83.57l943.91-141c63.48-9.5 107.83-66.13 98.88-126.25l-87.2-586.39c-6.84-45.99-43.65-82.72-91.58-91.34z' fill='%232bc194'/%3E%3Cpath d='M446.49 1190c-35.42-6-62.76-32.43-68.06-65.71l-93.05-585.54c-7-43.81 25.72-85.57 72.87-93.1l942.46-150.46a92.86 92.86 0 0130.13.11c35.42 6 62.77 32.44 68.06 65.73l93.1 585.5c7 43.8-25.72 85.57-72.88 93.11l-942.5 150.44a92 92 0 01-30.13-.11z' fill='%2300b1e6'/%3E%3Cpath d='M1325.84 324.69c22.29 3.79 40.23 19.64 43.62 41l93 585.5c4.4 27.64-17.15 54-48.14 59l-942.41 150.46a62.74 62.74 0 01-20.43-.07c-22.29-3.79-40.23-19.64-43.63-41l-93-585.5c-4.4-27.63 17.16-54.05 48.14-59l942.46-150.45a62.47 62.47 0 0120.43.06m10-58.77a122.36 122.36 0 00-39.83-.17l-942.5 150.46c-63.37 10.12-107.16 67.18-97.61 127.22L349 1128.92c7.3 45.92 44.48 82.25 92.5 90.42a122.15 122.15 0 0039.84.17l942.44-150.45c63.38-10.13 107.17-67.2 97.62-127.23l-93.08-585.48c-7.32-45.93-44.47-82.27-92.48-90.43z' fill='%2300b1e6'/%3E%3C/g%3E%3Cg data-name='Rounded Rectangle 1 1 1'%3E%3Cpath d='M400.86 1214.31c-35.92 0-67.31-21.45-78.11-53.38L132.87 599.31c-14.22-42 11-88.68 56.23-104L1093 189a92.31 92.31 0 0129.72-4.94c35.92 0 67.31 21.45 78.12 53.38l189.88 561.62c14.21 42-11 88.67-56.24 104l-903.91 306.3a92.05 92.05 0 01-29.72 5z' fill='%23004c92'/%3E%3Cpath d='M1122.73 213.86c22.6 0 43 12.62 49.87 33.13l189.88 561.61c9 26.51-7.85 56.16-37.57 66.24L421 1181.14a62.8 62.8 0 01-20.16 3.35c-22.61 0-43-12.62-49.88-33.11L161.09 589.76c-9-26.51 7.86-56.16 37.58-66.22l903.9-306.31a62.51 62.51 0 0120.16-3.37m0-59.61a122.21 122.21 0 00-39.29 6.51l-903.9 306.31c-60.79 20.6-94.39 84.2-74.91 141.78l189.88 561.61c14.9 44 57.64 73.63 106.36 73.63a122 122 0 0039.29-6.51l903.9-306.3c60.78-20.6 94.39-84.21 74.91-141.79l-189.91-561.6c-14.89-44.05-57.63-73.64-106.33-73.64z' fill='%23fff'/%3E%3C/g%3E%3Cg clip-path='url(%23a)' fill='%23fff'%3E%3Cpath d='M476.91 518.15h55.79v294.84h-55.79zM597.34 518.15h102.29q45.17 0 73.49 26.54t28.36 65.71A84.82 84.82 0 01786 660.31q-15.47 22.11-42.05 33.06L812.54 813H751l-59.77-111.2h-38.09V813h-55.79V518.15zM699.63 567h-46.49v85.93h46.49q19.92 0 31.88-11.8t12-31.16q0-19-12-31T699.63 567zM1016.33 734.71l-46-.15-59.51-104.69V813H855V518.15h49.59l88.54 157.1 89-157.1h49.14V813h-55.78V630.19zM1371.75 813l-19.85-62.76h-105.53L1226.52 813h-60.66l104.93-294.84H1327L1432 813zm-72.62-228.72l-39.05 122.57h78.1z'/%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E\\\");background-size:contain;background-position:center;background-repeat:no-repeat;font-size:0;color:transparent}.irma-web-qr-code{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:block;width:256px;height:256px;max-width:100%;background-color:white}.irma-web-loading-animation{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:inline-block;width:39px;height:39px}.irma-web-loading-animation *{background-color:inherit;box-sizing:border-box;margin:0;padding:0}.irma-web-loading-animation *{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:block;width:33%;height:33%;background-color:#00b1e6;float:left;-ms-animation:loading-animation 1.3s infinite ease-in-out;-webkit-animation:loading-animation 1.3s infinite ease-in-out;animation:loading-animation 1.3s infinite ease-in-out}.irma-web-loading-animation *:nth-child(1){-ms-animation-delay:.2s;-webkit-animation-delay:.2s;animation-delay:.2s}.irma-web-loading-animation *:nth-child(2){-ms-animation-delay:.3s;-webkit-animation-delay:.3s;animation-delay:.3s}.irma-web-loading-animation *:nth-child(3){-ms-animation-delay:.4s;-webkit-animation-delay:.4s;animation-delay:.4s}.irma-web-loading-animation *:nth-child(4){-ms-animation-delay:.1s;-webkit-animation-delay:.1s;animation-delay:.1s}.irma-web-loading-animation *:nth-child(5){-ms-animation-delay:.2s;-webkit-animation-delay:.2s;animation-delay:.2s}.irma-web-loading-animation *:nth-child(6){-ms-animation-delay:.3s;-webkit-animation-delay:.3s;animation-delay:.3s}.irma-web-loading-animation *:nth-child(7){-ms-animation-delay:0s;-webkit-animation-delay:0s;animation-delay:0s}.irma-web-loading-animation *:nth-child(8){-ms-animation-delay:.1s;-webkit-animation-delay:.1s;animation-delay:.1s}.irma-web-loading-animation *:nth-child(9){-ms-animation-delay:.2s;-webkit-animation-delay:.2s;animation-delay:.2s}@-ms-keyframes loading-animation{0%,70%,100%{-webkit-transform:scale3D(1,1,1);transform:scale3D(1,1,1)}35%{-webkit-transform:scale3D(0,0,1);transform:scale3D(0,0,1)}}@-webkit-keyframes loading-animation{0%,70%,100%{-webkit-transform:scale3D(1,1,1);transform:scale3D(1,1,1)}35%{-webkit-transform:scale3D(0,0,1);transform:scale3D(0,0,1)}}@keyframes loading-animation{0%,70%,100%{-webkit-transform:scale3D(1,1,1);transform:scale3D(1,1,1)}35%{-webkit-transform:scale3D(0,0,1);transform:scale3D(0,0,1)}}.irma-web-waiting-for-user-animation{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:inline-block;width:23px;height:39px;position:relative;background-color:#00b1e6;border-radius:2px;-ms-animation:waiting-for-user-animation 2s infinite ease-in-out;-webkit-animation:waiting-for-user-animation 2s infinite ease-in-out;animation:waiting-for-user-animation 2s infinite ease-in-out}.irma-web-waiting-for-user-animation:before,.irma-web-waiting-for-user-animation:after{content:\\\"\\\";display:block;position:absolute;background-color:white}.irma-web-waiting-for-user-animation:before{top:3px;left:3px;right:3px;bottom:8px;border-radius:1px}.irma-web-waiting-for-user-animation:after{width:4px;height:4px;left:50%;bottom:2px;margin-left:-2px;border-radius:50%}@-ms-keyframes waiting-for-user-animation{0%,100%{-webkit-transform:scale3D(1.1,1.1,1);transform:scale3D(1.1,1.1,1)}50%{-webkit-transform:scale3D(0.9,0.9,1);transform:scale3D(0.9,0.9,1)}}@-webkit-keyframes waiting-for-user-animation{0%,100%{-webkit-transform:scale3D(1.1,1.1,1);transform:scale3D(1.1,1.1,1)}50%{-webkit-transform:scale3D(0.9,0.9,1);transform:scale3D(0.9,0.9,1)}}@keyframes waiting-for-user-animation{0%,100%{-webkit-transform:scale3D(1.1,1.1,1);transform:scale3D(1.1,1.1,1)}50%{-webkit-transform:scale3D(0.9,0.9,1);transform:scale3D(0.9,0.9,1)}}.irma-web-checkmark-animation{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:inline-block;width:48px;height:39px}.irma-web-checkmark-animation:before{content:\\\" \\\";display:block;box-sizing:content-box;width:27px;height:15px;border:13px solid #2bc194;border-top:0;border-right:0;transform:translate(0,18px) rotate(-45deg);transform-origin:left top;-ms-animation:checkmark-animation .6s 1 ease;-webkit-animation:checkmark-animation .6s 1 ease;animation:checkmark-animation .6s 1 ease}@-ms-keyframes checkmark-animation{0%{height:0;width:0;opacity:1}50%{height:15px;width:0;opacity:1}100%{height:15px;width:27px;opacity:1}}@-webkit-keyframes checkmark-animation{0%{height:0;width:0;opacity:1}50%{height:15px;width:0;opacity:1}100%{height:15px;width:27px;opacity:1}}@keyframes checkmark-animation{0%{height:0;width:0;opacity:1}50%{height:15px;width:0;opacity:1}100%{height:15px;width:27px;opacity:1}}.irma-web-forbidden-animation{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:inline-block;position:relative;width:44px;height:44px}.irma-web-forbidden-animation:before,.irma-web-forbidden-animation:after{content:\\\" \\\";display:block;position:absolute;box-sizing:border-box;width:22px;height:44px;top:0;left:22px;border:7px solid #d44454;border-radius:22px}.irma-web-forbidden-animation:before{-ms-animation:complete-animation .8s linear 1 forwards;-webkit-animation:complete-animation .8s linear 1 forwards;animation:complete-animation .8s linear 1 forwards}.irma-web-forbidden-animation:after{width:37px;-ms-animation:rotate-animation .8s linear 1 forwards;-webkit-animation:rotate-animation .8s linear 1 forwards;animation:rotate-animation .8s linear 1 forwards}@-ms-keyframes complete-animation{0%,65%{border-radius:0;border-left:0;border-top-right-radius:22px;border-bottom-right-radius:22px;width:22px;left:22px}66%,100%{border:7px solid #d44454;border-radius:22px;width:44px;left:0}}@-webkit-keyframes complete-animation{0%,65%{border-radius:0;border-left:0;border-top-right-radius:22px;border-bottom-right-radius:22px;width:22px;left:22px}66%,100%{border:7px solid #d44454;border-radius:22px;width:44px;left:0}}@keyframes complete-animation{0%,65%{border-radius:0;border-left:0;border-top-right-radius:22px;border-bottom-right-radius:22px;width:22px;left:22px}66%,100%{border:7px solid #d44454;border-radius:22px;width:44px;left:0}}@-ms-keyframes rotate-animation{0%,32.99%{border:0;border-radius:0;background-color:white;transform-origin:center left;width:22px}33%,65.99%{border:7px solid #d44454;border-radius:0;border-left:0;border-top-right-radius:22px;border-bottom-right-radius:22px;background-color:white;width:22px;height:44px;transform-origin:center left;left:22px}66%,100%{border:0;background-color:#d44454;height:7px;transform:rotate(-45deg) translate(-18.5px,27.5px);transform-origin:top left;left:0}0.01%{transform:rotate(1deg)}32.98%{transform:rotate(180deg)}33.01%{transform:rotate(1deg)}65.98%{transform:rotate(180deg)}66.01%{width:0}99.99%{width:37px}}@-webkit-keyframes rotate-animation{0%,32.99%{border:0;border-radius:0;background-color:white;transform-origin:center left;width:22px}33%,65.99%{border:7px solid #d44454;border-radius:0;border-left:0;border-top-right-radius:22px;border-bottom-right-radius:22px;background-color:white;width:22px;height:44px;transform-origin:center left;left:22px}66%,100%{border:0;background-color:#d44454;height:7px;transform:rotate(-45deg) translate(-18.5px,27.5px);transform-origin:top left;left:0}0.01%{transform:rotate(1deg)}32.98%{transform:rotate(180deg)}33.01%{transform:rotate(1deg)}65.98%{transform:rotate(180deg)}66.01%{width:0}99.99%{width:37px}}@keyframes rotate-animation{0%,32.99%{border:0;border-radius:0;background-color:white;transform-origin:center left;width:22px}33%,65.99%{border:7px solid #d44454;border-radius:0;border-left:0;border-top-right-radius:22px;border-bottom-right-radius:22px;background-color:white;width:22px;height:44px;transform-origin:center left;left:22px}66%,100%{border:0;background-color:#d44454;height:7px;transform:rotate(-45deg) translate(-18.5px,27.5px);transform-origin:top left;left:0}0.01%{transform:rotate(1deg)}32.98%{transform:rotate(180deg)}33.01%{transform:rotate(1deg)}65.98%{transform:rotate(180deg)}66.01%{width:0}99.99%{width:37px}}.irma-web-clock-animation{background-color:inherit;box-sizing:border-box;margin:0;padding:0;display:inline-block;position:relative;width:42px;height:42px;border-radius:50%;border:5px solid #d44454;-ms-animation:shake-animation 1s infinite linear 2s;-webkit-animation:shake-animation 1s infinite linear 2s;animation:shake-animation 1s infinite linear 2s}.irma-web-clock-animation:before{content:\\\" \\\";position:absolute;display:block;width:5px;height:5px;top:-7.5px;left:13.5px;background-color:#d44454}.irma-web-clock-animation:after{content:\\\" \\\";position:absolute;display:block;width:5px;height:17.5px;top:2px;left:13.5px;background-color:#d44454;transform:rotate(0);transform-origin:bottom center;-ms-animation:clock-animation 2s 1 ease;-webkit-animation:clock-animation 2s 1 ease;animation:clock-animation 2s 1 ease}@-ms-keyframes clock-animation{0%{transform:rotate(-30deg)}40%{transform:rotate(-30deg)}50%{transform:rotate(-15deg)}90%{transform:rotate(-15deg)}100%{transform:rotate(0)}}@-webkit-keyframes clock-animation{0%{transform:rotate(-30deg)}40%{transform:rotate(-30deg)}50%{transform:rotate(-15deg)}90%{transform:rotate(-15deg)}100%{transform:rotate(0)}}@keyframes clock-animation{0%{transform:rotate(-30deg)}40%{transform:rotate(-30deg)}50%{transform:rotate(-15deg)}90%{transform:rotate(-15deg)}100%{transform:rotate(0)}}@-ms-keyframes shake-animation{10%,90%{transform:translate3d(-2px,1px,0)}20%,80%{transform:translate3d(2px,-1px,0)}30%,50%,70%{transform:translate3d(-2px,-1px,0)}40%,60%{transform:translate3d(2px,1px,0)}0%,100%{transform:translate3d(0,0,0)}}@-webkit-keyframes shake-animation{10%,90%{transform:translate3d(-2px,1px,0)}20%,80%{transform:translate3d(2px,-1px,0)}30%,50%,70%{transform:translate3d(-2px,-1px,0)}40%,60%{transform:translate3d(2px,1px,0)}0%,100%{transform:translate3d(0,0,0)}}@keyframes shake-animation{10%,90%{transform:translate3d(-2px,1px,0)}20%,80%{transform:translate3d(2px,-1px,0)}30%,50%,70%{transform:translate3d(-2px,-1px,0)}40%,60%{transform:translate3d(2px,1px,0)}0%,100%{transform:translate3d(0,0,0)}}\", \"\"]);\n// Exports\nmodule.exports = exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/@privacybydesign/irma-css/dist/irma.min.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\n\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImNvbmNhdCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJfaSIsInB1c2giLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBYTtBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLFlBQVYsRUFBd0I7QUFDdkMsTUFBSUMsSUFBSSxHQUFHLEVBQVgsQ0FEdUMsQ0FDeEI7O0FBRWZBLE1BQUksQ0FBQ0MsUUFBTCxHQUFnQixTQUFTQSxRQUFULEdBQW9CO0FBQ2xDLFdBQU8sS0FBS0MsR0FBTCxDQUFTLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsVUFBSUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0YsSUFBRCxFQUFPSixZQUFQLENBQXBDOztBQUVBLFVBQUlJLElBQUksQ0FBQyxDQUFELENBQVIsRUFBYTtBQUNYLGVBQU8sVUFBVUcsTUFBVixDQUFpQkgsSUFBSSxDQUFDLENBQUQsQ0FBckIsRUFBMEIsSUFBMUIsRUFBZ0NHLE1BQWhDLENBQXVDRixPQUF2QyxFQUFnRCxHQUFoRCxDQUFQO0FBQ0Q7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LFNBQVQsQ0FBbUJLLFNBQW5CLEVBQThCO0FBQzVCO0FBQ0EsTUFBSUMsTUFBTSxHQUFHUixJQUFJLENBQUNTLFFBQVEsQ0FBQ0Msa0JBQWtCLENBQUNDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTCxTQUFmLENBQUQsQ0FBbkIsQ0FBVCxDQUFqQjtBQUNBLE1BQUlNLElBQUksR0FBRywrREFBK0R6QixNQUEvRCxDQUFzRW9CLE1BQXRFLENBQVg7QUFDQSxTQUFPLE9BQU9wQixNQUFQLENBQWN5QixJQUFkLEVBQW9CLEtBQXBCLENBQVA7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar R = (typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === 'object' ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {\n  return Function.prototype.apply.call(target, receiver, args);\n};\nvar ReflectOwnKeys;\n\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n};\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\n\nmodule.exports = EventEmitter;\nmodule.exports.once = once; // Backwards-compat with node 0.10.x\n\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\n\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + _typeof(listener));\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function get() {\n    return defaultMaxListeners;\n  },\n  set: function set(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function () {\n  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}; // Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\n\n\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args.push(arguments[i]);\n  }\n\n  var doError = type === 'error';\n  var events = this._events;\n  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.\n\n  if (doError) {\n    var er;\n    if (args.length > 0) er = args[0];\n\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    } // At least give some kind of context to the user\n\n\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n  if (handler === undefined) return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n\n    for (var i = 0; i < len; ++i) {\n      ReflectApply(listeners[i], this, args);\n    }\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n  checkListener(listener);\n  events = target._events;\n\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n\n      events = target._events;\n    }\n\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    } // Check for listener leak\n\n\n    m = _getMaxListeners(target);\n\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true; // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n\n      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener = function prependListener(type, listener) {\n  return _addListener(this, type, listener, true);\n};\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0) return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = {\n    fired: false,\n    wrapFn: undefined,\n    target: target,\n    type: type,\n    listener: listener\n  };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n  checkListener(listener);\n  this.prependListener(type, _onceWrap(this, type, listener));\n  return this;\n}; // Emits a 'removeListener' event if and only if the listener was removed.\n\n\nEventEmitter.prototype.removeListener = function removeListener(type, listener) {\n  var list, events, position, i, originalListener;\n  checkListener(listener);\n  events = this._events;\n  if (events === undefined) return this;\n  list = events[type];\n  if (list === undefined) return this;\n\n  if (list === listener || list.listener === listener) {\n    if (--this._eventsCount === 0) this._events = Object.create(null);else {\n      delete events[type];\n      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);\n    }\n  } else if (typeof list !== 'function') {\n    position = -1;\n\n    for (i = list.length - 1; i >= 0; i--) {\n      if (list[i] === listener || list[i].listener === listener) {\n        originalListener = list[i].listener;\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0) return this;\n    if (position === 0) list.shift();else {\n      spliceOne(list, position);\n    }\n    if (list.length === 1) events[type] = list[0];\n    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n  var listeners, events, i;\n  events = this._events;\n  if (events === undefined) return this; // not listening for removeListener, no need to emit\n\n  if (events.removeListener === undefined) {\n    if (arguments.length === 0) {\n      this._events = Object.create(null);\n      this._eventsCount = 0;\n    } else if (events[type] !== undefined) {\n      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];\n    }\n\n    return this;\n  } // emit removeListener for all listeners on all events\n\n\n  if (arguments.length === 0) {\n    var keys = Object.keys(events);\n    var key;\n\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n\n    this.removeAllListeners('removeListener');\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n    return this;\n  }\n\n  listeners = events[type];\n\n  if (typeof listeners === 'function') {\n    this.removeListener(type, listeners);\n  } else if (listeners !== undefined) {\n    // LIFO order\n    for (i = listeners.length - 1; i >= 0; i--) {\n      this.removeListener(type, listeners[i]);\n    }\n  }\n\n  return this;\n};\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n  if (events === undefined) return [];\n  var evlistener = events[type];\n  if (evlistener === undefined) return [];\n  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function (emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\n\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n\n  for (var i = 0; i < n; ++i) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++) {\n    list[index] = list[index + 1];\n  }\n\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n\n      resolve([].slice.call(arguments));\n    }\n\n    ;\n    var errorListener; // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n");

/***/ }),

/***/ "./node_modules/https-browserify/index.js":
/*!************************************************!*\
  !*** ./node_modules/https-browserify/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var http = __webpack_require__(/*! http */ \"./node_modules/stream-http/index.js\");\n\nvar url = __webpack_require__(/*! url */ \"./node_modules/url/url.js\");\n\nvar https = module.exports;\n\nfor (var key in http) {\n  if (http.hasOwnProperty(key)) https[key] = http[key];\n}\n\nhttps.request = function (params, cb) {\n  params = validateParams(params);\n  return http.request.call(this, params, cb);\n};\n\nhttps.get = function (params, cb) {\n  params = validateParams(params);\n  return http.get.call(this, params, cb);\n};\n\nfunction validateParams(params) {\n  if (typeof params === 'string') {\n    params = url.parse(params);\n  }\n\n  if (!params.protocol) {\n    params.protocol = 'https:';\n  }\n\n  if (params.protocol !== 'https:') {\n    throw new Error('Protocol \"' + params.protocol + '\" not supported. Expected \"https:\"');\n  }\n\n  return params;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHR0cHMtYnJvd3NlcmlmeS9pbmRleC5qcz8yNGY4Il0sIm5hbWVzIjpbImh0dHAiLCJyZXF1aXJlIiwidXJsIiwiaHR0cHMiLCJtb2R1bGUiLCJleHBvcnRzIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJyZXF1ZXN0IiwicGFyYW1zIiwiY2IiLCJ2YWxpZGF0ZVBhcmFtcyIsImNhbGwiLCJnZXQiLCJwYXJzZSIsInByb3RvY29sIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxpREFBRCxDQUFsQjs7QUFDQSxJQUFJQyxHQUFHLEdBQUdELG1CQUFPLENBQUMsc0NBQUQsQ0FBakI7O0FBRUEsSUFBSUUsS0FBSyxHQUFHQyxNQUFNLENBQUNDLE9BQW5COztBQUVBLEtBQUssSUFBSUMsR0FBVCxJQUFnQk4sSUFBaEIsRUFBc0I7QUFDcEIsTUFBSUEsSUFBSSxDQUFDTyxjQUFMLENBQW9CRCxHQUFwQixDQUFKLEVBQThCSCxLQUFLLENBQUNHLEdBQUQsQ0FBTCxHQUFhTixJQUFJLENBQUNNLEdBQUQsQ0FBakI7QUFDL0I7O0FBRURILEtBQUssQ0FBQ0ssT0FBTixHQUFnQixVQUFVQyxNQUFWLEVBQWtCQyxFQUFsQixFQUFzQjtBQUNwQ0QsUUFBTSxHQUFHRSxjQUFjLENBQUNGLE1BQUQsQ0FBdkI7QUFDQSxTQUFPVCxJQUFJLENBQUNRLE9BQUwsQ0FBYUksSUFBYixDQUFrQixJQUFsQixFQUF3QkgsTUFBeEIsRUFBZ0NDLEVBQWhDLENBQVA7QUFDRCxDQUhEOztBQUtBUCxLQUFLLENBQUNVLEdBQU4sR0FBWSxVQUFVSixNQUFWLEVBQWtCQyxFQUFsQixFQUFzQjtBQUNoQ0QsUUFBTSxHQUFHRSxjQUFjLENBQUNGLE1BQUQsQ0FBdkI7QUFDQSxTQUFPVCxJQUFJLENBQUNhLEdBQUwsQ0FBU0QsSUFBVCxDQUFjLElBQWQsRUFBb0JILE1BQXBCLEVBQTRCQyxFQUE1QixDQUFQO0FBQ0QsQ0FIRDs7QUFLQSxTQUFTQyxjQUFULENBQXlCRixNQUF6QixFQUFpQztBQUMvQixNQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDOUJBLFVBQU0sR0FBR1AsR0FBRyxDQUFDWSxLQUFKLENBQVVMLE1BQVYsQ0FBVDtBQUNEOztBQUNELE1BQUksQ0FBQ0EsTUFBTSxDQUFDTSxRQUFaLEVBQXNCO0FBQ3BCTixVQUFNLENBQUNNLFFBQVAsR0FBa0IsUUFBbEI7QUFDRDs7QUFDRCxNQUFJTixNQUFNLENBQUNNLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDaEMsVUFBTSxJQUFJQyxLQUFKLENBQVUsZUFBZVAsTUFBTSxDQUFDTSxRQUF0QixHQUFpQyxvQ0FBM0MsQ0FBTjtBQUNEOztBQUNELFNBQU9OLE1BQVA7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9odHRwcy1icm93c2VyaWZ5L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJylcbnZhciB1cmwgPSByZXF1aXJlKCd1cmwnKVxuXG52YXIgaHR0cHMgPSBtb2R1bGUuZXhwb3J0c1xuXG5mb3IgKHZhciBrZXkgaW4gaHR0cCkge1xuICBpZiAoaHR0cC5oYXNPd25Qcm9wZXJ0eShrZXkpKSBodHRwc1trZXldID0gaHR0cFtrZXldXG59XG5cbmh0dHBzLnJlcXVlc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICBwYXJhbXMgPSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXMpXG4gIHJldHVybiBodHRwLnJlcXVlc3QuY2FsbCh0aGlzLCBwYXJhbXMsIGNiKVxufVxuXG5odHRwcy5nZXQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikge1xuICBwYXJhbXMgPSB2YWxpZGF0ZVBhcmFtcyhwYXJhbXMpXG4gIHJldHVybiBodHRwLmdldC5jYWxsKHRoaXMsIHBhcmFtcywgY2IpXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUGFyYW1zIChwYXJhbXMpIHtcbiAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICdzdHJpbmcnKSB7XG4gICAgcGFyYW1zID0gdXJsLnBhcnNlKHBhcmFtcylcbiAgfVxuICBpZiAoIXBhcmFtcy5wcm90b2NvbCkge1xuICAgIHBhcmFtcy5wcm90b2NvbCA9ICdodHRwczonXG4gIH1cbiAgaWYgKHBhcmFtcy5wcm90b2NvbCAhPT0gJ2h0dHBzOicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvY29sIFwiJyArIHBhcmFtcy5wcm90b2NvbCArICdcIiBub3Qgc3VwcG9ydGVkLiBFeHBlY3RlZCBcImh0dHBzOlwiJylcbiAgfVxuICByZXR1cm4gcGFyYW1zXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/https-browserify/index.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? nBytes - 1 : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n  i += d;\n  e = s & (1 << -nBits) - 1;\n  s >>= -nBits;\n  nBits += eLen;\n\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : (s ? -1 : 1) * Infinity;\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n};\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n  var i = isLE ? 0 : nBytes - 1;\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = e << mLen | m;\n  eLen += mLen;\n\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n\n      var TempCtor = function TempCtor() {};\n\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz8zZmI1Il0sIm5hbWVzIjpbIk9iamVjdCIsImNyZWF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmhlcml0cyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiVGVtcEN0b3IiXSwibWFwcGluZ3MiOiJBQUFBLElBQUksT0FBT0EsTUFBTSxDQUFDQyxNQUFkLEtBQXlCLFVBQTdCLEVBQXlDO0FBQ3ZDO0FBQ0FDLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsU0FBeEIsRUFBbUM7QUFDbEQsUUFBSUEsU0FBSixFQUFlO0FBQ2JELFVBQUksQ0FBQ0UsTUFBTCxHQUFjRCxTQUFkO0FBQ0FELFVBQUksQ0FBQ0csU0FBTCxHQUFpQlIsTUFBTSxDQUFDQyxNQUFQLENBQWNLLFNBQVMsQ0FBQ0UsU0FBeEIsRUFBbUM7QUFDbERDLG1CQUFXLEVBQUU7QUFDWEMsZUFBSyxFQUFFTCxJQURJO0FBRVhNLG9CQUFVLEVBQUUsS0FGRDtBQUdYQyxrQkFBUSxFQUFFLElBSEM7QUFJWEMsc0JBQVksRUFBRTtBQUpIO0FBRHFDLE9BQW5DLENBQWpCO0FBUUQ7QUFDRixHQVpEO0FBYUQsQ0FmRCxNQWVPO0FBQ0w7QUFDQVgsUUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFFBQVQsQ0FBa0JDLElBQWxCLEVBQXdCQyxTQUF4QixFQUFtQztBQUNsRCxRQUFJQSxTQUFKLEVBQWU7QUFDYkQsVUFBSSxDQUFDRSxNQUFMLEdBQWNELFNBQWQ7O0FBQ0EsVUFBSVEsUUFBUSxHQUFHLFNBQVhBLFFBQVcsR0FBWSxDQUFFLENBQTdCOztBQUNBQSxjQUFRLENBQUNOLFNBQVQsR0FBcUJGLFNBQVMsQ0FBQ0UsU0FBL0I7QUFDQUgsVUFBSSxDQUFDRyxTQUFMLEdBQWlCLElBQUlNLFFBQUosRUFBakI7QUFDQVQsVUFBSSxDQUFDRyxTQUFMLENBQWVDLFdBQWYsR0FBNkJKLElBQTdCO0FBQ0Q7QUFDRixHQVJEO0FBU0QiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/inherits/inherits_browser.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9lM2RiIl0sIm5hbWVzIjpbInRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5IiwiaXNBcnJheSIsImFyciIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBRyxHQUFHQSxRQUFsQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxLQUFLLENBQUNDLE9BQU4sSUFBaUIsVUFBVUMsR0FBVixFQUFlO0FBQy9DLFNBQU9MLFFBQVEsQ0FBQ00sSUFBVCxDQUFjRCxHQUFkLEtBQXNCLGdCQUE3QjtBQUNELENBRkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*! https://mths.be/punycode v1.4.1 by @mathias */\n;\n\n(function (root) {\n  /** Detect free variables */\n  var freeExports = ( false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;\n  var freeModule = ( false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;\n  var freeGlobal = (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == 'object' && global;\n\n  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {\n    root = freeGlobal;\n  }\n  /**\n   * The `punycode` object.\n   * @name punycode\n   * @type Object\n   */\n\n\n  var punycode,\n\n  /** Highest positive signed 32-bit float value */\n  maxInt = 2147483647,\n      // aka. 0x7FFFFFFF or 2^31-1\n\n  /** Bootstring parameters */\n  base = 36,\n      tMin = 1,\n      tMax = 26,\n      skew = 38,\n      damp = 700,\n      initialBias = 72,\n      initialN = 128,\n      // 0x80\n  delimiter = '-',\n      // '\\x2D'\n\n  /** Regular expressions */\n  regexPunycode = /^xn--/,\n      regexNonASCII = /[^\\x20-\\x7E]/,\n      // unprintable ASCII chars + non-ASCII chars\n  regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g,\n      // RFC 3490 separators\n\n  /** Error messages */\n  errors = {\n    'overflow': 'Overflow: input needs wider integers to process',\n    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n    'invalid-input': 'Invalid input'\n  },\n\n  /** Convenience shortcuts */\n  baseMinusTMin = base - tMin,\n      floor = Math.floor,\n      stringFromCharCode = String.fromCharCode,\n\n  /** Temporary variable */\n  key;\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A generic error utility function.\n   * @private\n   * @param {String} type The error type.\n   * @returns {Error} Throws a `RangeError` with the applicable error message.\n   */\n\n  function error(type) {\n    throw new RangeError(errors[type]);\n  }\n  /**\n   * A generic `Array#map` utility function.\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function that gets called for every array\n   * item.\n   * @returns {Array} A new array of values returned by the callback function.\n   */\n\n\n  function map(array, fn) {\n    var length = array.length;\n    var result = [];\n\n    while (length--) {\n      result[length] = fn(array[length]);\n    }\n\n    return result;\n  }\n  /**\n   * A simple `Array#map`-like wrapper to work with domain name strings or email\n   * addresses.\n   * @private\n   * @param {String} domain The domain name or email address.\n   * @param {Function} callback The function that gets called for every\n   * character.\n   * @returns {Array} A new string of characters returned by the callback\n   * function.\n   */\n\n\n  function mapDomain(string, fn) {\n    var parts = string.split('@');\n    var result = '';\n\n    if (parts.length > 1) {\n      // In email addresses, only the domain name should be punycoded. Leave\n      // the local part (i.e. everything up to `@`) intact.\n      result = parts[0] + '@';\n      string = parts[1];\n    } // Avoid `split(regex)` for IE8 compatibility. See #17.\n\n\n    string = string.replace(regexSeparators, '\\x2E');\n    var labels = string.split('.');\n    var encoded = map(labels, fn).join('.');\n    return result + encoded;\n  }\n  /**\n   * Creates an array containing the numeric code points of each Unicode\n   * character in the string. While JavaScript uses UCS-2 internally,\n   * this function will convert a pair of surrogate halves (each of which\n   * UCS-2 exposes as separate characters) into a single code point,\n   * matching UTF-16.\n   * @see `punycode.ucs2.encode`\n   * @see <https://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode.ucs2\n   * @name decode\n   * @param {String} string The Unicode input string (UCS-2).\n   * @returns {Array} The new array of code points.\n   */\n\n\n  function ucs2decode(string) {\n    var output = [],\n        counter = 0,\n        length = string.length,\n        value,\n        extra;\n\n    while (counter < length) {\n      value = string.charCodeAt(counter++);\n\n      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n        // high surrogate, and there is a next character\n        extra = string.charCodeAt(counter++);\n\n        if ((extra & 0xFC00) == 0xDC00) {\n          // low surrogate\n          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n        } else {\n          // unmatched surrogate; only append this code unit, in case the next\n          // code unit is the high surrogate of a surrogate pair\n          output.push(value);\n          counter--;\n        }\n      } else {\n        output.push(value);\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Creates a string based on an array of numeric code points.\n   * @see `punycode.ucs2.decode`\n   * @memberOf punycode.ucs2\n   * @name encode\n   * @param {Array} codePoints The array of numeric code points.\n   * @returns {String} The new Unicode string (UCS-2).\n   */\n\n\n  function ucs2encode(array) {\n    return map(array, function (value) {\n      var output = '';\n\n      if (value > 0xFFFF) {\n        value -= 0x10000;\n        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n        value = 0xDC00 | value & 0x3FF;\n      }\n\n      output += stringFromCharCode(value);\n      return output;\n    }).join('');\n  }\n  /**\n   * Converts a basic code point into a digit/integer.\n   * @see `digitToBasic()`\n   * @private\n   * @param {Number} codePoint The basic numeric code point value.\n   * @returns {Number} The numeric value of a basic code point (for use in\n   * representing integers) in the range `0` to `base - 1`, or `base` if\n   * the code point does not represent a value.\n   */\n\n\n  function basicToDigit(codePoint) {\n    if (codePoint - 48 < 10) {\n      return codePoint - 22;\n    }\n\n    if (codePoint - 65 < 26) {\n      return codePoint - 65;\n    }\n\n    if (codePoint - 97 < 26) {\n      return codePoint - 97;\n    }\n\n    return base;\n  }\n  /**\n   * Converts a digit/integer into a basic code point.\n   * @see `basicToDigit()`\n   * @private\n   * @param {Number} digit The numeric value of a basic code point.\n   * @returns {Number} The basic code point whose value (when used for\n   * representing integers) is `digit`, which needs to be in the range\n   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n   * used; else, the lowercase form is used. The behavior is undefined\n   * if `flag` is non-zero and `digit` has no uppercase form.\n   */\n\n\n  function digitToBasic(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n  }\n  /**\n   * Bias adaptation function as per section 3.4 of RFC 3492.\n   * https://tools.ietf.org/html/rfc3492#section-3.4\n   * @private\n   */\n\n\n  function adapt(delta, numPoints, firstTime) {\n    var k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n\n    for (;\n    /* no initialization */\n    delta > baseMinusTMin * tMax >> 1; k += base) {\n      delta = floor(delta / baseMinusTMin);\n    }\n\n    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n  }\n  /**\n   * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n   * symbols.\n   * @memberOf punycode\n   * @param {String} input The Punycode string of ASCII-only symbols.\n   * @returns {String} The resulting string of Unicode symbols.\n   */\n\n\n  function decode(input) {\n    // Don't use UCS-2\n    var output = [],\n        inputLength = input.length,\n        out,\n        i = 0,\n        n = initialN,\n        bias = initialBias,\n        basic,\n        j,\n        index,\n        oldi,\n        w,\n        k,\n        digit,\n        t,\n\n    /** Cached calculation results */\n    baseMinusT; // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n\n    basic = input.lastIndexOf(delimiter);\n\n    if (basic < 0) {\n      basic = 0;\n    }\n\n    for (j = 0; j < basic; ++j) {\n      // if it's not a basic code point\n      if (input.charCodeAt(j) >= 0x80) {\n        error('not-basic');\n      }\n\n      output.push(input.charCodeAt(j));\n    } // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n\n\n    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)\n    /* no final expression */\n    {\n      // `index` is the index of the next character to be consumed.\n      // Decode a generalized variable-length integer into `delta`,\n      // which gets added to `i`. The overflow checking is easier\n      // if we increase `i` as we go, then subtract off its starting\n      // value at the end to obtain `delta`.\n      for (oldi = i, w = 1, k = base;;\n      /* no condition */\n      k += base) {\n        if (index >= inputLength) {\n          error('invalid-input');\n        }\n\n        digit = basicToDigit(input.charCodeAt(index++));\n\n        if (digit >= base || digit > floor((maxInt - i) / w)) {\n          error('overflow');\n        }\n\n        i += digit * w;\n        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n        if (digit < t) {\n          break;\n        }\n\n        baseMinusT = base - t;\n\n        if (w > floor(maxInt / baseMinusT)) {\n          error('overflow');\n        }\n\n        w *= baseMinusT;\n      }\n\n      out = output.length + 1;\n      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,\n      // incrementing `n` each time, so we'll fix that now:\n\n      if (floor(i / out) > maxInt - n) {\n        error('overflow');\n      }\n\n      n += floor(i / out);\n      i %= out; // Insert `n` at position `i` of the output\n\n      output.splice(i++, 0, n);\n    }\n\n    return ucs2encode(output);\n  }\n  /**\n   * Converts a string of Unicode symbols (e.g. a domain name label) to a\n   * Punycode string of ASCII-only symbols.\n   * @memberOf punycode\n   * @param {String} input The string of Unicode symbols.\n   * @returns {String} The resulting Punycode string of ASCII-only symbols.\n   */\n\n\n  function encode(input) {\n    var n,\n        delta,\n        handledCPCount,\n        basicLength,\n        bias,\n        j,\n        m,\n        q,\n        k,\n        t,\n        currentValue,\n        output = [],\n\n    /** `inputLength` will hold the number of code points in `input`. */\n    inputLength,\n\n    /** Cached calculation results */\n    handledCPCountPlusOne,\n        baseMinusT,\n        qMinusT; // Convert the input in UCS-2 to Unicode\n\n    input = ucs2decode(input); // Cache the length\n\n    inputLength = input.length; // Initialize the state\n\n    n = initialN;\n    delta = 0;\n    bias = initialBias; // Handle the basic code points\n\n    for (j = 0; j < inputLength; ++j) {\n      currentValue = input[j];\n\n      if (currentValue < 0x80) {\n        output.push(stringFromCharCode(currentValue));\n      }\n    }\n\n    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n    // Finish the basic string - if it is not empty - with a delimiter\n\n    if (basicLength) {\n      output.push(delimiter);\n    } // Main encoding loop:\n\n\n    while (handledCPCount < inputLength) {\n      // All non-basic code points < n have been handled already. Find the next\n      // larger one:\n      for (m = maxInt, j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n\n        if (currentValue >= n && currentValue < m) {\n          m = currentValue;\n        }\n      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n      // but guard against overflow\n\n\n      handledCPCountPlusOne = handledCPCount + 1;\n\n      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n        error('overflow');\n      }\n\n      delta += (m - n) * handledCPCountPlusOne;\n      n = m;\n\n      for (j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n\n        if (currentValue < n && ++delta > maxInt) {\n          error('overflow');\n        }\n\n        if (currentValue == n) {\n          // Represent delta as a generalized variable-length integer\n          for (q = delta, k = base;;\n          /* no condition */\n          k += base) {\n            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n            if (q < t) {\n              break;\n            }\n\n            qMinusT = q - t;\n            baseMinusT = base - t;\n            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n            q = floor(qMinusT / baseMinusT);\n          }\n\n          output.push(stringFromCharCode(digitToBasic(q, 0)));\n          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n          delta = 0;\n          ++handledCPCount;\n        }\n      }\n\n      ++delta;\n      ++n;\n    }\n\n    return output.join('');\n  }\n  /**\n   * Converts a Punycode string representing a domain name or an email address\n   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n   * it doesn't matter if you call it on a string that has already been\n   * converted to Unicode.\n   * @memberOf punycode\n   * @param {String} input The Punycoded domain name or email address to\n   * convert to Unicode.\n   * @returns {String} The Unicode representation of the given Punycode\n   * string.\n   */\n\n\n  function toUnicode(input) {\n    return mapDomain(input, function (string) {\n      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n    });\n  }\n  /**\n   * Converts a Unicode string representing a domain name or an email address to\n   * Punycode. Only the non-ASCII parts of the domain name will be converted,\n   * i.e. it doesn't matter if you call it with a domain that's already in\n   * ASCII.\n   * @memberOf punycode\n   * @param {String} input The domain name or email address to convert, as a\n   * Unicode string.\n   * @returns {String} The Punycode representation of the given domain name or\n   * email address.\n   */\n\n\n  function toASCII(input) {\n    return mapDomain(input, function (string) {\n      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n    });\n  }\n  /*--------------------------------------------------------------------------*/\n\n  /** Define the public API */\n\n\n  punycode = {\n    /**\n     * A string representing the current Punycode.js version number.\n     * @memberOf punycode\n     * @type String\n     */\n    'version': '1.4.1',\n\n    /**\n     * An object of methods to convert from JavaScript's internal character\n     * representation (UCS-2) to Unicode code points, and back.\n     * @see <https://mathiasbynens.be/notes/javascript-encoding>\n     * @memberOf punycode\n     * @type Object\n     */\n    'ucs2': {\n      'decode': ucs2decode,\n      'encode': ucs2encode\n    },\n    'decode': decode,\n    'encode': encode,\n    'toASCII': toASCII,\n    'toUnicode': toUnicode\n  };\n  /** Expose `punycode` */\n  // Some AMD build optimizers, like r.js, check for specific condition patterns\n  // like the following:\n\n  if ( true && _typeof(__webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) == 'object' && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return punycode;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (freeExports && freeModule) {\n    if (module.exports == freeExports) {\n      // in Node.js, io.js, or RingoJS v0.8.0+\n      freeModule.exports = punycode;\n    } else {\n      // in Narwhal or RingoJS v0.7.0-\n      for (key in punycode) {\n        punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n      }\n    }\n  } else {\n    // in Rhino or a web browser\n    root.punycode = punycode;\n  }\n})(this);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/node-libs-browser/node_modules/punycode/punycode.js\n");

/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nif (typeof process === 'undefined' || !process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = {\n    nextTick: nextTick\n  };\n} else {\n  module.exports = process;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n\n  var len = arguments.length;\n  var args, i;\n\n  switch (len) {\n    case 0:\n    case 1:\n      return process.nextTick(fn);\n\n    case 2:\n      return process.nextTick(function afterTickOne() {\n        fn.call(null, arg1);\n      });\n\n    case 3:\n      return process.nextTick(function afterTickTwo() {\n        fn.call(null, arg1, arg2);\n      });\n\n    case 4:\n      return process.nextTick(function afterTickThree() {\n        fn.call(null, arg1, arg2, arg3);\n      });\n\n    default:\n      args = new Array(len - 1);\n      i = 0;\n\n      while (i < args.length) {\n        args[i++] = arguments[i];\n      }\n\n      return process.nextTick(function afterTick() {\n        fn.apply(null, args);\n      });\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanM/OTY2ZCJdLCJuYW1lcyI6WyJwcm9jZXNzIiwidmVyc2lvbiIsImluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIiwibmV4dFRpY2siLCJmbiIsImFyZzEiLCJhcmcyIiwiYXJnMyIsIlR5cGVFcnJvciIsImxlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJpIiwiYWZ0ZXJUaWNrT25lIiwiY2FsbCIsImFmdGVyVGlja1R3byIsImFmdGVyVGlja1RocmVlIiwiQXJyYXkiLCJhZnRlclRpY2siLCJhcHBseSJdLCJtYXBwaW5ncyI6IkFBQUEsK0NBQWE7O0FBRWIsSUFBSSxPQUFPQSxPQUFQLEtBQW1CLFdBQW5CLElBQ0EsQ0FBQ0EsT0FBTyxDQUFDQyxPQURULElBRUFELE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkMsT0FBaEIsQ0FBd0IsS0FBeEIsTUFBbUMsQ0FGbkMsSUFHQUYsT0FBTyxDQUFDQyxPQUFSLENBQWdCQyxPQUFoQixDQUF3QixLQUF4QixNQUFtQyxDQUFuQyxJQUF3Q0YsT0FBTyxDQUFDQyxPQUFSLENBQWdCQyxPQUFoQixDQUF3QixPQUF4QixNQUFxQyxDQUhqRixFQUdvRjtBQUNsRkMsUUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQUVDLFlBQVEsRUFBRUE7QUFBWixHQUFqQjtBQUNELENBTEQsTUFLTztBQUNMRixRQUFNLENBQUNDLE9BQVAsR0FBaUJKLE9BQWpCO0FBQ0Q7O0FBRUQsU0FBU0ssUUFBVCxDQUFrQkMsRUFBbEIsRUFBc0JDLElBQXRCLEVBQTRCQyxJQUE1QixFQUFrQ0MsSUFBbEMsRUFBd0M7QUFDdEMsTUFBSSxPQUFPSCxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUIsVUFBTSxJQUFJSSxTQUFKLENBQWMsd0NBQWQsQ0FBTjtBQUNEOztBQUNELE1BQUlDLEdBQUcsR0FBR0MsU0FBUyxDQUFDQyxNQUFwQjtBQUNBLE1BQUlDLElBQUosRUFBVUMsQ0FBVjs7QUFDQSxVQUFRSixHQUFSO0FBQ0EsU0FBSyxDQUFMO0FBQ0EsU0FBSyxDQUFMO0FBQ0UsYUFBT1gsT0FBTyxDQUFDSyxRQUFSLENBQWlCQyxFQUFqQixDQUFQOztBQUNGLFNBQUssQ0FBTDtBQUNFLGFBQU9OLE9BQU8sQ0FBQ0ssUUFBUixDQUFpQixTQUFTVyxZQUFULEdBQXdCO0FBQzlDVixVQUFFLENBQUNXLElBQUgsQ0FBUSxJQUFSLEVBQWNWLElBQWQ7QUFDRCxPQUZNLENBQVA7O0FBR0YsU0FBSyxDQUFMO0FBQ0UsYUFBT1AsT0FBTyxDQUFDSyxRQUFSLENBQWlCLFNBQVNhLFlBQVQsR0FBd0I7QUFDOUNaLFVBQUUsQ0FBQ1csSUFBSCxDQUFRLElBQVIsRUFBY1YsSUFBZCxFQUFvQkMsSUFBcEI7QUFDRCxPQUZNLENBQVA7O0FBR0YsU0FBSyxDQUFMO0FBQ0UsYUFBT1IsT0FBTyxDQUFDSyxRQUFSLENBQWlCLFNBQVNjLGNBQVQsR0FBMEI7QUFDaERiLFVBQUUsQ0FBQ1csSUFBSCxDQUFRLElBQVIsRUFBY1YsSUFBZCxFQUFvQkMsSUFBcEIsRUFBMEJDLElBQTFCO0FBQ0QsT0FGTSxDQUFQOztBQUdGO0FBQ0VLLFVBQUksR0FBRyxJQUFJTSxLQUFKLENBQVVULEdBQUcsR0FBRyxDQUFoQixDQUFQO0FBQ0FJLE9BQUMsR0FBRyxDQUFKOztBQUNBLGFBQU9BLENBQUMsR0FBR0QsSUFBSSxDQUFDRCxNQUFoQixFQUF3QjtBQUN0QkMsWUFBSSxDQUFDQyxDQUFDLEVBQUYsQ0FBSixHQUFZSCxTQUFTLENBQUNHLENBQUQsQ0FBckI7QUFDRDs7QUFDRCxhQUFPZixPQUFPLENBQUNLLFFBQVIsQ0FBaUIsU0FBU2dCLFNBQVQsR0FBcUI7QUFDM0NmLFVBQUUsQ0FBQ2dCLEtBQUgsQ0FBUyxJQUFULEVBQWVSLElBQWY7QUFDRCxPQUZNLENBQVA7QUF0QkY7QUEwQkQsQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fFxuICAgICFwcm9jZXNzLnZlcnNpb24gfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuJykgPT09IDAgJiYgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLjguJykgIT09IDApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7IG5leHRUaWNrOiBuZXh0VGljayB9O1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/process-nextick-args/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n}; // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n  return [];\n};\n\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n  return '/';\n};\n\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\n\nprocess.umask = function () {\n  return 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n // If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function (qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n  var maxKeys = 1000;\n\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count\n\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr,\n        vstr,\n        k,\n        v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcz85MWRkIl0sIm5hbWVzIjpbImhhc093blByb3BlcnR5Iiwib2JqIiwicHJvcCIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwicXMiLCJzZXAiLCJlcSIsIm9wdGlvbnMiLCJsZW5ndGgiLCJyZWdleHAiLCJzcGxpdCIsIm1heEtleXMiLCJsZW4iLCJpIiwieCIsInJlcGxhY2UiLCJpZHgiLCJpbmRleE9mIiwia3N0ciIsInZzdHIiLCJrIiwidiIsInN1YnN0ciIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzQXJyYXkiLCJwdXNoIiwiQXJyYXkiLCJ4cyIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0NBSUE7QUFDQTtBQUNBOztBQUNBLFNBQVNBLGNBQVQsQ0FBd0JDLEdBQXhCLEVBQTZCQyxJQUE3QixFQUFtQztBQUNqQyxTQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJKLGNBQWpCLENBQWdDSyxJQUFoQyxDQUFxQ0osR0FBckMsRUFBMENDLElBQTFDLENBQVA7QUFDRDs7QUFFREksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVNDLEVBQVQsRUFBYUMsR0FBYixFQUFrQkMsRUFBbEIsRUFBc0JDLE9BQXRCLEVBQStCO0FBQzlDRixLQUFHLEdBQUdBLEdBQUcsSUFBSSxHQUFiO0FBQ0FDLElBQUUsR0FBR0EsRUFBRSxJQUFJLEdBQVg7QUFDQSxNQUFJVCxHQUFHLEdBQUcsRUFBVjs7QUFFQSxNQUFJLE9BQU9PLEVBQVAsS0FBYyxRQUFkLElBQTBCQSxFQUFFLENBQUNJLE1BQUgsS0FBYyxDQUE1QyxFQUErQztBQUM3QyxXQUFPWCxHQUFQO0FBQ0Q7O0FBRUQsTUFBSVksTUFBTSxHQUFHLEtBQWI7QUFDQUwsSUFBRSxHQUFHQSxFQUFFLENBQUNNLEtBQUgsQ0FBU0wsR0FBVCxDQUFMO0FBRUEsTUFBSU0sT0FBTyxHQUFHLElBQWQ7O0FBQ0EsTUFBSUosT0FBTyxJQUFJLE9BQU9BLE9BQU8sQ0FBQ0ksT0FBZixLQUEyQixRQUExQyxFQUFvRDtBQUNsREEsV0FBTyxHQUFHSixPQUFPLENBQUNJLE9BQWxCO0FBQ0Q7O0FBRUQsTUFBSUMsR0FBRyxHQUFHUixFQUFFLENBQUNJLE1BQWIsQ0FqQjhDLENBa0I5Qzs7QUFDQSxNQUFJRyxPQUFPLEdBQUcsQ0FBVixJQUFlQyxHQUFHLEdBQUdELE9BQXpCLEVBQWtDO0FBQ2hDQyxPQUFHLEdBQUdELE9BQU47QUFDRDs7QUFFRCxPQUFLLElBQUlFLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELEdBQXBCLEVBQXlCLEVBQUVDLENBQTNCLEVBQThCO0FBQzVCLFFBQUlDLENBQUMsR0FBR1YsRUFBRSxDQUFDUyxDQUFELENBQUYsQ0FBTUUsT0FBTixDQUFjTixNQUFkLEVBQXNCLEtBQXRCLENBQVI7QUFBQSxRQUNJTyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0csT0FBRixDQUFVWCxFQUFWLENBRFY7QUFBQSxRQUVJWSxJQUZKO0FBQUEsUUFFVUMsSUFGVjtBQUFBLFFBRWdCQyxDQUZoQjtBQUFBLFFBRW1CQyxDQUZuQjs7QUFJQSxRQUFJTCxHQUFHLElBQUksQ0FBWCxFQUFjO0FBQ1pFLFVBQUksR0FBR0osQ0FBQyxDQUFDUSxNQUFGLENBQVMsQ0FBVCxFQUFZTixHQUFaLENBQVA7QUFDQUcsVUFBSSxHQUFHTCxDQUFDLENBQUNRLE1BQUYsQ0FBU04sR0FBRyxHQUFHLENBQWYsQ0FBUDtBQUNELEtBSEQsTUFHTztBQUNMRSxVQUFJLEdBQUdKLENBQVA7QUFDQUssVUFBSSxHQUFHLEVBQVA7QUFDRDs7QUFFREMsS0FBQyxHQUFHRyxrQkFBa0IsQ0FBQ0wsSUFBRCxDQUF0QjtBQUNBRyxLQUFDLEdBQUdFLGtCQUFrQixDQUFDSixJQUFELENBQXRCOztBQUVBLFFBQUksQ0FBQ3ZCLGNBQWMsQ0FBQ0MsR0FBRCxFQUFNdUIsQ0FBTixDQUFuQixFQUE2QjtBQUMzQnZCLFNBQUcsQ0FBQ3VCLENBQUQsQ0FBSCxHQUFTQyxDQUFUO0FBQ0QsS0FGRCxNQUVPLElBQUlHLE9BQU8sQ0FBQzNCLEdBQUcsQ0FBQ3VCLENBQUQsQ0FBSixDQUFYLEVBQXFCO0FBQzFCdkIsU0FBRyxDQUFDdUIsQ0FBRCxDQUFILENBQU9LLElBQVAsQ0FBWUosQ0FBWjtBQUNELEtBRk0sTUFFQTtBQUNMeEIsU0FBRyxDQUFDdUIsQ0FBRCxDQUFILEdBQVMsQ0FBQ3ZCLEdBQUcsQ0FBQ3VCLENBQUQsQ0FBSixFQUFTQyxDQUFULENBQVQ7QUFDRDtBQUNGOztBQUVELFNBQU94QixHQUFQO0FBQ0QsQ0FqREQ7O0FBbURBLElBQUkyQixPQUFPLEdBQUdFLEtBQUssQ0FBQ0YsT0FBTixJQUFpQixVQUFVRyxFQUFWLEVBQWM7QUFDM0MsU0FBTzVCLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQjRCLFFBQWpCLENBQTBCM0IsSUFBMUIsQ0FBK0IwQixFQUEvQixNQUF1QyxnQkFBOUM7QUFDRCxDQUZEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9kZWNvZGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHFzLCBzZXAsIGVxLCBvcHRpb25zKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICB2YXIgb2JqID0ge307XG5cbiAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciByZWdleHAgPSAvXFwrL2c7XG4gIHFzID0gcXMuc3BsaXQoc2VwKTtcblxuICB2YXIgbWF4S2V5cyA9IDEwMDA7XG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7XG4gICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5cztcbiAgfVxuXG4gIHZhciBsZW4gPSBxcy5sZW5ndGg7XG4gIC8vIG1heEtleXMgPD0gMCBtZWFucyB0aGF0IHdlIHNob3VsZCBub3QgbGltaXQga2V5cyBjb3VudFxuICBpZiAobWF4S2V5cyA+IDAgJiYgbGVuID4gbWF4S2V5cykge1xuICAgIGxlbiA9IG1heEtleXM7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHggPSBxc1tpXS5yZXBsYWNlKHJlZ2V4cCwgJyUyMCcpLFxuICAgICAgICBpZHggPSB4LmluZGV4T2YoZXEpLFxuICAgICAgICBrc3RyLCB2c3RyLCBrLCB2O1xuXG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTtcbiAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAga3N0ciA9IHg7XG4gICAgICB2c3RyID0gJyc7XG4gICAgfVxuXG4gICAgayA9IGRlY29kZVVSSUNvbXBvbmVudChrc3RyKTtcbiAgICB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZzdHIpO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShvYmosIGspKSB7XG4gICAgICBvYmpba10gPSB2O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tdID0gW29ialtrXSwgdl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/decode.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar stringifyPrimitive = function stringifyPrimitive(v) {\n  switch (_typeof(v)) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function (obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (_typeof(obj) === 'object') {\n    return map(objectKeys(obj), function (k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n\n      if (isArray(obj[k])) {\n        return map(obj[k], function (v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map(xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n\n  return res;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcz9lMDk5Il0sIm5hbWVzIjpbInN0cmluZ2lmeVByaW1pdGl2ZSIsInYiLCJpc0Zpbml0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJzZXAiLCJlcSIsIm5hbWUiLCJ1bmRlZmluZWQiLCJtYXAiLCJvYmplY3RLZXlzIiwiayIsImtzIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaXNBcnJheSIsImpvaW4iLCJBcnJheSIsInhzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZiIsInJlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwia2V5cyIsImtleSIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWE7Ozs7QUFFYixJQUFJQSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLENBQVNDLENBQVQsRUFBWTtBQUNuQyxrQkFBZUEsQ0FBZjtBQUNFLFNBQUssUUFBTDtBQUNFLGFBQU9BLENBQVA7O0FBRUYsU0FBSyxTQUFMO0FBQ0UsYUFBT0EsQ0FBQyxHQUFHLE1BQUgsR0FBWSxPQUFwQjs7QUFFRixTQUFLLFFBQUw7QUFDRSxhQUFPQyxRQUFRLENBQUNELENBQUQsQ0FBUixHQUFjQSxDQUFkLEdBQWtCLEVBQXpCOztBQUVGO0FBQ0UsYUFBTyxFQUFQO0FBWEo7QUFhRCxDQWREOztBQWdCQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQkMsRUFBbkIsRUFBdUJDLElBQXZCLEVBQTZCO0FBQzVDRixLQUFHLEdBQUdBLEdBQUcsSUFBSSxHQUFiO0FBQ0FDLElBQUUsR0FBR0EsRUFBRSxJQUFJLEdBQVg7O0FBQ0EsTUFBSUYsR0FBRyxLQUFLLElBQVosRUFBa0I7QUFDaEJBLE9BQUcsR0FBR0ksU0FBTjtBQUNEOztBQUVELE1BQUksUUFBT0osR0FBUCxNQUFlLFFBQW5CLEVBQTZCO0FBQzNCLFdBQU9LLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDTixHQUFELENBQVgsRUFBa0IsVUFBU08sQ0FBVCxFQUFZO0FBQ3RDLFVBQUlDLEVBQUUsR0FBR0Msa0JBQWtCLENBQUNkLGtCQUFrQixDQUFDWSxDQUFELENBQW5CLENBQWxCLEdBQTRDTCxFQUFyRDs7QUFDQSxVQUFJUSxPQUFPLENBQUNWLEdBQUcsQ0FBQ08sQ0FBRCxDQUFKLENBQVgsRUFBcUI7QUFDbkIsZUFBT0YsR0FBRyxDQUFDTCxHQUFHLENBQUNPLENBQUQsQ0FBSixFQUFTLFVBQVNYLENBQVQsRUFBWTtBQUM3QixpQkFBT1ksRUFBRSxHQUFHQyxrQkFBa0IsQ0FBQ2Qsa0JBQWtCLENBQUNDLENBQUQsQ0FBbkIsQ0FBOUI7QUFDRCxTQUZTLENBQUgsQ0FFSmUsSUFGSSxDQUVDVixHQUZELENBQVA7QUFHRCxPQUpELE1BSU87QUFDTCxlQUFPTyxFQUFFLEdBQUdDLGtCQUFrQixDQUFDZCxrQkFBa0IsQ0FBQ0ssR0FBRyxDQUFDTyxDQUFELENBQUosQ0FBbkIsQ0FBOUI7QUFDRDtBQUNGLEtBVFMsQ0FBSCxDQVNKSSxJQVRJLENBU0NWLEdBVEQsQ0FBUDtBQVdEOztBQUVELE1BQUksQ0FBQ0UsSUFBTCxFQUFXLE9BQU8sRUFBUDtBQUNYLFNBQU9NLGtCQUFrQixDQUFDZCxrQkFBa0IsQ0FBQ1EsSUFBRCxDQUFuQixDQUFsQixHQUErQ0QsRUFBL0MsR0FDQU8sa0JBQWtCLENBQUNkLGtCQUFrQixDQUFDSyxHQUFELENBQW5CLENBRHpCO0FBRUQsQ0F4QkQ7O0FBMEJBLElBQUlVLE9BQU8sR0FBR0UsS0FBSyxDQUFDRixPQUFOLElBQWlCLFVBQVVHLEVBQVYsRUFBYztBQUMzQyxTQUFPQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkosRUFBL0IsTUFBdUMsZ0JBQTlDO0FBQ0QsQ0FGRDs7QUFJQSxTQUFTUixHQUFULENBQWNRLEVBQWQsRUFBa0JLLENBQWxCLEVBQXFCO0FBQ25CLE1BQUlMLEVBQUUsQ0FBQ1IsR0FBUCxFQUFZLE9BQU9RLEVBQUUsQ0FBQ1IsR0FBSCxDQUFPYSxDQUFQLENBQVA7QUFDWixNQUFJQyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdQLEVBQUUsQ0FBQ1EsTUFBdkIsRUFBK0JELENBQUMsRUFBaEMsRUFBb0M7QUFDbENELE9BQUcsQ0FBQ0csSUFBSixDQUFTSixDQUFDLENBQUNMLEVBQUUsQ0FBQ08sQ0FBRCxDQUFILEVBQVFBLENBQVIsQ0FBVjtBQUNEOztBQUNELFNBQU9ELEdBQVA7QUFDRDs7QUFFRCxJQUFJYixVQUFVLEdBQUdRLE1BQU0sQ0FBQ1MsSUFBUCxJQUFlLFVBQVV2QixHQUFWLEVBQWU7QUFDN0MsTUFBSW1CLEdBQUcsR0FBRyxFQUFWOztBQUNBLE9BQUssSUFBSUssR0FBVCxJQUFnQnhCLEdBQWhCLEVBQXFCO0FBQ25CLFFBQUljLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQlUsY0FBakIsQ0FBZ0NSLElBQWhDLENBQXFDakIsR0FBckMsRUFBMEN3QixHQUExQyxDQUFKLEVBQW9ETCxHQUFHLENBQUNHLElBQUosQ0FBU0UsR0FBVDtBQUNyRDs7QUFDRCxTQUFPTCxHQUFQO0FBQ0QsQ0FORCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgc3dpdGNoICh0eXBlb2Ygdikge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gdjtcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHYgPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc0Zpbml0ZSh2KSA/IHYgOiAnJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqLCBzZXAsIGVxLCBuYW1lKSB7XG4gIHNlcCA9IHNlcCB8fCAnJic7XG4gIGVxID0gZXEgfHwgJz0nO1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgb2JqID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKGspIHtcbiAgICAgIHZhciBrcyA9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoaykpICsgZXE7XG4gICAgICBpZiAoaXNBcnJheShvYmpba10pKSB7XG4gICAgICAgIHJldHVybiBtYXAob2JqW2tdLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7XG4gICAgICAgIH0pLmpvaW4oc2VwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7XG4gICAgICB9XG4gICAgfSkuam9pbihzZXApO1xuXG4gIH1cblxuICBpZiAoIW5hbWUpIHJldHVybiAnJztcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUobmFtZSkpICsgZXEgK1xuICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmopKTtcbn07XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4cykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5mdW5jdGlvbiBtYXAgKHhzLCBmKSB7XG4gIGlmICh4cy5tYXApIHJldHVybiB4cy5tYXAoZik7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIHJlcy5wdXNoKGYoeHNbaV0sIGkpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHJlcy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/encode.js\n");

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.decode = exports.parse = __webpack_require__(/*! ./decode */ \"./node_modules/querystring-es3/decode.js\");\nexports.encode = exports.stringify = __webpack_require__(/*! ./encode */ \"./node_modules/querystring-es3/encode.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzP2IzODMiXSwibmFtZXMiOlsiZXhwb3J0cyIsImRlY29kZSIsInBhcnNlIiwicmVxdWlyZSIsImVuY29kZSIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE9BQU8sQ0FBQ0MsTUFBUixHQUFpQkQsT0FBTyxDQUFDRSxLQUFSLEdBQWdCQyxtQkFBTyxDQUFDLDBEQUFELENBQXhDO0FBQ0FILE9BQU8sQ0FBQ0ksTUFBUixHQUFpQkosT0FBTyxDQUFDSyxTQUFSLEdBQW9CRixtQkFBTyxDQUFDLDBEQUFELENBQTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/querystring-es3/index.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n/*<replacement>*/\n\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\n\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\nutil.inherits(Duplex, Readable);\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  if (options && options.readable === false) this.readable = false;\n  if (options && options.writable === false) this.writable = false;\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n  pna.nextTick(cb, err);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcz9iMTlhIl0sIm5hbWVzIjpbInBuYSIsInJlcXVpcmUiLCJvYmplY3RLZXlzIiwiT2JqZWN0Iiwia2V5cyIsIm9iaiIsImtleSIsInB1c2giLCJtb2R1bGUiLCJleHBvcnRzIiwiRHVwbGV4IiwidXRpbCIsImNyZWF0ZSIsImluaGVyaXRzIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsInByb3RvdHlwZSIsInYiLCJsZW5ndGgiLCJtZXRob2QiLCJvcHRpb25zIiwiY2FsbCIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25jZSIsIm9uZW5kIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3dyaXRhYmxlU3RhdGUiLCJoaWdoV2F0ZXJNYXJrIiwiZW5kZWQiLCJuZXh0VGljayIsIm9uRW5kTlQiLCJzZWxmIiwiZW5kIiwiX3JlYWRhYmxlU3RhdGUiLCJ1bmRlZmluZWQiLCJkZXN0cm95ZWQiLCJzZXQiLCJ2YWx1ZSIsIl9kZXN0cm95IiwiZXJyIiwiY2IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVhO0FBRWI7O0FBRUEsSUFBSUEsR0FBRyxHQUFHQyxtQkFBTyxDQUFDLDBFQUFELENBQWpCO0FBQ0E7O0FBRUE7OztBQUNBLElBQUlDLFVBQVUsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLElBQWUsVUFBVUMsR0FBVixFQUFlO0FBQzdDLE1BQUlELElBQUksR0FBRyxFQUFYOztBQUNBLE9BQUssSUFBSUUsR0FBVCxJQUFnQkQsR0FBaEIsRUFBcUI7QUFDbkJELFFBQUksQ0FBQ0csSUFBTCxDQUFVRCxHQUFW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QU8sS0FBS0QsY0FBTCxDQUFvQkUsU0FBcEIsSUFBaUMsS0FBS1QsY0FBTCxDQUFvQlMsU0FBNUQ7QUFDRCxHQU5rRDtBQU9uREMsS0FBRyxFQUFFLGFBQVVDLEtBQVYsRUFBaUI7QUFDcEI7QUFDQTtBQUNBLFFBQUksS0FBS0osY0FBTCxLQUF3QkMsU0FBeEIsSUFBcUMsS0FBS1IsY0FBTCxLQUF3QlEsU0FBakUsRUFBNEU7QUFDMUU7QUFDRCxLQUxtQixDQU9wQjtBQUNBOzs7QUFDQSxTQUFLRCxjQUFMLENBQW9CRSxTQUFwQixHQUFnQ0UsS0FBaEM7QUFDQSxTQUFLWCxjQUFMLENBQW9CUyxTQUFwQixHQUFnQ0UsS0FBaEM7QUFDRDtBQWxCa0QsQ0FBckQ7O0FBcUJBL0IsTUFBTSxDQUFDTSxTQUFQLENBQWlCMEIsUUFBakIsR0FBNEIsVUFBVUMsR0FBVixFQUFlQyxFQUFmLEVBQW1CO0FBQzdDLE9BQUtyQyxJQUFMLENBQVUsSUFBVjtBQUNBLE9BQUs2QixHQUFMO0FBRUFwQyxLQUFHLENBQUNpQyxRQUFKLENBQWFXLEVBQWIsRUFBaUJELEdBQWpCO0FBQ0QsQ0FMRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_duplex.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\n/*<replacement>*/\n\n\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzPzc4MGYiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlBhc3NUaHJvdWdoIiwiVHJhbnNmb3JtIiwicmVxdWlyZSIsInV0aWwiLCJPYmplY3QiLCJjcmVhdGUiLCJpbmhlcml0cyIsIm9wdGlvbnMiLCJjYWxsIiwicHJvdG90eXBlIiwiX3RyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJjYiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVhOztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLFdBQWpCOztBQUVBLElBQUlDLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxvRkFBRCxDQUF2QjtBQUVBOzs7QUFDQSxJQUFJQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSCxtQkFBTyxDQUFDLDZEQUFELENBQXJCLENBQVg7QUFDQUMsSUFBSSxDQUFDRyxRQUFMLEdBQWdCSixtQkFBTyxDQUFDLDZEQUFELENBQXZCO0FBQ0E7O0FBRUFDLElBQUksQ0FBQ0csUUFBTCxDQUFjTixXQUFkLEVBQTJCQyxTQUEzQjs7QUFFQSxTQUFTRCxXQUFULENBQXFCTyxPQUFyQixFQUE4QjtBQUM1QixNQUFJLEVBQUUsZ0JBQWdCUCxXQUFsQixDQUFKLEVBQW9DLE9BQU8sSUFBSUEsV0FBSixDQUFnQk8sT0FBaEIsQ0FBUDtBQUVwQ04sV0FBUyxDQUFDTyxJQUFWLENBQWUsSUFBZixFQUFxQkQsT0FBckI7QUFDRDs7QUFFRFAsV0FBVyxDQUFDUyxTQUFaLENBQXNCQyxVQUF0QixHQUFtQyxVQUFVQyxLQUFWLEVBQWlCQyxRQUFqQixFQUEyQkMsRUFBM0IsRUFBK0I7QUFDaEVBLElBQUUsQ0FBQyxJQUFELEVBQU9GLEtBQVAsQ0FBRjtBQUNELENBRkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_passthrough.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar debugUtil = __webpack_require__(/*! util */ 0);\n\nvar debug = void 0;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ \"./node_modules/readable-stream/lib/internal/streams/BufferList.js\");\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nvar StringDecoder;\nutil.inherits(Readable, Stream);\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.\n\n  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  if (!(this instanceof Readable)) return new Readable(options);\n  this._readableState = new ReadableState(options, this); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  return er;\n} // if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\n\n\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n}; // Don't raise the hwm > 8MB\n\n\nvar MAX_HWM = 0x800000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true; // emit 'readable' now to make sure it gets picked up.\n\n  emitReadable(stream);\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  } // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n\n\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {}\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList; // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n  return ret;\n} // Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n\n  return ret;\n} // Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n} // Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n\n      break;\n    }\n\n    ++c;\n  }\n\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_readable.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\nmodule.exports = Transform;\n\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n/*<replacement>*/\n\n\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n  return stream.push(null);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_transform.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar util = Object.create(__webpack_require__(/*! core-util-is */ \"./node_modules/core-util-is/lib/util.js\"));\nutil.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: __webpack_require__(/*! util-deprecate */ \"./node_modules/util-deprecate/browser.js\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/\n\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.\n\n  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\"); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb\n\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      stream.emit('error', err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/_stream_writable.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n\nvar util = __webpack_require__(/*! util */ 1);\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = {\n      data: v,\n      next: null\n    };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = {\n      data: v,\n      next: this.head\n    };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n\n    while (p = p.next) {\n      ret += s + p.data;\n    }\n\n    return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({\n      length: this.length\n    });\n    return this.constructor.name + ' ' + obj;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanM/NWUxYSJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiQnVmZmVyIiwicmVxdWlyZSIsInV0aWwiLCJjb3B5QnVmZmVyIiwic3JjIiwidGFyZ2V0Iiwib2Zmc2V0IiwiY29weSIsIm1vZHVsZSIsImV4cG9ydHMiLCJCdWZmZXJMaXN0IiwiaGVhZCIsInRhaWwiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJwdXNoIiwidiIsImVudHJ5IiwiZGF0YSIsIm5leHQiLCJ1bnNoaWZ0Iiwic2hpZnQiLCJyZXQiLCJjbGVhciIsImpvaW4iLCJzIiwicCIsImNvbmNhdCIsIm4iLCJhbGxvYyIsImFsbG9jVW5zYWZlIiwiaSIsImluc3BlY3QiLCJjdXN0b20iLCJvYmoiLCJjb25zdHJ1Y3RvciIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVNBLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRDtBQUFFLE1BQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDO0FBQUUsVUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUEyRDtBQUFFOztBQUV6SixJQUFJQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMsd0RBQUQsQ0FBUCxDQUF1QkQsTUFBcEM7O0FBQ0EsSUFBSUUsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLGFBQUQsQ0FBbEI7O0FBRUEsU0FBU0UsVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUJDLE1BQXpCLEVBQWlDQyxNQUFqQyxFQUF5QztBQUN2Q0YsS0FBRyxDQUFDRyxJQUFKLENBQVNGLE1BQVQsRUFBaUJDLE1BQWpCO0FBQ0Q7O0FBRURFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFZO0FBQzNCLFdBQVNDLFVB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LElBQWI7QUFDQSxRQUFJb0IsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsV0FBT0wsQ0FBUCxFQUFVO0FBQ1J2QixnQkFBVSxDQUFDdUIsQ0FBQyxDQUFDUixJQUFILEVBQVNJLEdBQVQsRUFBY1MsQ0FBZCxDQUFWO0FBQ0FBLE9BQUMsSUFBSUwsQ0FBQyxDQUFDUixJQUFGLENBQU9MLE1BQVo7QUFDQWEsT0FBQyxHQUFHQSxDQUFDLENBQUNQLElBQU47QUFDRDs7QUFDRCxXQUFPRyxHQUFQO0FBQ0QsR0FaRDs7QUFjQSxTQUFPWixVQUFQO0FBQ0QsQ0E1RGdCLEVBQWpCOztBQThEQSxJQUFJUixJQUFJLElBQUlBLElBQUksQ0FBQzhCLE9BQWIsSUFBd0I5QixJQUFJLENBQUM4QixPQUFMLENBQWFDLE1BQXpDLEVBQWlEO0FBQy9DekIsUUFBTSxDQUFDQyxPQUFQLENBQWVLLFNBQWYsQ0FBeUJaLElBQUksQ0FBQzhCLE9BQUwsQ0FBYUMsTUFBdEMsSUFBZ0QsWUFBWTtBQUMxRCxRQUFJQyxHQUFHLEdBQUdoQyxJQUFJLENBQUM4QixPQUFMLENBQWE7QUFBRW5CLFlBQU0sRUFBRSxLQUFLQTtBQUFmLEtBQWIsQ0FBVjtBQUNBLFdBQU8sS0FBS3NCLFdBQUwsQ0FBaUJDLElBQWpCLEdBQXdCLEdBQXhCLEdBQThCRixHQUFyQztBQUNELEdBSEQ7QUFJRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/BufferList.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/*<replacement>*/\n\nvar pna = __webpack_require__(/*! process-nextick-args */ \"./node_modules/process-nextick-args/index.js\");\n/*</replacement>*/\n// undocumented cb() API, needed for core, not for public API\n\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanM/NDY4MSJdLCJuYW1lcyI6WyJwbmEiLCJyZXF1aXJlIiwiZGVzdHJveSIsImVyciIsImNiIiwiX3RoaXMiLCJyZWFkYWJsZURlc3Ryb3llZCIsIl9yZWFkYWJsZVN0YXRlIiwiZGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJfd3JpdGFibGVTdGF0ZSIsImVycm9yRW1pdHRlZCIsIm5leHRUaWNrIiwiZW1pdEVycm9yTlQiLCJfZGVzdHJveSIsInVuZGVzdHJveSIsInJlYWRpbmciLCJlbmRlZCIsImVuZEVtaXR0ZWQiLCJlbmRpbmciLCJmaW5pc2hlZCIsInNlbGYiLCJlbWl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7QUFFYjs7QUFFQSxJQUFJQSxHQUFHLEdBQUdDLG1CQUFPLENBQUMsMEVBQUQsQ0FBakI7QUFDQTtBQUVBOzs7QUFDQSxTQUFTQyxPQUFULENBQWlCQyxHQUFqQixFQUFzQkMsRUFBdEIsRUFBMEI7QUFDeEIsTUFBSUMsS0FBSyxHQUFHLElBQVo7O0FBRUEsTUFBSUMsaUJBQWlCLEdBQUcsS0FBS0MsY0FBTCxJQUF1QixLQUFLQSxjQUFMLENBQW9CQyxTQUFuRTtBQUNBLE1BQUlDLGlCQUFpQixHQUFHLEtBQUtDLGNBQUwsSUFBdUIsS0FBS0EsY0FBTCxDQUFvQkYsU0FBbkU7O0FBRUEsTUFBSUYsaUJBQWlCLElBQUlHLGlCQUF6QixFQUE0QztBQUMxQyxRQUFJTCxFQUFKLEVBQVE7QUFDTkEsUUFBRSxDQUFDRCxHQUFELENBQUY7QUFDRCxLQUZELE1BRU8sSUFBSUEsR0FBRyxLQUFLLENBQUMsS0FBS08sY0FBTixJQUF3QixDQUFDLEtBQUtBLGNBQUwsQ0FBb0JDLFlBQWxELENBQVAsRUFBd0U7QUFDN0VYLFNBQUcsQ0FBQ1ksUUFBSixDQUFhQyxXQUFiLEVBQTBCLElBQTFCLEVBQWdDVixHQUFoQztBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBYnVCLENBZXhCO0FBQ0E7OztBQUVBLE1BQUksS0FBS0ksY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMLENBQW9CQyxTQUFwQixHQUFnQyxJQUFoQztBQUNELEdBcEJ1QixDQXNCeEI7OztBQUNBLE1BQUksS0FBS0UsY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMLENBQW9CRixTQUFwQixHQUFnQyxJQUFoQztBQUNEOztBQUVELE9BQUtNLFFBQUwsQ0FBY1gsR0FBRyxJQUFJLElBQXJCLEVBQTJCLFVBQVVBLEdBQVYsRUFBZTtBQUN4QyxRQUFJLENBQUNDLEVBQUQsSUFBT0QsR0FBWCxFQUFnQjtBQUNkSCxTQUFHLENBQUNZLFFBQUosQ0FBYUMsV0FBYixFQUEwQlIsS0FBMUIsRUFBaUNGLEdBQWpDOztBQUNBLFVBQUlFLEtBQUssQ0FBQ0ssY0FBVixFQUEwQjtBQUN4QkwsYUFBSyxDQUFDSyxjQUFOLENBQXFCQyxZQUFyQixHQUFvQyxJQUFwQztBQUNEO0FBQ0YsS0FMRCxNQUtPLElBQUlQLEVBQUosRUFBUTtBQUNiQSxRQUFFLENBQUNELEdBQUQsQ0FBRjtBQUNEO0FBQ0YsR0FURDs7QUFXQSxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTWSxTQUFULEdBQXFCO0FBQ25CLE1BQUksS0FBS1IsY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMLENBQW9CQyxTQUFwQixHQUFnQyxLQUFoQztBQUNBLFNBQUtELGNBQUwsQ0FBb0JTLE9BQXBCLEdBQThCLEtBQTlCO0FBQ0EsU0FBS1QsY0FBTCxDQUFvQlUsS0FBcEIsR0FBNEIsS0FBNUI7QUFDQSxTQUFLVixjQUFMLENBQW9CVyxVQUFwQixHQUFpQyxLQUFqQztBQUNEOztBQUVELE1BQUksS0FBS1IsY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMLENBQW9CRixTQUFwQixHQUFnQyxLQUFoQztBQUNBLFNBQUtFLGNBQUwsQ0FBb0JPLEtBQXBCLEdBQTRCLEtBQTVCO0FBQ0EsU0FBS1AsY0FBTCxDQUFvQlMsTUFBcEIsR0FBNkIsS0FBN0I7QUFDQSxTQUFLVCxjQUFMLENBQW9CVSxRQUFwQixHQUErQixLQUEvQjtBQUNBLFNBQUtWLGNBQUwsQ0FBb0JDLFlBQXBCLEdBQW1DLEtBQW5DO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTRSxXQUFULENBQXFCUSxJQUFyQixFQUEyQmxCLEdBQTNCLEVBQWdDO0FBQzlCa0IsTUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVixFQUFtQm5CLEdBQW5CO0FBQ0Q7O0FBRURvQixNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZnRCLFNBQU8sRUFBRUEsT0FETTtBQUVmYSxXQUFTLEVBQUVBO0FBRkksQ0FBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/destroy.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzPzQyOWIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJFdmVudEVtaXR0ZXIiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLG1CQUFPLENBQUMsK0NBQUQsQ0FBUCxDQUFrQkMsWUFBbkMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js\n");

/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\nexports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\nexports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\nexports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"./node_modules/readable-stream/lib/_stream_passthrough.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanM/ZTM3MiJdLCJuYW1lcyI6WyJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsIlN0cmVhbSIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJEdXBsZXgiLCJUcmFuc2Zvcm0iLCJQYXNzVGhyb3VnaCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU8sR0FBR0MsTUFBTSxDQUFDRCxPQUFQLEdBQWlCRSxtQkFBTyxDQUFDLHlGQUFELENBQWxDO0FBQ0FGLE9BQU8sQ0FBQ0csTUFBUixHQUFpQkgsT0FBakI7QUFDQUEsT0FBTyxDQUFDSSxRQUFSLEdBQW1CSixPQUFuQjtBQUNBQSxPQUFPLENBQUNLLFFBQVIsR0FBbUJILG1CQUFPLENBQUMseUZBQUQsQ0FBMUI7QUFDQUYsT0FBTyxDQUFDTSxNQUFSLEdBQWlCSixtQkFBTyxDQUFDLHFGQUFELENBQXhCO0FBQ0FGLE9BQU8sQ0FBQ08sU0FBUixHQUFvQkwsbUJBQU8sQ0FBQywyRkFBRCxDQUEzQjtBQUNBRixPQUFPLENBQUNRLFdBQVIsR0FBc0JOLG1CQUFPLENBQUMsK0ZBQUQsQ0FBN0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IGV4cG9ydHM7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/readable-stream/readable-browser.js\n");

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\nvar Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers\n\nfunction copyProps(src, dst) {\n  for (var key in src) {\n    dst[key] = src[key];\n  }\n}\n\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer;\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports);\n  exports.Buffer = SafeBuffer;\n}\n\nfunction SafeBuffer(arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length);\n} // Copy static methods from Buffer\n\n\ncopyProps(Buffer, SafeBuffer);\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number');\n  }\n\n  return Buffer(arg, encodingOrOffset, length);\n};\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  var buf = Buffer(size);\n\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding);\n    } else {\n      buf.fill(fill);\n    }\n  } else {\n    buf.fill(0);\n  }\n\n  return buf;\n};\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  return Buffer(size);\n};\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number');\n  }\n\n  return buffer.SlowBuffer(size);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanM/ODcwNyJdLCJuYW1lcyI6WyJidWZmZXIiLCJyZXF1aXJlIiwiQnVmZmVyIiwiY29weVByb3BzIiwic3JjIiwiZHN0Iiwia2V5IiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJtb2R1bGUiLCJleHBvcnRzIiwiU2FmZUJ1ZmZlciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwidW5kZWZpbmVkIiwiU2xvd0J1ZmZlciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsOENBQUQsQ0FBcEI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRixNQUFNLENBQUNFLE1BQXBCLEMsQ0FFQTs7QUFDQSxTQUFTQyxTQUFULENBQW9CQyxHQUFwQixFQUF5QkMsR0FBekIsRUFBOEI7QUFDNUIsT0FBSyxJQUFJQyxHQUFULElBQWdCRixHQUFoQixFQUFxQjtBQUNuQkMsT0FBRyxDQUFDQyxHQUFELENBQUgsR0FBV0YsR0FBRyxDQUFDRSxHQUFELENBQWQ7QUFDRDtBQUNGOztBQUNELElBQUlKLE1BQU0sQ0FBQ0ssSUFBUCxJQUFlTCxNQUFNLENBQUNNLEtBQXRCLElBQStCTixNQUFNLENBQUNPLFdBQXRDLElBQXFEUCxNQUFNLENBQUNRLGVBQWhFLEVBQWlGO0FBQy9FQyxRQUFNLENBQUNDLE9BQVAsR0FBaUJaLE1BQWpCO0FBQ0QsQ0FGRCxNQUVPO0FBQ0w7QUFDQUcsV0FBUyxDQUFDSCxNQUFELEVBQVNZLE9BQVQsQ0FBVDtBQUNBQSxTQUFPLENBQUNWLE1BQVIsR0FBaUJXLFVBQWpCO0FBQ0Q7O0FBRUQsU0FBU0EsVUFBVCxDQUFxQkMsR0FBckIsRUFBMEJDLGdCQUExQixFQUE0Q0MsTUFBNUMsRUFBb0Q7QUFDbEQsU0FBT2QsTUFBTSxDQUFDWSxHQUFELEVBQU1DLGdCQUFOLEVBQXdCQyxNQUF4QixDQUFiO0FBQ0QsQyxDQUVEOzs7QUFDQWIsU0FBUyxDQUFDRCxNQUFELEVBQVNXLFVBQVQsQ0FBVDs7QUFFQUEsVUFBVSxDQUFDTixJQUFYLEdBQWtCLFVBQVVPLEdBQVYsRUFBZUMsZ0JBQWYsRUFBaUNDLE1BQWpDLEVBQXlDO0FBQ3pELE1BQUksT0FBT0YsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCLFVBQU0sSUFBSUcsU0FBSixDQUFjLCtCQUFkLENBQU47QUFDRDs7QUFDRCxTQUFPZixNQUFNLENBQUNZLEdBQUQsRUFBTUMsZ0JBQU4sRUFBd0JDLE1BQXhCLENBQWI7QUFDRCxDQUxEOztBQU9BSCxVQUFVLENBQUNMLEtBQVgsR0FBbUIsVUFBVVUsSUFBVixFQUFnQkMsSUFBaEIsRUFBc0JDLFFBQXRCLEVBQWdDO0FBQ2pELE1BQUksT0FBT0YsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUM1QixVQUFNLElBQUlELFNBQUosQ0FBYywyQkFBZCxDQUFOO0FBQ0Q7O0FBQ0QsTUFBSUksR0FBRyxHQUFHbkIsTUFBTSxDQUFDZ0IsSUFBRCxDQUFoQjs7QUFDQSxNQUFJQyxJQUFJLEtBQUtHLFNBQWIsRUFBd0I7QUFDdEIsUUFBSSxPQUFPRixRQUFQLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDQyxTQUFHLENBQUNGLElBQUosQ0FBU0EsSUFBVCxFQUFlQyxRQUFmO0FBQ0QsS0FGRCxNQUVPO0FBQ0xDLFNBQUcsQ0FBQ0YsSUFBSixDQUFTQSxJQUFUO0FBQ0Q7QUFDRixHQU5ELE1BTU87QUFDTEUsT0FBRyxDQUFDRixJQUFKLENBQVMsQ0FBVDtBQUNEOztBQUNELFNBQU9FLEdBQVA7QUFDRCxDQWZEOztBQWlCQVIsVUFBVSxDQUFDSixXQUFYLEdBQXlCLFVBQVVTLElBQVYsRUFBZ0I7QUFDdkMsTUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLFVBQU0sSUFBSUQsU0FBSixDQUFjLDJCQUFkLENBQU47QUFDRDs7QUFDRCxTQUFPZixNQUFNLENBQUNnQixJQUFELENBQWI7QUFDRCxDQUxEOztBQU9BTCxVQUFVLENBQUNILGVBQVgsR0FBNkIsVUFBVVEsSUFBVixFQUFnQjtBQUMzQyxNQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDNUIsVUFBTSxJQUFJRCxTQUFKLENBQWMsMkJBQWQsQ0FBTjtBQUNEOztBQUNELFNBQU9qQixNQUFNLENBQUN1QixVQUFQLENBQWtCTCxJQUFsQixDQUFQO0FBQ0QsQ0FMRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/safe-buffer/index.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n    return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var registerImmediate;\n\n  function setImmediate(callback) {\n    // Callback can either be a function or a string\n    if (typeof callback !== \"function\") {\n      callback = new Function(\"\" + callback);\n    } // Copy function arguments\n\n\n    var args = new Array(arguments.length - 1);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 1];\n    } // Store and register the task\n\n\n    var task = {\n      callback: callback,\n      args: args\n    };\n    tasksByHandle[nextHandle] = task;\n    registerImmediate(nextHandle);\n    return nextHandle++;\n  }\n\n  function clearImmediate(handle) {\n    delete tasksByHandle[handle];\n  }\n\n  function run(task) {\n    var callback = task.callback;\n    var args = task.args;\n\n    switch (args.length) {\n      case 0:\n        callback();\n        break;\n\n      case 1:\n        callback(args[0]);\n        break;\n\n      case 2:\n        callback(args[0], args[1]);\n        break;\n\n      case 3:\n        callback(args[0], args[1], args[2]);\n        break;\n\n      default:\n        callback.apply(undefined, args);\n        break;\n    }\n  }\n\n  function runIfPresent(handle) {\n    // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // \"too much recursion\" error.\n      setTimeout(runIfPresent, 0, handle);\n    } else {\n      var task = tasksByHandle[handle];\n\n      if (task) {\n        currentlyRunningATask = true;\n\n        try {\n          run(task);\n        } finally {\n          clearImmediate(handle);\n          currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  function installNextTickImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      process.nextTick(function () {\n        runIfPresent(handle);\n      });\n    };\n  }\n\n  function canUsePostMessage() {\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `global.postMessage` means something completely different and can't be used for this purpose.\n    if (global.postMessage && !global.importScripts) {\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n  }\n\n  function installPostMessageImplementation() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n    var onGlobalMessage = function onGlobalMessage(event) {\n      if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n        runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    if (global.addEventListener) {\n      global.addEventListener(\"message\", onGlobalMessage, false);\n    } else {\n      global.attachEvent(\"onmessage\", onGlobalMessage);\n    }\n\n    registerImmediate = function registerImmediate(handle) {\n      global.postMessage(messagePrefix + handle, \"*\");\n    };\n  }\n\n  function installMessageChannelImplementation() {\n    var channel = new MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n      runIfPresent(handle);\n    };\n\n    registerImmediate = function registerImmediate(handle) {\n      channel.port2.postMessage(handle);\n    };\n  }\n\n  function installReadyStateChangeImplementation() {\n    var html = doc.documentElement;\n\n    registerImmediate = function registerImmediate(handle) {\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var script = doc.createElement(\"script\");\n\n      script.onreadystatechange = function () {\n        runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n    };\n  }\n\n  function installSetTimeoutImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      setTimeout(runIfPresent, 0, handle);\n    };\n  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n  if ({}.toString.call(global.process) === \"[object process]\") {\n    // For Node.js before 0.9\n    installNextTickImplementation();\n  } else if (canUsePostMessage()) {\n    // For non-IE10 modern browsers\n    installPostMessageImplementation();\n  } else if (global.MessageChannel) {\n    // For web workers, where supported\n    installMessageChannelImplementation();\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n    // For IE 6â€“8\n    installReadyStateChangeImplementation();\n  } else {\n    // For older browsers\n    installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n})(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/stream-http/index.js":
/*!*******************************************!*\
  !*** ./node_modules/stream-http/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(/*! ./lib/request */ \"./node_modules/stream-http/lib/request.js\");\n\nvar response = __webpack_require__(/*! ./lib/response */ \"./node_modules/stream-http/lib/response.js\");\n\nvar extend = __webpack_require__(/*! xtend */ \"./node_modules/xtend/immutable.js\");\n\nvar statusCodes = __webpack_require__(/*! builtin-status-codes */ \"./node_modules/builtin-status-codes/browser.js\");\n\nvar url = __webpack_require__(/*! url */ \"./node_modules/url/url.js\");\n\nvar http = exports;\n\nhttp.request = function (opts, cb) {\n  if (typeof opts === 'string') opts = url.parse(opts);else opts = extend(opts); // Normally, the page is loaded from http or https, so not specifying a protocol\n  // will result in a (valid) protocol-relative url. However, this won't work if\n  // the protocol is something else, like 'file:'\n\n  var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';\n  var protocol = opts.protocol || defaultProtocol;\n  var host = opts.hostname || opts.host;\n  var port = opts.port;\n  var path = opts.path || '/'; // Necessary for IPv6 addresses\n\n  if (host && host.indexOf(':') !== -1) host = '[' + host + ']'; // This may be a relative url. The browser should always be able to interpret it correctly.\n\n  opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;\n  opts.method = (opts.method || 'GET').toUpperCase();\n  opts.headers = opts.headers || {}; // Also valid opts.auth, opts.mode\n\n  var req = new ClientRequest(opts);\n  if (cb) req.on('response', cb);\n  return req;\n};\n\nhttp.get = function get(opts, cb) {\n  var req = http.request(opts, cb);\n  req.end();\n  return req;\n};\n\nhttp.ClientRequest = ClientRequest;\nhttp.IncomingMessage = response.IncomingMessage;\n\nhttp.Agent = function () {};\n\nhttp.Agent.defaultMaxSockets = 4;\nhttp.globalAgent = new http.Agent();\nhttp.STATUS_CODES = statusCodes;\nhttp.METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvaW5kZXguanM/OTQ5MCJdLCJuYW1lcyI6WyJDbGllbnRSZXF1ZXN0IiwicmVxdWlyZSIsInJlc3BvbnNlIiwiZXh0ZW5kIiwic3RhdHVzQ29kZXMiLCJ1cmwiLCJodHRwIiwiZXhwb3J0cyIsInJlcXVlc3QiLCJvcHRzIiwiY2IiLCJwYXJzZSIsImRlZmF1bHRQcm90b2NvbCIsImdsb2JhbCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJzZWFyY2giLCJob3N0IiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aCIsImluZGV4T2YiLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsImhlYWRlcnMiLCJyZXEiLCJvbiIsImdldCIsImVuZCIsIkluY29taW5nTWVzc2FnZSIsIkFnZW50IiwiZGVmYXVsdE1heFNvY2tldHMiLCJnbG9iYWxBZ2VudCIsIlNUQVRVU19DT0RFUyIsIk1FVEhPRFMiXSwibWFwcGluZ3MiOiJBQUFBLGtEQUFJQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsZ0VBQUQsQ0FBM0I7O0FBQ0EsSUFBSUMsUUFBUSxHQUFHRCxtQkFBTyxDQUFDLGtFQUFELENBQXRCOztBQUNBLElBQUlFLE1BQU0sR0FBR0YsbUJBQU8sQ0FBQyxnREFBRCxDQUFwQjs7QUFDQSxJQUFJRyxXQUFXLEdBQUdILG1CQUFPLENBQUMsNEVBQUQsQ0FBekI7O0FBQ0EsSUFBSUksR0FBRyxHQUFHSixtQkFBTyxDQUFDLHNDQUFELENBQWpCOztBQUVBLElBQUlLLElBQUksR0FBR0MsT0FBWDs7QUFFQUQsSUFBSSxDQUFDRSxPQUFMLEdBQWUsVUFBVUMsSUFBVixFQUFnQkMsRUFBaEIsRUFBb0I7QUFDbEMsTUFBSSxPQUFPRCxJQUFQLEtBQWdCLFFBQXBCLEVBQ0NBLElBQUksR0FBR0osR0FBRyxDQUFDTSxLQUFKLENBQVVGLElBQVYsQ0FBUCxDQURELEtBR0NBLElBQUksR0FBR04sTUFBTSxDQUFDTSxJQUFELENBQWIsQ0FKaUMsQ0FNbEM7QUFDQTtBQUNBOztBQUNBLE1BQUlHLGVBQWUsR0FBR0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCQyxRQUFoQixDQUF5QkMsTUFBekIsQ0FBZ0MsV0FBaEMsTUFBaUQsQ0FBQyxDQUFsRCxHQUFzRCxPQUF0RCxHQUFnRSxFQUF0RjtBQUVBLE1BQUlELFFBQVEsR0FBR04sSUFBSSxDQUFDTSxRQUFMLElBQWlCSCxlQUFoQztBQUNBLE1BQUlLLElBQUksR0FBR1IsSUFBSSxDQUFDUyxRQUFMLElBQWlCVCxJQUFJLENBQUNRLElBQWpDO0FBQ0EsTUFBSUUsSUFBSSxHQUFHVixJQUFJLENBQUNVLElBQWhCO0FBQ0EsTUFBSUMsSUFBSSxHQUFHWCxJQUFJLENBQUNXLElBQUwsSUFBYSxHQUF4QixDQWRrQyxDQWdCbEM7O0FBQ0EsTUFBSUgsSUFBSSxJQUFJQSxJQUFJLENBQUNJLE9BQUwsQ0FBYSxHQUFiLE1BQXNCLENBQUMsQ0FBbkMsRUFDQ0osSUFBSSxHQUFHLE1BQU1BLElBQU4sR0FBYSxHQUFwQixDQWxCaUMsQ0FvQmxDOztBQUNBUixNQUFJLENBQUNKLEdBQUwsR0FBVyxDQUFDWSxJQUFJLEdBQUlGLFFBQVEsR0FBRyxJQUFYLEdBQWtCRSxJQUF0QixHQUE4QixFQUFuQyxLQUEwQ0UsSUFBSSxHQUFHLE1BQU1BLElBQVQsR0FBZ0IsRUFBOUQsSUFBb0VDLElBQS9FO0FBQ0FYLE1BQUksQ0FBQ2EsTUFBTCxHQUFjLENBQUNiLElBQUksQ0FBQ2EsTUFBTCxJQUFlLEtBQWhCLEVBQXVCQyxXQUF2QixFQUFkO0FBQ0FkLE1BQUksQ0FBQ2UsT0FBTCxHQUFlZixJQUFJLENBQUNlLE9BQUwsSUFBZ0IsRUFBL0IsQ0F2QmtDLENBeUJsQzs7QUFFQSxNQUFJQyxHQUFHLEdBQUcsSUFBSXpCLGFBQUosQ0FBa0JTLElBQWxCLENBQVY7QUFDQSxNQUFJQyxFQUFKLEVBQ0NlLEdBQUcsQ0FBQ0MsRUFBSixDQUFPLFVBQVAsRUFBbUJoQixFQUFuQjtBQUNELFNBQU9lLEdBQVA7QUFDQSxDQS9CRDs7QUFpQ0FuQixJQUFJLENBQUNxQixHQUFMLEdBQVcsU0FBU0EsR0FBVCxDQUFjbEIsSUFBZCxFQUFvQkMsRUFBcEIsRUFBd0I7QUFDbEMsTUFBSWUsR0FBRyxHQUFHbkIsSUFBSSxDQUFDRSxPQUFMLENBQWFDLElBQWIsRUFBbUJDLEVBQW5CLENBQVY7QUFDQWUsS0FBRyxDQUFDRyxHQUFKO0FBQ0EsU0FBT0gsR0FBUDtBQUNBLENBSkQ7O0FBTUFuQixJQUFJLENBQUNOLGFBQUwsR0FBcUJBLGFBQXJCO0FBQ0FNLElBQUksQ0FBQ3VCLGVBQUwsR0FBdUIzQixRQUFRLENBQUMyQixlQUFoQzs7QUFFQXZCLElBQUksQ0FBQ3dCLEtBQUwsR0FBYSxZQUFZLENBQUUsQ0FBM0I7O0FBQ0F4QixJQUFJLENBQUN3QixLQUFMLENBQVdDLGlCQUFYLEdBQStCLENBQS9CO0FBRUF6QixJQUFJLENBQUMwQixXQUFMLEdBQW1CLElBQUkxQixJQUFJLENBQUN3QixLQUFULEVBQW5CO0FBRUF4QixJQUFJLENBQUMyQixZQUFMLEdBQW9CN0IsV0FBcEI7QUFFQUUsSUFBSSxDQUFDNEIsT0FBTCxHQUFlLENBQ2QsVUFEYyxFQUVkLFNBRmMsRUFHZCxNQUhjLEVBSWQsUUFKYyxFQUtkLEtBTGMsRUFNZCxNQU5jLEVBT2QsTUFQYyxFQVFkLFVBUmMsRUFTZCxPQVRjLEVBVWQsWUFWYyxFQVdkLE9BWGMsRUFZZCxNQVpjLEVBYWQsUUFiYyxFQWNkLFNBZGMsRUFlZCxPQWZjLEVBZ0JkLE1BaEJjLEVBaUJkLFVBakJjLEVBa0JkLFdBbEJjLEVBbUJkLE9BbkJjLEVBb0JkLEtBcEJjLEVBcUJkLFFBckJjLEVBc0JkLFFBdEJjLEVBdUJkLFdBdkJjLEVBd0JkLE9BeEJjLEVBeUJkLFFBekJjLEVBMEJkLGFBMUJjLENBQWYsQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9zdHJlYW0taHR0cC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBDbGllbnRSZXF1ZXN0ID0gcmVxdWlyZSgnLi9saWIvcmVxdWVzdCcpXG52YXIgcmVzcG9uc2UgPSByZXF1aXJlKCcuL2xpYi9yZXNwb25zZScpXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKVxudmFyIHN0YXR1c0NvZGVzID0gcmVxdWlyZSgnYnVpbHRpbi1zdGF0dXMtY29kZXMnKVxudmFyIHVybCA9IHJlcXVpcmUoJ3VybCcpXG5cbnZhciBodHRwID0gZXhwb3J0c1xuXG5odHRwLnJlcXVlc3QgPSBmdW5jdGlvbiAob3B0cywgY2IpIHtcblx0aWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJylcblx0XHRvcHRzID0gdXJsLnBhcnNlKG9wdHMpXG5cdGVsc2Vcblx0XHRvcHRzID0gZXh0ZW5kKG9wdHMpXG5cblx0Ly8gTm9ybWFsbHksIHRoZSBwYWdlIGlzIGxvYWRlZCBmcm9tIGh0dHAgb3IgaHR0cHMsIHNvIG5vdCBzcGVjaWZ5aW5nIGEgcHJvdG9jb2xcblx0Ly8gd2lsbCByZXN1bHQgaW4gYSAodmFsaWQpIHByb3RvY29sLXJlbGF0aXZlIHVybC4gSG93ZXZlciwgdGhpcyB3b24ndCB3b3JrIGlmXG5cdC8vIHRoZSBwcm90b2NvbCBpcyBzb21ldGhpbmcgZWxzZSwgbGlrZSAnZmlsZTonXG5cdHZhciBkZWZhdWx0UHJvdG9jb2wgPSBnbG9iYWwubG9jYXRpb24ucHJvdG9jb2wuc2VhcmNoKC9eaHR0cHM/OiQvKSA9PT0gLTEgPyAnaHR0cDonIDogJydcblxuXHR2YXIgcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sIHx8IGRlZmF1bHRQcm90b2NvbFxuXHR2YXIgaG9zdCA9IG9wdHMuaG9zdG5hbWUgfHwgb3B0cy5ob3N0XG5cdHZhciBwb3J0ID0gb3B0cy5wb3J0XG5cdHZhciBwYXRoID0gb3B0cy5wYXRoIHx8ICcvJ1xuXG5cdC8vIE5lY2Vzc2FyeSBmb3IgSVB2NiBhZGRyZXNzZXNcblx0aWYgKGhvc3QgJiYgaG9zdC5pbmRleE9mKCc6JykgIT09IC0xKVxuXHRcdGhvc3QgPSAnWycgKyBob3N0ICsgJ10nXG5cblx0Ly8gVGhpcyBtYXkgYmUgYSByZWxhdGl2ZSB1cmwuIFRoZSBicm93c2VyIHNob3VsZCBhbHdheXMgYmUgYWJsZSB0byBpbnRlcnByZXQgaXQgY29ycmVjdGx5LlxuXHRvcHRzLnVybCA9IChob3N0ID8gKHByb3RvY29sICsgJy8vJyArIGhvc3QpIDogJycpICsgKHBvcnQgPyAnOicgKyBwb3J0IDogJycpICsgcGF0aFxuXHRvcHRzLm1ldGhvZCA9IChvcHRzLm1ldGhvZCB8fCAnR0VUJykudG9VcHBlckNhc2UoKVxuXHRvcHRzLmhlYWRlcnMgPSBvcHRzLmhlYWRlcnMgfHwge31cblxuXHQvLyBBbHNvIHZhbGlkIG9wdHMuYXV0aCwgb3B0cy5tb2RlXG5cblx0dmFyIHJlcSA9IG5ldyBDbGllbnRSZXF1ZXN0KG9wdHMpXG5cdGlmIChjYilcblx0XHRyZXEub24oJ3Jlc3BvbnNlJywgY2IpXG5cdHJldHVybiByZXFcbn1cblxuaHR0cC5nZXQgPSBmdW5jdGlvbiBnZXQgKG9wdHMsIGNiKSB7XG5cdHZhciByZXEgPSBodHRwLnJlcXVlc3Qob3B0cywgY2IpXG5cdHJlcS5lbmQoKVxuXHRyZXR1cm4gcmVxXG59XG5cbmh0dHAuQ2xpZW50UmVxdWVzdCA9IENsaWVudFJlcXVlc3Rcbmh0dHAuSW5jb21pbmdNZXNzYWdlID0gcmVzcG9uc2UuSW5jb21pbmdNZXNzYWdlXG5cbmh0dHAuQWdlbnQgPSBmdW5jdGlvbiAoKSB7fVxuaHR0cC5BZ2VudC5kZWZhdWx0TWF4U29ja2V0cyA9IDRcblxuaHR0cC5nbG9iYWxBZ2VudCA9IG5ldyBodHRwLkFnZW50KClcblxuaHR0cC5TVEFUVVNfQ09ERVMgPSBzdGF0dXNDb2Rlc1xuXG5odHRwLk1FVEhPRFMgPSBbXG5cdCdDSEVDS09VVCcsXG5cdCdDT05ORUNUJyxcblx0J0NPUFknLFxuXHQnREVMRVRFJyxcblx0J0dFVCcsXG5cdCdIRUFEJyxcblx0J0xPQ0snLFxuXHQnTS1TRUFSQ0gnLFxuXHQnTUVSR0UnLFxuXHQnTUtBQ1RJVklUWScsXG5cdCdNS0NPTCcsXG5cdCdNT1ZFJyxcblx0J05PVElGWScsXG5cdCdPUFRJT05TJyxcblx0J1BBVENIJyxcblx0J1BPU1QnLFxuXHQnUFJPUEZJTkQnLFxuXHQnUFJPUFBBVENIJyxcblx0J1BVUkdFJyxcblx0J1BVVCcsXG5cdCdSRVBPUlQnLFxuXHQnU0VBUkNIJyxcblx0J1NVQlNDUklCRScsXG5cdCdUUkFDRScsXG5cdCdVTkxPQ0snLFxuXHQnVU5TVUJTQ1JJQkUnXG5dIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/stream-http/index.js\n");

/***/ }),

/***/ "./node_modules/stream-http/lib/capability.js":
/*!****************************************************!*\
  !*** ./node_modules/stream-http/lib/capability.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);\nexports.writableStream = isFunction(global.WritableStream);\nexports.abortController = isFunction(global.AbortController);\nexports.blobConstructor = false;\n\ntry {\n  new Blob([new ArrayBuffer(1)]);\n  exports.blobConstructor = true;\n} catch (e) {} // The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\n\n\nvar xhr;\n\nfunction getXHR() {\n  // Cache the xhr value\n  if (xhr !== undefined) return xhr;\n\n  if (global.XMLHttpRequest) {\n    xhr = new global.XMLHttpRequest(); // If XDomainRequest is available (ie only, where xhr might not work\n    // cross domain), use the page location. Otherwise use example.com\n    // Note: this doesn't actually make an http request.\n\n    try {\n      xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');\n    } catch (e) {\n      xhr = null;\n    }\n  } else {\n    // Service workers don't have XHR\n    xhr = null;\n  }\n\n  return xhr;\n}\n\nfunction checkTypeSupport(type) {\n  var xhr = getXHR();\n  if (!xhr) return false;\n\n  try {\n    xhr.responseType = type;\n    return xhr.responseType === type;\n  } catch (e) {}\n\n  return false;\n} // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\n\n\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice); // If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\n\nexports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer'); // These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\n\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer'); // If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\n\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);\nexports.vbArray = isFunction(global.VBArray);\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nxhr = null; // Help gc\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbGliL2NhcGFiaWxpdHkuanM/YTlmMSJdLCJuYW1lcyI6WyJleHBvcnRzIiwiZmV0Y2giLCJpc0Z1bmN0aW9uIiwiZ2xvYmFsIiwiUmVhZGFibGVTdHJlYW0iLCJ3cml0YWJsZVN0cmVhbSIsIldyaXRhYmxlU3RyZWFtIiwiYWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiYmxvYkNvbnN0cnVjdG9yIiwiQmxvYiIsIkFycmF5QnVmZmVyIiwiZSIsInhociIsImdldFhIUiIsInVuZGVmaW5lZCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIlhEb21haW5SZXF1ZXN0IiwiY2hlY2tUeXBlU3VwcG9ydCIsInR5cGUiLCJyZXNwb25zZVR5cGUiLCJoYXZlQXJyYXlCdWZmZXIiLCJoYXZlU2xpY2UiLCJwcm90b3R5cGUiLCJzbGljZSIsImFycmF5YnVmZmVyIiwibXNzdHJlYW0iLCJtb3pjaHVua2VkYXJyYXlidWZmZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwidmJBcnJheSIsIlZCQXJyYXkiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUFBLHFEQUFPLENBQUNDLEtBQVIsR0FBZ0JDLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDRixLQUFSLENBQVYsSUFBNEJDLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDQyxjQUFSLENBQXREO0FBRUFKLE9BQU8sQ0FBQ0ssY0FBUixHQUF5QkgsVUFBVSxDQUFDQyxNQUFNLENBQUNHLGNBQVIsQ0FBbkM7QUFFQU4sT0FBTyxDQUFDTyxlQUFSLEdBQTBCTCxVQUFVLENBQUNDLE1BQU0sQ0FBQ0ssZUFBUixDQUFwQztBQUVBUixPQUFPLENBQUNTLGVBQVIsR0FBMEIsS0FBMUI7O0FBQ0EsSUFBSTtBQUNILE1BQUlDLElBQUosQ0FBUyxDQUFDLElBQUlDLFdBQUosQ0FBZ0IsQ0FBaEIsQ0FBRCxDQUFUO0FBQ0FYLFNBQU8sQ0FBQ1MsZUFBUixHQUEwQixJQUExQjtBQUNBLENBSEQsQ0FHRSxPQUFPRyxDQUFQLEVBQVUsQ0FBRSxDLENBRWQ7QUFDQTtBQUNBOzs7QUFDQSxJQUFJQyxHQUFKOztBQUNBLFNBQVNDLE1BQVQsR0FBbUI7QUFDbEI7QUFDQSxNQUFJRCxHQUFHLEtBQUtFLFNBQVosRUFBdUIsT0FBT0YsR0FBUDs7QUFFdkIsTUFBSVYsTUFBTSxDQUFDYSxjQUFYLEVBQTJCO0FBQzFCSCxPQUFHLEdBQUcsSUFBSVYsTUFBTSxDQUFDYSxjQUFYLEVBQU4sQ0FEMEIsQ0FFMUI7QUFDQTtBQUNBOztBQUNBLFFBQUk7QUFDSEgsU0FBRyxDQUFDSSxJQUFKLENBQVMsS0FBVCxFQUFnQmQsTUFBTSxDQUFDZSxjQUFQLEdBQXdCLEdBQXhCLEdBQThCLHFCQUE5QztBQUNBLEtBRkQsQ0FFRSxPQUFNTixDQUFOLEVBQVM7QUFDVkMsU0FBRyxHQUFHLElBQU47QUFDQTtBQUNELEdBVkQsTUFVTztBQUNOO0FBQ0FBLE9BQUcsR0FBRyxJQUFOO0FBQ0E7O0FBQ0QsU0FBT0EsR0FBUDtBQUNBOztBQUVELFNBQVNNLGdCQUFULENBQTJCQyxJQUEzQixFQUFpQztBQUNoQyxNQUFJUCxHQUFHLEdBQUdDLE1BQU0sRUFBaEI7QUFDQSxNQUFJLENBQUNELEdBQUwsRUFBVSxPQUFPLEtBQVA7O0FBQ1YsTUFBSTtBQUNIQSxPQUFHLENBQUNRLFlBQUosR0FBbUJELElBQW5CO0FBQ0EsV0FBT1AsR0FBRyxDQUFDUSxZQUFKLEtBQXFCRCxJQUE1QjtBQUNBLEdBSEQsQ0FHRSxPQUFPUixDQUFQLEVBQVUsQ0FBRTs7QUFDZCxTQUFPLEtBQVA7QUFDQSxDLENBRUQ7QUFDQTs7O0FBQ0EsSUFBSVUsZUFBZSxHQUFHLE9BQU9uQixNQUFNLENBQUNRLFdBQWQsS0FBOEIsV0FBcEQ7QUFDQSxJQUFJWSxTQUFTLEdBQUdELGVBQWUsSUFBSXBCLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDUSxXQUFQLENBQW1CYSxTQUFuQixDQUE2QkMsS0FBOUIsQ0FBN0MsQyxDQUVBO0FBQ0E7O0FBQ0F6QixPQUFPLENBQUMwQixXQUFSLEdBQXNCMUIsT0FBTyxDQUFDQyxLQUFSLElBQWtCcUIsZUFBZSxJQUFJSCxnQkFBZ0IsQ0FBQyxhQUFELENBQTNFLEMsQ0FFQTtBQUNBOztBQUNBbkIsT0FBTyxDQUFDMkIsUUFBUixHQUFtQixDQUFDM0IsT0FBTyxDQUFDQyxLQUFULElBQWtCc0IsU0FBbEIsSUFBK0JKLGdCQUFnQixDQUFDLFdBQUQsQ0FBbEU7QUFDQW5CLE9BQU8sQ0FBQzRCLHFCQUFSLEdBQWdDLENBQUM1QixPQUFPLENBQUNDLEtBQVQsSUFBa0JxQixlQUFsQixJQUMvQkgsZ0JBQWdCLENBQUMseUJBQUQsQ0FEakIsQyxDQUdBO0FBQ0E7O0FBQ0FuQixPQUFPLENBQUM2QixnQkFBUixHQUEyQjdCLE9BQU8sQ0FBQ0MsS0FBUixLQUFrQmEsTUFBTSxLQUFLWixVQUFVLENBQUNZLE1BQU0sR0FBR2UsZ0JBQVYsQ0FBZixHQUE2QyxLQUFyRSxDQUEzQjtBQUVBN0IsT0FBTyxDQUFDOEIsT0FBUixHQUFrQjVCLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDNEIsT0FBUixDQUE1Qjs7QUFFQSxTQUFTN0IsVUFBVCxDQUFxQjhCLEtBQXJCLEVBQTRCO0FBQzNCLFNBQU8sT0FBT0EsS0FBUCxLQUFpQixVQUF4QjtBQUNBOztBQUVEbkIsR0FBRyxHQUFHLElBQU4sQyxDQUFXLFUiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3RyZWFtLWh0dHAvbGliL2NhcGFiaWxpdHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmZldGNoID0gaXNGdW5jdGlvbihnbG9iYWwuZmV0Y2gpICYmIGlzRnVuY3Rpb24oZ2xvYmFsLlJlYWRhYmxlU3RyZWFtKVxuXG5leHBvcnRzLndyaXRhYmxlU3RyZWFtID0gaXNGdW5jdGlvbihnbG9iYWwuV3JpdGFibGVTdHJlYW0pXG5cbmV4cG9ydHMuYWJvcnRDb250cm9sbGVyID0gaXNGdW5jdGlvbihnbG9iYWwuQWJvcnRDb250cm9sbGVyKVxuXG5leHBvcnRzLmJsb2JDb25zdHJ1Y3RvciA9IGZhbHNlXG50cnkge1xuXHRuZXcgQmxvYihbbmV3IEFycmF5QnVmZmVyKDEpXSlcblx0ZXhwb3J0cy5ibG9iQ29uc3RydWN0b3IgPSB0cnVlXG59IGNhdGNoIChlKSB7fVxuXG4vLyBUaGUgeGhyIHJlcXVlc3QgdG8gZXhhbXBsZS5jb20gbWF5IHZpb2xhdGUgc29tZSByZXN0cmljdGl2ZSBDU1AgY29uZmlndXJhdGlvbnMsXG4vLyBzbyBpZiB3ZSdyZSBydW5uaW5nIGluIGEgYnJvd3NlciB0aGF0IHN1cHBvcnRzIGBmZXRjaGAsIGF2b2lkIGNhbGxpbmcgZ2V0WEhSKClcbi8vIGFuZCBhc3N1bWUgc3VwcG9ydCBmb3IgY2VydGFpbiBmZWF0dXJlcyBiZWxvdy5cbnZhciB4aHJcbmZ1bmN0aW9uIGdldFhIUiAoKSB7XG5cdC8vIENhY2hlIHRoZSB4aHIgdmFsdWVcblx0aWYgKHhociAhPT0gdW5kZWZpbmVkKSByZXR1cm4geGhyXG5cblx0aWYgKGdsb2JhbC5YTUxIdHRwUmVxdWVzdCkge1xuXHRcdHhociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuXHRcdC8vIElmIFhEb21haW5SZXF1ZXN0IGlzIGF2YWlsYWJsZSAoaWUgb25seSwgd2hlcmUgeGhyIG1pZ2h0IG5vdCB3b3JrXG5cdFx0Ly8gY3Jvc3MgZG9tYWluKSwgdXNlIHRoZSBwYWdlIGxvY2F0aW9uLiBPdGhlcndpc2UgdXNlIGV4YW1wbGUuY29tXG5cdFx0Ly8gTm90ZTogdGhpcyBkb2Vzbid0IGFjdHVhbGx5IG1ha2UgYW4gaHR0cCByZXF1ZXN0LlxuXHRcdHRyeSB7XG5cdFx0XHR4aHIub3BlbignR0VUJywgZ2xvYmFsLlhEb21haW5SZXF1ZXN0ID8gJy8nIDogJ2h0dHBzOi8vZXhhbXBsZS5jb20nKVxuXHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0eGhyID0gbnVsbFxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBTZXJ2aWNlIHdvcmtlcnMgZG9uJ3QgaGF2ZSBYSFJcblx0XHR4aHIgPSBudWxsXG5cdH1cblx0cmV0dXJuIHhoclxufVxuXG5mdW5jdGlvbiBjaGVja1R5cGVTdXBwb3J0ICh0eXBlKSB7XG5cdHZhciB4aHIgPSBnZXRYSFIoKVxuXHRpZiAoIXhocikgcmV0dXJuIGZhbHNlXG5cdHRyeSB7XG5cdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHR5cGVcblx0XHRyZXR1cm4geGhyLnJlc3BvbnNlVHlwZSA9PT0gdHlwZVxuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2Vcbn1cblxuLy8gRm9yIHNvbWUgc3RyYW5nZSByZWFzb24sIFNhZmFyaSA3LjAgcmVwb3J0cyB0eXBlb2YgZ2xvYmFsLkFycmF5QnVmZmVyID09PSAnb2JqZWN0Jy5cbi8vIFNhZmFyaSA3LjEgYXBwZWFycyB0byBoYXZlIGZpeGVkIHRoaXMgYnVnLlxudmFyIGhhdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnXG52YXIgaGF2ZVNsaWNlID0gaGF2ZUFycmF5QnVmZmVyICYmIGlzRnVuY3Rpb24oZ2xvYmFsLkFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSlcblxuLy8gSWYgZmV0Y2ggaXMgc3VwcG9ydGVkLCB0aGVuIGFycmF5YnVmZmVyIHdpbGwgYmUgc3VwcG9ydGVkIHRvby4gU2tpcCBjYWxsaW5nXG4vLyBjaGVja1R5cGVTdXBwb3J0KCksIHNpbmNlIHRoYXQgY2FsbHMgZ2V0WEhSKCkuXG5leHBvcnRzLmFycmF5YnVmZmVyID0gZXhwb3J0cy5mZXRjaCB8fCAoaGF2ZUFycmF5QnVmZmVyICYmIGNoZWNrVHlwZVN1cHBvcnQoJ2FycmF5YnVmZmVyJykpXG5cbi8vIFRoZXNlIG5leHQgdHdvIHRlc3RzIHVuYXZvaWRhYmx5IHNob3cgd2FybmluZ3MgaW4gQ2hyb21lLiBTaW5jZSBmZXRjaCB3aWxsIGFsd2F5c1xuLy8gYmUgdXNlZCBpZiBpdCdzIGF2YWlsYWJsZSwganVzdCByZXR1cm4gZmFsc2UgZm9yIHRoZXNlIHRvIGF2b2lkIHRoZSB3YXJuaW5ncy5cbmV4cG9ydHMubXNzdHJlYW0gPSAhZXhwb3J0cy5mZXRjaCAmJiBoYXZlU2xpY2UgJiYgY2hlY2tUeXBlU3VwcG9ydCgnbXMtc3RyZWFtJylcbmV4cG9ydHMubW96Y2h1bmtlZGFycmF5YnVmZmVyID0gIWV4cG9ydHMuZmV0Y2ggJiYgaGF2ZUFycmF5QnVmZmVyICYmXG5cdGNoZWNrVHlwZVN1cHBvcnQoJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJylcblxuLy8gSWYgZmV0Y2ggaXMgc3VwcG9ydGVkLCB0aGVuIG92ZXJyaWRlTWltZVR5cGUgd2lsbCBiZSBzdXBwb3J0ZWQgdG9vLiBTa2lwIGNhbGxpbmdcbi8vIGdldFhIUigpLlxuZXhwb3J0cy5vdmVycmlkZU1pbWVUeXBlID0gZXhwb3J0cy5mZXRjaCB8fCAoZ2V0WEhSKCkgPyBpc0Z1bmN0aW9uKGdldFhIUigpLm92ZXJyaWRlTWltZVR5cGUpIDogZmFsc2UpXG5cbmV4cG9ydHMudmJBcnJheSA9IGlzRnVuY3Rpb24oZ2xvYmFsLlZCQXJyYXkpXG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbidcbn1cblxueGhyID0gbnVsbCAvLyBIZWxwIGdjXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/stream-http/lib/capability.js\n");

/***/ }),

/***/ "./node_modules/stream-http/lib/request.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-http/lib/request.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {var capability = __webpack_require__(/*! ./capability */ \"./node_modules/stream-http/lib/capability.js\");\n\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nvar response = __webpack_require__(/*! ./response */ \"./node_modules/stream-http/lib/response.js\");\n\nvar stream = __webpack_require__(/*! readable-stream */ \"./node_modules/readable-stream/readable-browser.js\");\n\nvar toArrayBuffer = __webpack_require__(/*! to-arraybuffer */ \"./node_modules/to-arraybuffer/index.js\");\n\nvar IncomingMessage = response.IncomingMessage;\nvar rStates = response.readyStates;\n\nfunction decideMode(preferBinary, useFetch) {\n  if (capability.fetch && useFetch) {\n    return 'fetch';\n  } else if (capability.mozchunkedarraybuffer) {\n    return 'moz-chunked-arraybuffer';\n  } else if (capability.msstream) {\n    return 'ms-stream';\n  } else if (capability.arraybuffer && preferBinary) {\n    return 'arraybuffer';\n  } else if (capability.vbArray && preferBinary) {\n    return 'text:vbarray';\n  } else {\n    return 'text';\n  }\n}\n\nvar ClientRequest = module.exports = function (opts) {\n  var self = this;\n  stream.Writable.call(self);\n  self._opts = opts;\n  self._body = [];\n  self._headers = {};\n  if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));\n  Object.keys(opts.headers).forEach(function (name) {\n    self.setHeader(name, opts.headers[name]);\n  });\n  var preferBinary;\n  var useFetch = true;\n\n  if (opts.mode === 'disable-fetch' || 'requestTimeout' in opts && !capability.abortController) {\n    // If the use of XHR should be preferred. Not typically needed.\n    useFetch = false;\n    preferBinary = true;\n  } else if (opts.mode === 'prefer-streaming') {\n    // If streaming is a high priority but binary compatibility and\n    // the accuracy of the 'content-type' header aren't\n    preferBinary = false;\n  } else if (opts.mode === 'allow-wrong-content-type') {\n    // If streaming is more important than preserving the 'content-type' header\n    preferBinary = !capability.overrideMimeType;\n  } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n    // Use binary if text streaming may corrupt data or the content-type header, or for speed\n    preferBinary = true;\n  } else {\n    throw new Error('Invalid value for opts.mode');\n  }\n\n  self._mode = decideMode(preferBinary, useFetch);\n  self._fetchTimer = null;\n  self.on('finish', function () {\n    self._onFinish();\n  });\n};\n\ninherits(ClientRequest, stream.Writable);\n\nClientRequest.prototype.setHeader = function (name, value) {\n  var self = this;\n  var lowerName = name.toLowerCase(); // This check is not necessary, but it prevents warnings from browsers about setting unsafe\n  // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n  // http-browserify did it, so I will too.\n\n  if (unsafeHeaders.indexOf(lowerName) !== -1) return;\n  self._headers[lowerName] = {\n    name: name,\n    value: value\n  };\n};\n\nClientRequest.prototype.getHeader = function (name) {\n  var header = this._headers[name.toLowerCase()];\n\n  if (header) return header.value;\n  return null;\n};\n\nClientRequest.prototype.removeHeader = function (name) {\n  var self = this;\n  delete self._headers[name.toLowerCase()];\n};\n\nClientRequest.prototype._onFinish = function () {\n  var self = this;\n  if (self._destroyed) return;\n  var opts = self._opts;\n  var headersObj = self._headers;\n  var body = null;\n\n  if (opts.method !== 'GET' && opts.method !== 'HEAD') {\n    if (capability.arraybuffer) {\n      body = toArrayBuffer(Buffer.concat(self._body));\n    } else if (capability.blobConstructor) {\n      body = new global.Blob(self._body.map(function (buffer) {\n        return toArrayBuffer(buffer);\n      }), {\n        type: (headersObj['content-type'] || {}).value || ''\n      });\n    } else {\n      // get utf8 string\n      body = Buffer.concat(self._body).toString();\n    }\n  } // create flattened list of headers\n\n\n  var headersList = [];\n  Object.keys(headersObj).forEach(function (keyName) {\n    var name = headersObj[keyName].name;\n    var value = headersObj[keyName].value;\n\n    if (Array.isArray(value)) {\n      value.forEach(function (v) {\n        headersList.push([name, v]);\n      });\n    } else {\n      headersList.push([name, value]);\n    }\n  });\n\n  if (self._mode === 'fetch') {\n    var signal = null;\n    var fetchTimer = null;\n\n    if (capability.abortController) {\n      var controller = new AbortController();\n      signal = controller.signal;\n      self._fetchAbortController = controller;\n\n      if ('requestTimeout' in opts && opts.requestTimeout !== 0) {\n        self._fetchTimer = global.setTimeout(function () {\n          self.emit('requestTimeout');\n          if (self._fetchAbortController) self._fetchAbortController.abort();\n        }, opts.requestTimeout);\n      }\n    }\n\n    global.fetch(self._opts.url, {\n      method: self._opts.method,\n      headers: headersList,\n      body: body || undefined,\n      mode: 'cors',\n      credentials: opts.withCredentials ? 'include' : 'same-origin',\n      signal: signal\n    }).then(function (response) {\n      self._fetchResponse = response;\n\n      self._connect();\n    }, function (reason) {\n      global.clearTimeout(self._fetchTimer);\n      if (!self._destroyed) self.emit('error', reason);\n    });\n  } else {\n    var xhr = self._xhr = new global.XMLHttpRequest();\n\n    try {\n      xhr.open(self._opts.method, self._opts.url, true);\n    } catch (err) {\n      process.nextTick(function () {\n        self.emit('error', err);\n      });\n      return;\n    } // Can't set responseType on really old browsers\n\n\n    if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];\n    if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;\n    if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n    if ('requestTimeout' in opts) {\n      xhr.timeout = opts.requestTimeout;\n\n      xhr.ontimeout = function () {\n        self.emit('requestTimeout');\n      };\n    }\n\n    headersList.forEach(function (header) {\n      xhr.setRequestHeader(header[0], header[1]);\n    });\n    self._response = null;\n\n    xhr.onreadystatechange = function () {\n      switch (xhr.readyState) {\n        case rStates.LOADING:\n        case rStates.DONE:\n          self._onXHRProgress();\n\n          break;\n      }\n    }; // Necessary for streaming in Firefox, since xhr.response is ONLY defined\n    // in onprogress, not in onreadystatechange with xhr.readyState = 3\n\n\n    if (self._mode === 'moz-chunked-arraybuffer') {\n      xhr.onprogress = function () {\n        self._onXHRProgress();\n      };\n    }\n\n    xhr.onerror = function () {\n      if (self._destroyed) return;\n      self.emit('error', new Error('XHR error'));\n    };\n\n    try {\n      xhr.send(body);\n    } catch (err) {\n      process.nextTick(function () {\n        self.emit('error', err);\n      });\n      return;\n    }\n  }\n};\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\n\n\nfunction statusValid(xhr) {\n  try {\n    var status = xhr.status;\n    return status !== null && status !== 0;\n  } catch (e) {\n    return false;\n  }\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n  var self = this;\n  if (!statusValid(self._xhr) || self._destroyed) return;\n  if (!self._response) self._connect();\n\n  self._response._onXHRProgress();\n};\n\nClientRequest.prototype._connect = function () {\n  var self = this;\n  if (self._destroyed) return;\n  self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer);\n\n  self._response.on('error', function (err) {\n    self.emit('error', err);\n  });\n\n  self.emit('response', self._response);\n};\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n  var self = this;\n\n  self._body.push(chunk);\n\n  cb();\n};\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n  var self = this;\n  self._destroyed = true;\n  global.clearTimeout(self._fetchTimer);\n  if (self._response) self._response._destroyed = true;\n  if (self._xhr) self._xhr.abort();else if (self._fetchAbortController) self._fetchAbortController.abort();\n};\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n  var self = this;\n\n  if (typeof data === 'function') {\n    cb = data;\n    data = undefined;\n  }\n\n  stream.Writable.prototype.end.call(self, data, encoding, cb);\n};\n\nClientRequest.prototype.flushHeaders = function () {};\n\nClientRequest.prototype.setTimeout = function () {};\n\nClientRequest.prototype.setNoDelay = function () {};\n\nClientRequest.prototype.setSocketKeepAlive = function () {}; // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n\n\nvar unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'via'];\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/stream-http/lib/request.js\n");

/***/ }),

/***/ "./node_modules/stream-http/lib/response.js":
/*!**************************************************!*\
  !*** ./node_modules/stream-http/lib/response.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {var capability = __webpack_require__(/*! ./capability */ \"./node_modules/stream-http/lib/capability.js\");\n\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nvar stream = __webpack_require__(/*! readable-stream */ \"./node_modules/readable-stream/readable-browser.js\");\n\nvar rStates = exports.readyStates = {\n  UNSENT: 0,\n  OPENED: 1,\n  HEADERS_RECEIVED: 2,\n  LOADING: 3,\n  DONE: 4\n};\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {\n  var self = this;\n  stream.Readable.call(self);\n  self._mode = mode;\n  self.headers = {};\n  self.rawHeaders = [];\n  self.trailers = {};\n  self.rawTrailers = []; // Fake the 'close' event, but only once 'end' fires\n\n  self.on('end', function () {\n    // The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n    process.nextTick(function () {\n      self.emit('close');\n    });\n  });\n\n  if (mode === 'fetch') {\n    self._fetchResponse = response;\n    self.url = response.url;\n    self.statusCode = response.status;\n    self.statusMessage = response.statusText;\n    response.headers.forEach(function (header, key) {\n      self.headers[key.toLowerCase()] = header;\n      self.rawHeaders.push(key, header);\n    });\n\n    if (capability.writableStream) {\n      var writable = new WritableStream({\n        write: function write(chunk) {\n          return new Promise(function (resolve, reject) {\n            if (self._destroyed) {\n              reject();\n            } else if (self.push(new Buffer(chunk))) {\n              resolve();\n            } else {\n              self._resumeFetch = resolve;\n            }\n          });\n        },\n        close: function close() {\n          global.clearTimeout(fetchTimer);\n          if (!self._destroyed) self.push(null);\n        },\n        abort: function abort(err) {\n          if (!self._destroyed) self.emit('error', err);\n        }\n      });\n\n      try {\n        response.body.pipeTo(writable).catch(function (err) {\n          global.clearTimeout(fetchTimer);\n          if (!self._destroyed) self.emit('error', err);\n        });\n        return;\n      } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this\n\n    } // fallback for when writableStream or pipeTo aren't available\n\n\n    var reader = response.body.getReader();\n\n    function read() {\n      reader.read().then(function (result) {\n        if (self._destroyed) return;\n\n        if (result.done) {\n          global.clearTimeout(fetchTimer);\n          self.push(null);\n          return;\n        }\n\n        self.push(new Buffer(result.value));\n        read();\n      }).catch(function (err) {\n        global.clearTimeout(fetchTimer);\n        if (!self._destroyed) self.emit('error', err);\n      });\n    }\n\n    read();\n  } else {\n    self._xhr = xhr;\n    self._pos = 0;\n    self.url = xhr.responseURL;\n    self.statusCode = xhr.status;\n    self.statusMessage = xhr.statusText;\n    var headers = xhr.getAllResponseHeaders().split(/\\r?\\n/);\n    headers.forEach(function (header) {\n      var matches = header.match(/^([^:]+):\\s*(.*)/);\n\n      if (matches) {\n        var key = matches[1].toLowerCase();\n\n        if (key === 'set-cookie') {\n          if (self.headers[key] === undefined) {\n            self.headers[key] = [];\n          }\n\n          self.headers[key].push(matches[2]);\n        } else if (self.headers[key] !== undefined) {\n          self.headers[key] += ', ' + matches[2];\n        } else {\n          self.headers[key] = matches[2];\n        }\n\n        self.rawHeaders.push(matches[1], matches[2]);\n      }\n    });\n    self._charset = 'x-user-defined';\n\n    if (!capability.overrideMimeType) {\n      var mimeType = self.rawHeaders['mime-type'];\n\n      if (mimeType) {\n        var charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/);\n\n        if (charsetMatch) {\n          self._charset = charsetMatch[1].toLowerCase();\n        }\n      }\n\n      if (!self._charset) self._charset = 'utf-8'; // best guess\n    }\n  }\n};\n\ninherits(IncomingMessage, stream.Readable);\n\nIncomingMessage.prototype._read = function () {\n  var self = this;\n  var resolve = self._resumeFetch;\n\n  if (resolve) {\n    self._resumeFetch = null;\n    resolve();\n  }\n};\n\nIncomingMessage.prototype._onXHRProgress = function () {\n  var self = this;\n  var xhr = self._xhr;\n  var response = null;\n\n  switch (self._mode) {\n    case 'text:vbarray':\n      // For IE9\n      if (xhr.readyState !== rStates.DONE) break;\n\n      try {\n        // This fails in IE8\n        response = new global.VBArray(xhr.responseBody).toArray();\n      } catch (e) {}\n\n      if (response !== null) {\n        self.push(new Buffer(response));\n        break;\n      }\n\n    // Falls through in IE8\t\n\n    case 'text':\n      try {\n        // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n        response = xhr.responseText;\n      } catch (e) {\n        self._mode = 'text:vbarray';\n        break;\n      }\n\n      if (response.length > self._pos) {\n        var newData = response.substr(self._pos);\n\n        if (self._charset === 'x-user-defined') {\n          var buffer = new Buffer(newData.length);\n\n          for (var i = 0; i < newData.length; i++) {\n            buffer[i] = newData.charCodeAt(i) & 0xff;\n          }\n\n          self.push(buffer);\n        } else {\n          self.push(newData, self._charset);\n        }\n\n        self._pos = response.length;\n      }\n\n      break;\n\n    case 'arraybuffer':\n      if (xhr.readyState !== rStates.DONE || !xhr.response) break;\n      response = xhr.response;\n      self.push(new Buffer(new Uint8Array(response)));\n      break;\n\n    case 'moz-chunked-arraybuffer':\n      // take whole\n      response = xhr.response;\n      if (xhr.readyState !== rStates.LOADING || !response) break;\n      self.push(new Buffer(new Uint8Array(response)));\n      break;\n\n    case 'ms-stream':\n      response = xhr.response;\n      if (xhr.readyState !== rStates.LOADING) break;\n      var reader = new global.MSStreamReader();\n\n      reader.onprogress = function () {\n        if (reader.result.byteLength > self._pos) {\n          self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));\n          self._pos = reader.result.byteLength;\n        }\n      };\n\n      reader.onload = function () {\n        self.push(null);\n      }; // reader.onerror = ??? // TODO: this\n\n\n      reader.readAsArrayBuffer(response);\n      break;\n  } // The ms-stream case handles end separately in reader.onload()\n\n\n  if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n    self.push(null);\n  }\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/stream-http/lib/response.js\n");

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n/*</replacement>*/\n\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n    case 'raw':\n      return true;\n\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n\n      default:\n        if (retried) return; // undefined\n\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n}\n\n; // Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\n\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n} // StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\n\n\nexports.StringDecoder = StringDecoder;\n\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer\n\nStringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\n\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\n\n\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n} // Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\n\n\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n\n    return nb;\n  }\n\n  return 0;\n} // Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\n\n\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return \"\\uFFFD\";\n  }\n\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return \"\\uFFFD\";\n    }\n\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return \"\\uFFFD\";\n      }\n    }\n  }\n} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\n\n\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\n\n\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n} // For UTF-8, a replacement character is added when ending on a partial\n// character.\n\n\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + \"\\uFFFD\";\n  return r;\n} // UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\n\n\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n\n    return r;\n  }\n\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n} // For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\n\n\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\n\n\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/string_decoder/lib/string_decoder.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== \"undefined\" && global || typeof self !== \"undefined\" && self || window;\nvar apply = Function.prototype.apply; // DOM APIs, for completeness\n\nexports.setTimeout = function () {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\n\nexports.setInterval = function () {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\n\nexports.clearTimeout = exports.clearInterval = function (timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\n\nTimeout.prototype.unref = Timeout.prototype.ref = function () {};\n\nTimeout.prototype.close = function () {\n  this._clearFn.call(scope, this._id);\n}; // Does not start the time, just sets up the members needed.\n\n\nexports.enroll = function (item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  var msecs = item._idleTimeout;\n\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout) item._onTimeout();\n    }, msecs);\n  }\n}; // setimmediate attaches itself to the global object\n\n\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\"); // On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\n\n\nexports.setImmediate = typeof self !== \"undefined\" && self.setImmediate || typeof global !== \"undefined\" && global.setImmediate || this && this.setImmediate;\nexports.clearImmediate = typeof self !== \"undefined\" && self.clearImmediate || typeof global !== \"undefined\" && global.clearImmediate || this && this.clearImmediate;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbInNjb3BlIiwiZ2xvYmFsIiwic2VsZiIsIndpbmRvdyIsImFwcGx5IiwiRnVuY3Rpb24iLCJwcm90b3R5cGUiLCJleHBvcnRzIiwic2V0VGltZW91dCIsIlRpbWVvdXQiLCJjYWxsIiwiYXJndW1lbnRzIiwiY2xlYXJUaW1lb3V0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidGltZW91dCIsImNsb3NlIiwiaWQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIml0ZW0iLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJvblRpbWVvdXQiLCJfb25UaW1lb3V0IiwicmVxdWlyZSIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxrREFBSUEsS0FBSyxHQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQWxDLElBQ0MsT0FBT0MsSUFBUCxLQUFnQixXQUFoQixJQUErQkEsSUFEaEMsSUFFQUMsTUFGWjtBQUdBLElBQUlDLEtBQUssR0FBR0MsUUFBUSxDQUFDQyxTQUFULENBQW1CRixLQUEvQixDLENBRUE7O0FBRUFHLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixZQUFXO0FBQzlCLFNBQU8sSUFBSUMsT0FBSixDQUFZTCxLQUFLLENBQUNNLElBQU4sQ0FBV0YsVUFBWCxFQUF1QlIsS0FBdkIsRUFBOEJXLFNBQTlCLENBQVosRUFBc0RDLFlBQXRELENBQVA7QUFDRCxDQUZEOztBQUdBTCxPQUFPLENBQUNNLFdBQVIsR0FBc0IsWUFBVztBQUMvQixTQUFPLElBQUlKLE9BQUosQ0FBWUwsS0FBSyxDQUFDTSxJQUFOLENBQVdHLFdBQVgsRUFBd0JiLEtBQXhCLEVBQStCVyxTQUEvQixDQUFaLEVBQXVERyxhQUF2RCxDQUFQO0FBQ0QsQ0FGRDs7QUFHQVAsT0FBTyxDQUFDSyxZQUFSLEdBQ0FMLE9BQU8sQ0FBQ08sYUFBUixHQUF3QixVQUFTQyxPQUFULEVBQWtCO0FBQ3hDLE1BQUlBLE9BQUosRUFBYTtBQUNYQSxXQUFPLENBQUNDLEtBQVI7QUFDRDtBQUNGLENBTEQ7O0FBT0EsU0FBU1AsT0FBVCxDQUFpQlEsRUFBakIsRUFBcUJDLE9BQXJCLEVBQThCO0FBQzVCLE9BQUtDLEdBQUwsR0FBV0YsRUFBWDtBQUNBLE9BQUtHLFFBQUwsR0FBZ0JGLE9BQWhCO0FBQ0Q7O0FBQ0RULE9BQU8sQ0FBQ0gsU0FBUixDQUFrQmUsS0FBbEIsR0FBMEJaLE9BQU8sQ0FBQ0gsU0FBUixDQUFrQmdCLEdBQWxCLEdBQXdCLFlBQVcsQ0FBRSxDQUEvRDs7QUFDQWIsT0FBTyxDQUFDSCxTQUFSLENBQWtCVSxLQUFsQixHQUEwQixZQUFXO0FBQ25DLE9BQUtJLFFBQUwsQ0FBY1YsSUFBZCxDQUFtQlYsS0FBbkIsRUFBMEIsS0FBS21CLEdBQS9CO0FBQ0QsQ0FGRCxDLENBSUE7OztBQUNBWixPQUFPLENBQUNnQixNQUFSLEdBQWlCLFVBQVNDLElBQVQsRUFBZUMsS0FBZixFQUFzQjtBQUNyQ2IsY0FBWSxDQUFDWSxJQUFJLENBQUNFLGNBQU4sQ0FBWjtBQUNBRixNQUFJLENBQUNHLFlBQUwsR0FBb0JGLEtBQXBCO0FBQ0QsQ0FIRDs7QUFLQWxCLE9BQU8sQ0FBQ3FCLFFBQVIsR0FBbUIsVUFBU0osSUFBVCxFQUFlO0FBQ2hDWixjQUFZLENBQUNZLElBQUksQ0FBQ0UsY0FBTixDQUFaO0FBQ0FGLE1BQUksQ0FBQ0csWUFBTCxHQUFvQixDQUFDLENBQXJCO0FBQ0QsQ0FIRDs7QUFLQXBCLE9BQU8sQ0FBQ3NCLFlBQVIsR0FBdUJ0QixPQUFPLENBQUN1QixNQUFSLEdBQWlCLFVBQVNOLElBQVQsRUFBZTtBQUNyRFosY0FBWSxDQUFDWSxJQUFJLENBQUNFLGNBQU4sQ0FBWjtBQUVBLE1BQUlELEtBQUssR0FBR0QsSUFBSSxDQUFDRyxZQUFqQjs7QUFDQSxNQUFJRixLQUFLLElBQUksQ0FBYixFQUFnQjtBQUNkRCxRQUFJLENBQUNFLGNBQUwsR0FBc0JsQixVQUFVLENBQUMsU0FBU3VCLFNBQVQsR0FBcUI7QUFDcEQsVUFBSVAsSUFBSSxDQUFDUSxVQUFULEVBQ0VSLElBQUksQ0FBQ1EsVUFBTDtBQUNILEtBSCtCLEVBRzdCUCxLQUg2QixDQUFoQztBQUlEO0FBQ0YsQ0FWRCxDLENBWUE7OztBQUNBUSxtQkFBTyxDQUFDLGlFQUFELENBQVAsQyxDQUNBO0FBQ0E7QUFDQTs7O0FBQ0ExQixPQUFPLENBQUMyQixZQUFSLEdBQXdCLE9BQU9oQyxJQUFQLEtBQWdCLFdBQWhCLElBQStCQSxJQUFJLENBQUNnQyxZQUFyQyxJQUNDLE9BQU9qQyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDQSxNQUFNLENBQUNpQyxZQUR6QyxJQUVDLFFBQVEsS0FBS0EsWUFGckM7QUFHQTNCLE9BQU8sQ0FBQzRCLGNBQVIsR0FBMEIsT0FBT2pDLElBQVAsS0FBZ0IsV0FBaEIsSUFBK0JBLElBQUksQ0FBQ2lDLGNBQXJDLElBQ0MsT0FBT2xDLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sQ0FBQ2tDLGNBRHpDLElBRUMsUUFBUSxLQUFLQSxjQUZ2QyxDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/to-arraybuffer/index.js":
/*!**********************************************!*\
  !*** ./node_modules/to-arraybuffer/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer;\n\nmodule.exports = function (buf) {\n  // If the buffer is backed by a Uint8Array, a faster version will work\n  if (buf instanceof Uint8Array) {\n    // If the buffer isn't a subarray, return the underlying ArrayBuffer\n    if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n      return buf.buffer;\n    } else if (typeof buf.buffer.slice === 'function') {\n      // Otherwise we need to get a proper copy\n      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n  }\n\n  if (Buffer.isBuffer(buf)) {\n    // This is the slow version that will work with any Buffer\n    // implementation (even in old browsers)\n    var arrayCopy = new Uint8Array(buf.length);\n    var len = buf.length;\n\n    for (var i = 0; i < len; i++) {\n      arrayCopy[i] = buf[i];\n    }\n\n    return arrayCopy.buffer;\n  } else {\n    throw new Error('Argument must be a Buffer');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG8tYXJyYXlidWZmZXIvaW5kZXguanM/ZDkzOCJdLCJuYW1lcyI6WyJCdWZmZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImJ1ZiIsIlVpbnQ4QXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsInNsaWNlIiwiaXNCdWZmZXIiLCJhcnJheUNvcHkiLCJsZW5ndGgiLCJsZW4iLCJpIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyw4Q0FBRCxDQUFQLENBQWtCRCxNQUEvQjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUMvQjtBQUNBLE1BQUlBLEdBQUcsWUFBWUMsVUFBbkIsRUFBK0I7QUFDOUI7QUFDQSxRQUFJRCxHQUFHLENBQUNFLFVBQUosS0FBbUIsQ0FBbkIsSUFBd0JGLEdBQUcsQ0FBQ0csVUFBSixLQUFtQkgsR0FBRyxDQUFDSSxNQUFKLENBQVdELFVBQTFELEVBQXNFO0FBQ3JFLGFBQU9ILEdBQUcsQ0FBQ0ksTUFBWDtBQUNBLEtBRkQsTUFFTyxJQUFJLE9BQU9KLEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxLQUFsQixLQUE0QixVQUFoQyxFQUE0QztBQUNsRDtBQUNBLGFBQU9MLEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxLQUFYLENBQWlCTCxHQUFHLENBQUNFLFVBQXJCLEVBQWlDRixHQUFHLENBQUNFLFVBQUosR0FBaUJGLEdBQUcsQ0FBQ0csVUFBdEQsQ0FBUDtBQUNBO0FBQ0Q7O0FBRUQsTUFBSVAsTUFBTSxDQUFDVSxRQUFQLENBQWdCTixHQUFoQixDQUFKLEVBQTBCO0FBQ3pCO0FBQ0E7QUFDQSxRQUFJTyxTQUFTLEdBQUcsSUFBSU4sVUFBSixDQUFlRCxHQUFHLENBQUNRLE1BQW5CLENBQWhCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHVCxHQUFHLENBQUNRLE1BQWQ7O0FBQ0EsU0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxHQUFwQixFQUF5QkMsQ0FBQyxFQUExQixFQUE4QjtBQUM3QkgsZUFBUyxDQUFDRyxDQUFELENBQVQsR0FBZVYsR0FBRyxDQUFDVSxDQUFELENBQWxCO0FBQ0E7O0FBQ0QsV0FBT0gsU0FBUyxDQUFDSCxNQUFqQjtBQUNBLEdBVEQsTUFTTztBQUNOLFVBQU0sSUFBSU8sS0FBSixDQUFVLDJCQUFWLENBQU47QUFDQTtBQUNELENBeEJEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3RvLWFycmF5YnVmZmVyL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWYpIHtcblx0Ly8gSWYgdGhlIGJ1ZmZlciBpcyBiYWNrZWQgYnkgYSBVaW50OEFycmF5LCBhIGZhc3RlciB2ZXJzaW9uIHdpbGwgd29ya1xuXHRpZiAoYnVmIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuXHRcdC8vIElmIHRoZSBidWZmZXIgaXNuJ3QgYSBzdWJhcnJheSwgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyXG5cdFx0aWYgKGJ1Zi5ieXRlT2Zmc2V0ID09PSAwICYmIGJ1Zi5ieXRlTGVuZ3RoID09PSBidWYuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcblx0XHRcdHJldHVybiBidWYuYnVmZmVyXG5cdFx0fSBlbHNlIGlmICh0eXBlb2YgYnVmLmJ1ZmZlci5zbGljZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgdG8gZ2V0IGEgcHJvcGVyIGNvcHlcblx0XHRcdHJldHVybiBidWYuYnVmZmVyLnNsaWNlKGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZU9mZnNldCArIGJ1Zi5ieXRlTGVuZ3RoKVxuXHRcdH1cblx0fVxuXG5cdGlmIChCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuXHRcdC8vIFRoaXMgaXMgdGhlIHNsb3cgdmVyc2lvbiB0aGF0IHdpbGwgd29yayB3aXRoIGFueSBCdWZmZXJcblx0XHQvLyBpbXBsZW1lbnRhdGlvbiAoZXZlbiBpbiBvbGQgYnJvd3NlcnMpXG5cdFx0dmFyIGFycmF5Q29weSA9IG5ldyBVaW50OEFycmF5KGJ1Zi5sZW5ndGgpXG5cdFx0dmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRhcnJheUNvcHlbaV0gPSBidWZbaV1cblx0XHR9XG5cdFx0cmV0dXJuIGFycmF5Q29weS5idWZmZXJcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/to-arraybuffer/index.js\n");

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar punycode = __webpack_require__(/*! punycode */ \"./node_modules/node-libs-browser/node_modules/punycode/punycode.js\");\n\nvar util = __webpack_require__(/*! ./util */ \"./node_modules/url/util.js\");\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n} // Reference: RFC 3986, RFC 1808, RFC 2396\n// define these here so at least they only have to be\n// compiled once on the first module load.\n\n\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n    // Special case for a simple path URL\nsimplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n    // RFC 2396: characters reserved for delimiting URLs.\n// We actually just auto-escape these.\ndelims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n    // RFC 2396: characters not allowed for various reasons.\nunwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\nautoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n// Note that any invalid chars are also handled, but these\n// are the ones that are *expected* to be seen, so we fast-path\n// them.\nnonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\nunsafeProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that never have a hostname.\nhostlessProtocol = {\n  'javascript': true,\n  'javascript:': true\n},\n    // protocols that always contain a // bit.\nslashedProtocol = {\n  'http': true,\n  'https': true,\n  'ftp': true,\n  'gopher': true,\n  'file': true,\n  'http:': true,\n  'https:': true,\n  'ftp:': true,\n  'gopher:': true,\n  'file:': true\n},\n    querystring = __webpack_require__(/*! querystring */ \"./node_modules/querystring-es3/index.js\");\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + _typeof(url));\n  } // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n\n\n  var queryIndex = url.indexOf('?'),\n      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n  var rest = url; // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  } // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n\n\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n\n\n    var auth, atSign;\n\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    } // Now we have a portion which is definitely the auth.\n    // Pull that off.\n\n\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    } // the host is the remaining to the left of the first non-host char\n\n\n    hostEnd = -1;\n\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;\n    } // if we still have not hit it, then the entire thing is a host.\n\n\n    if (hostEnd === -1) hostEnd = rest.length;\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd); // pull out port.\n\n    this.parseHost(); // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n\n    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.\n\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          } // we test again with ASCII char only\n\n\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host; // strip [ and ] from the hostname\n    // the host field still retains them, though\n\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  } // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n\n\n  if (!unsafeProtocol[lowerProto]) {\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) continue;\n      var esc = encodeURIComponent(ae);\n\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n\n      rest = rest.split(ae).join(esc);\n    }\n  } // chop off from the tail first.\n\n\n  var hash = rest.indexOf('#');\n\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n\n  var qm = rest.indexOf('?');\n\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n\n  if (rest) this.pathname = rest;\n\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  } //to support http.request\n\n\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  } // finally, reconstruct the href based on what has been validated.\n\n\n  this.href = this.format();\n  return this;\n}; // format a parsed object into a url string\n\n\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || query && '?' + query || '';\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  } // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n\n\n  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.\n\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  } // hrefs like //foo/bar always cut to the protocol.\n\n\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') result[rkey] = relative[rkey];\n    } //urlParse appends trailing / to urls like http://www.example.com\n\n\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n\n      while (relPath.length && !(relative.host = relPath.shift())) {\n        ;\n      }\n\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port; // to support http.request\n\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);\n    }\n\n    result.host = '';\n\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);\n      }\n\n      relative.host = null;\n    }\n\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath; // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    result.search = relative.search;\n    result.query = relative.query; //to support http.request\n\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null; //to support http.request\n\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n\n    result.href = result.format();\n    return result;\n  } // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n\n\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n\n  var up = 0;\n\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  } // if the path is allowed to go above the root, restore leading ..s\n\n\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back\n\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  } //to support request.http\n\n\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n\n  if (port) {\n    port = port[0];\n\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n\n    host = host.substr(0, host.length - port.length);\n  }\n\n  if (host) this.hostname = host;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/url/url.js\n");

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = {\n  isString: function isString(arg) {\n    return typeof arg === 'string';\n  },\n  isObject: function isObject(arg) {\n    return _typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function isNull(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function isNullOrUndefined(arg) {\n    return arg == null;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXJsL3V0aWwuanM/MzVlOCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiaXNTdHJpbmciLCJhcmciLCJpc09iamVjdCIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBYTs7OztBQUViQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkMsVUFBUSxFQUFFLGtCQUFTQyxHQUFULEVBQWM7QUFDdEIsV0FBTyxPQUFPQSxHQUFQLEtBQWdCLFFBQXZCO0FBQ0QsR0FIYztBQUlmQyxVQUFRLEVBQUUsa0JBQVNELEdBQVQsRUFBYztBQUN0QixXQUFPLFFBQU9BLEdBQVAsTUFBZ0IsUUFBaEIsSUFBNEJBLEdBQUcsS0FBSyxJQUEzQztBQUNELEdBTmM7QUFPZkUsUUFBTSxFQUFFLGdCQUFTRixHQUFULEVBQWM7QUFDcEIsV0FBT0EsR0FBRyxLQUFLLElBQWY7QUFDRCxHQVRjO0FBVWZHLG1CQUFpQixFQUFFLDJCQUFTSCxHQUFULEVBQWM7QUFDL0IsV0FBT0EsR0FBRyxJQUFJLElBQWQ7QUFDRDtBQVpjLENBQWpCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3VybC91dGlsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNTdHJpbmc6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIGlzT2JqZWN0OiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSBudWxsO1xuICB9LFxuICBpc051bGxPclVuZGVmaW5lZDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PSBudWxsO1xuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/url/util.js\n");

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * Module exports.\n */\nmodule.exports = deprecate;\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate(fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n\n      warned = true;\n    }\n\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\n\nfunction config(name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcz9iN2QxIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJkZXByZWNhdGUiLCJmbiIsIm1zZyIsImNvbmZpZyIsIndhcm5lZCIsImRlcHJlY2F0ZWQiLCJFcnJvciIsImNvbnNvbGUiLCJ0cmFjZSIsIndhcm4iLCJhcHBseSIsImFyZ3VtZW50cyIsIm5hbWUiLCJnbG9iYWwiLCJsb2NhbFN0b3JhZ2UiLCJfIiwidmFsIiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiXSwibWFwcGluZ3MiOiJBQUNBO0FBQ0E7QUFDQTtBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLFNBQWpCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxTQUFULENBQW9CQyxFQUFwQixFQUF3QkMsR0FBeEIsRUFBNkI7QUFDM0IsTUFBSUMsTUFBTSxDQUFDLGVBQUQsQ0FBVixFQUE2QjtBQUMzQixXQUFPRixFQUFQO0FBQ0Q7O0FBRUQsTUFBSUcsTUFBTSxHQUFHLEtBQWI7O0FBQ0EsV0FBU0MsVUFBVCxHQUFzQjtBQUNwQixRQUFJLENBQUNELE1BQUwsRUFBYTtBQUNYLFVBQUlELE1BQU0sQ0FBQyxrQkFBRCxDQUFWLEVBQWdDO0FBQzlCLGNBQU0sSUFBSUcsS0FBSixDQUFVSixHQUFWLENBQU47QUFDRCxPQUZELE1BRU8sSUFBSUMsTUFBTSxDQUFDLGtCQUFELENBQVYsRUFBZ0M7QUFDckNJLGVBQU8sQ0FBQ0MsS0FBUixDQUFjTixHQUFkO0FBQ0QsT0FGTSxNQUVBO0FBQ0xLLGVBQU8sQ0FBQ0UsSUFBUixDQUFhUCxHQUFiO0FBQ0Q7O0FBQ0RFLFlBQU0sR0FBRyxJQUFUO0FBQ0Q7O0FBQ0QsV0FBT0gsRUFBRSxDQUFDUyxLQUFILENBQVMsSUFBVCxFQUFlQyxTQUFmLENBQVA7QUFDRDs7QUFFRCxTQUFPTixVQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsU0FBU0YsTUFBVCxDQUFpQlMsSUFBakIsRUFBdUI7QUFDckI7QUFDQSxNQUFJO0FBQ0YsUUFBSSxDQUFDQyxNQUFNLENBQUNDLFlBQVosRUFBMEIsT0FBTyxLQUFQO0FBQzNCLEdBRkQsQ0FFRSxPQUFPQyxDQUFQLEVBQVU7QUFDVixXQUFPLEtBQVA7QUFDRDs7QUFDRCxNQUFJQyxHQUFHLEdBQUdILE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkYsSUFBcEIsQ0FBVjtBQUNBLE1BQUksUUFBUUksR0FBWixFQUFpQixPQUFPLEtBQVA7QUFDakIsU0FBT0MsTUFBTSxDQUFDRCxHQUFELENBQU4sQ0FBWUUsV0FBWixPQUE4QixNQUFyQztBQUNELEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/util-deprecate/browser.js\n");

/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n\n    var TempCtor = function TempCtor() {};\n\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz8yOGEwIl0sIm5hbWVzIjpbIk9iamVjdCIsImNyZWF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmhlcml0cyIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiVGVtcEN0b3IiXSwibWFwcGluZ3MiOiJBQUFBLElBQUksT0FBT0EsTUFBTSxDQUFDQyxNQUFkLEtBQXlCLFVBQTdCLEVBQXlDO0FBQ3ZDO0FBQ0FDLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsU0FBeEIsRUFBbUM7QUFDbERELFFBQUksQ0FBQ0UsTUFBTCxHQUFjRCxTQUFkO0FBQ0FELFFBQUksQ0FBQ0csU0FBTCxHQUFpQlIsTUFBTSxDQUFDQyxNQUFQLENBQWNLLFNBQVMsQ0FBQ0UsU0FBeEIsRUFBbUM7QUFDbERDLGlCQUFXLEVBQUU7QUFDWEMsYUFBSyxFQUFFTCxJQURJO0FBRVhNLGtCQUFVLEVBQUUsS0FGRDtBQUdYQyxnQkFBUSxFQUFFLElBSEM7QUFJWEMsb0JBQVksRUFBRTtBQUpIO0FBRHFDLEtBQW5DLENBQWpCO0FBUUQsR0FWRDtBQVdELENBYkQsTUFhTztBQUNMO0FBQ0FYLFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxRQUFULENBQWtCQyxJQUFsQixFQUF3QkMsU0FBeEIsRUFBbUM7QUFDbERELFFBQUksQ0FBQ0UsTUFBTCxHQUFjRCxTQUFkOztBQUNBLFFBQUlRLFFBQVEsR0FBRyxTQUFYQSxRQUFXLEdBQVksQ0FBRSxDQUE3Qjs7QUFDQUEsWUFBUSxDQUFDTixTQUFULEdBQXFCRixTQUFTLENBQUNFLFNBQS9CO0FBQ0FILFFBQUksQ0FBQ0csU0FBTCxHQUFpQixJQUFJTSxRQUFKLEVBQWpCO0FBQ0FULFFBQUksQ0FBQ0csU0FBTCxDQUFlQyxXQUFmLEdBQTZCSixJQUE3QjtBQUNELEdBTkQ7QUFPRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy91dGlsL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/util/node_modules/inherits/inherits_browser.js\n");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nmodule.exports = function isBuffer(arg) {\n  return arg && _typeof(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcz9kNjBhIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc0J1ZmZlciIsImFyZyIsImNvcHkiLCJmaWxsIiwicmVhZFVJbnQ4Il0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUI7QUFDdEMsU0FBT0EsR0FBRyxJQUFJLFFBQU9BLEdBQVAsTUFBZSxRQUF0QixJQUNGLE9BQU9BLEdBQUcsQ0FBQ0MsSUFBWCxLQUFvQixVQURsQixJQUVGLE9BQU9ELEdBQUcsQ0FBQ0UsSUFBWCxLQUFvQixVQUZsQixJQUdGLE9BQU9GLEdBQUcsQ0FBQ0csU0FBWCxLQUF5QixVQUg5QjtBQUlELENBTEQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/util/support/isBufferBrowser.js\n");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {\n  var keys = Object.keys(obj);\n  var descriptors = {};\n\n  for (var i = 0; i < keys.length; i++) {\n    descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n  }\n\n  return descriptors;\n};\n\nvar formatRegExp = /%[sdj%]/g;\n\nexports.format = function (f) {\n  if (!isString(f)) {\n    var objects = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function (x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n\n    switch (x) {\n      case '%s':\n        return String(args[i++]);\n\n      case '%d':\n        return Number(args[i++]);\n\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n\n      default:\n        return x;\n    }\n  });\n\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n\n  return str;\n}; // Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\n\n\nexports.deprecate = function (fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  } // Allow for deprecating things in the process of starting up.\n\n\n  if (typeof process === 'undefined') {\n    return function () {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n\n      warned = true;\n    }\n\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\nvar debugs = {};\nvar debugEnviron;\n\nexports.debuglog = function (set) {\n  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n\n      debugs[set] = function () {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function () {};\n    }\n  }\n\n  return debugs[set];\n};\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n\n/* legacy: obj, showHidden, depth, colors*/\n\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  }; // legacy...\n\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  } // set default options\n\n\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\nexports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\ninspect.colors = {\n  'bold': [1, 22],\n  'italic': [3, 23],\n  'underline': [4, 24],\n  'inverse': [7, 27],\n  'white': [37, 39],\n  'grey': [90, 39],\n  'black': [30, 39],\n  'blue': [34, 39],\n  'cyan': [36, 39],\n  'green': [32, 39],\n  'magenta': [35, 39],\n  'red': [31, 39],\n  'yellow': [33, 39]\n}; // Don't use 'blue' not visible on cmd.exe\n\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return \"\\x1B[\" + inspect.colors[style][0] + 'm' + str + \"\\x1B[\" + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n  array.forEach(function (val, idx) {\n    hash[val] = true;\n  });\n  return hash;\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special\n  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.\n  !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n\n    return ret;\n  } // Primitive types cannot have properties\n\n\n  var primitive = formatPrimitive(ctx, value);\n\n  if (primitive) {\n    return primitive;\n  } // Look up the keys of the object.\n\n\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  } // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\n\n  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  } // Some type of object without properties can be shortcutted.\n\n\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '',\n      array = false,\n      braces = ['{', '}']; // Make Array say that they are Array\n\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  } // Make functions say that they are functions\n\n\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  } // Make RegExps say that they are RegExps\n\n\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  } // Make dates with properties first say the date\n\n\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  } // Make error with message first say the error\n\n\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n  var output;\n\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function (key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');\n\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n\n  if (isNumber(value)) return ctx.stylize('' + value, 'number');\n  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is \"object\", so special case here.\n\n  if (isNull(value)) return ctx.stylize('null', 'null');\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function (key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || {\n    value: value[key]\n  };\n\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function (line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function (line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n\n    name = JSON.stringify('' + key);\n\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function (prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] + (base === '' ? '' : base + '\\n ') + ' ' + output.join(',\\n  ') + ' ' + braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n} // NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return _typeof(arg) === 'symbol';\n}\n\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return _typeof(arg) === 'object' && arg !== null;\n}\n\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol\n  typeof arg === 'undefined';\n}\n\nexports.isPrimitive = isPrimitive;\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34\n\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n} // log is just a thin wrapper to console.log that prepends a timestamp\n\n\nexports.log = function () {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\n\n\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/util/node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function (origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n  var keys = Object.keys(add);\n  var i = keys.length;\n\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function') throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn,\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn,\n    enumerable: false,\n    writable: false,\n    configurable: true\n  });\n  return Object.defineProperties(fn, getOwnPropertyDescriptors(original));\n};\n\nexports.promisify.custom = kCustomPromisifiedSymbol;\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  } // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n\n\n  function callbackified() {\n    var args = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n\n    var self = this;\n\n    var cb = function cb() {\n      return maybeCb.apply(self, arguments);\n    }; // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n\n\n    original.apply(this, args).then(function (ret) {\n      process.nextTick(cb, null, ret);\n    }, function (rej) {\n      process.nextTick(callbackifyOnRejected, rej, cb);\n    });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));\n  return callbackified;\n}\n\nexports.callbackify = callbackify;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/util/util.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vYW1kLW9wdGlvbnMuanM/MDA4NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9hbWQtb3B0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX193ZWJwYWNrX2FtZF9vcHRpb25zX18gKi9cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX2FtZF9vcHRpb25zX187XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/amd-options.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSUEsQ0FBSixDLENBRUE7O0FBQ0FBLENBQUMsR0FBSSxZQUFXO0FBQ2YsU0FBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxHQUFDLEdBQUdBLENBQUMsSUFBSSxJQUFJQyxRQUFKLENBQWEsYUFBYixHQUFUO0FBQ0EsQ0FIRCxDQUdFLE9BQU9DLENBQVAsRUFBVTtBQUNYO0FBQ0EsTUFBSSxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXRCLEVBQWdDSCxDQUFDLEdBQUdHLE1BQUo7QUFDaEMsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsQ0FBakIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJsIiwiaSJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFTRCxNQUFULEVBQWlCO0FBQ2pDLE1BQUksQ0FBQ0EsTUFBTSxDQUFDRSxlQUFaLEVBQTZCO0FBQzVCRixVQUFNLENBQUNHLFNBQVAsR0FBbUIsWUFBVyxDQUFFLENBQWhDOztBQUNBSCxVQUFNLENBQUNJLEtBQVAsR0FBZSxFQUFmLENBRjRCLENBRzVCOztBQUNBLFFBQUksQ0FBQ0osTUFBTSxDQUFDSyxRQUFaLEVBQXNCTCxNQUFNLENBQUNLLFFBQVAsR0FBa0IsRUFBbEI7QUFDdEJDLFVBQU0sQ0FBQ0MsY0FBUCxDQUFzQlAsTUFBdEIsRUFBOEIsUUFBOUIsRUFBd0M7QUFDdkNRLGdCQUFVLEVBQUUsSUFEMkI7QUFFdkNDLFNBQUcsRUFBRSxlQUFXO0FBQ2YsZUFBT1QsTUFBTSxDQUFDVSxDQUFkO0FBQ0E7QUFKc0MsS0FBeEM7QUFNQUosVUFBTSxDQUFDQyxjQUFQLENBQXNCUCxNQUF0QixFQUE4QixJQUE5QixFQUFvQztBQUNuQ1EsZ0JBQVUsRUFBRSxJQUR1QjtBQUVuQ0MsU0FBRyxFQUFFLGVBQVc7QUFDZixlQUFPVCxNQUFNLENBQUNXLENBQWQ7QUFDQTtBQUprQyxLQUFwQztBQU1BWCxVQUFNLENBQUNFLGVBQVAsR0FBeUIsQ0FBekI7QUFDQTs7QUFDRCxTQUFPRixNQUFQO0FBQ0EsQ0FyQkQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./node_modules/xtend/immutable.js":
/*!*****************************************!*\
  !*** ./node_modules/xtend/immutable.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = extend;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n  var target = {};\n\n  for (var i = 0; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzPzUzYTgiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImV4dGVuZCIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsImNhbGwiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLE1BQWpCO0FBRUEsSUFBSUMsY0FBYyxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJGLGNBQXRDOztBQUVBLFNBQVNELE1BQVQsR0FBa0I7QUFDZCxNQUFJSSxNQUFNLEdBQUcsRUFBYjs7QUFFQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBOUIsRUFBc0NGLENBQUMsRUFBdkMsRUFBMkM7QUFDdkMsUUFBSUcsTUFBTSxHQUFHRixTQUFTLENBQUNELENBQUQsQ0FBdEI7O0FBRUEsU0FBSyxJQUFJSSxHQUFULElBQWdCRCxNQUFoQixFQUF3QjtBQUNwQixVQUFJUCxjQUFjLENBQUNTLElBQWYsQ0FBb0JGLE1BQXBCLEVBQTRCQyxHQUE1QixDQUFKLEVBQXNDO0FBQ2xDTCxjQUFNLENBQUNLLEdBQUQsQ0FBTixHQUFjRCxNQUFNLENBQUNDLEdBQUQsQ0FBcEI7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsU0FBT0wsTUFBUDtBQUNIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3h0ZW5kL2ltbXV0YWJsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge31cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/xtend/immutable.js\n");

/***/ }),

/***/ "./src/main/frontend/entry/index-with-irma-issuer.js":
/*!***********************************************************!*\
  !*** ./src/main/frontend/entry/index-with-irma-issuer.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n__webpack_require__(/*! @privacybydesign/irma-css */ \"./node_modules/@privacybydesign/irma-css/dist/irma.min.css\");\n\nvar IrmaCore = __webpack_require__(/*! @privacybydesign/irma-core */ \"../../../afstuderen/irma-frontend-packages/irma-core/index.js\");\n\nvar Web = __webpack_require__(/*! @privacybydesign/irma-web */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-web/index.js\");\n\nvar Client = __webpack_require__(/*! @privacybydesign/irma-client */ \"../../../afstuderen/irma-frontend-packages/plugins/irma-client/index.js\");\n\nwindow.onload = function () {\n  var _start;\n\n  var scenarioUrl = document.getElementsByName('irma-scenario')[0].value;\n  var bsn = document.getElementById('bsn').value;\n  var naam = document.getElementById('naam').value;\n  var stad = document.getElementById('stad').value;\n  var leeftijd = document.getElementById('leeftijd').value;\n  var irma = new IrmaCore({\n    debugging: true,\n    // Enable to get helpful output in the browser console\n    element: '#irma-web-form',\n    // Which DOM element to render to\n    // Back-end options\n    session: {\n      // Point this to your controller:\n      url: 'http://192.168.178.17:8080/cerina-endpoint',\n      // Define your disclosure request:\n      start: (_start = {\n        method: 'POST',\n        url: function url(o) {\n          return \"\".concat(o.url, \"/session/scenario-3/start\");\n        }\n      }, _defineProperty(_start, \"method\", 'POST'), _defineProperty(_start, \"headers\", {\n        'Content-Type': 'application/json'\n      }), _defineProperty(_start, \"body\", JSON.stringify({\n        \"bsn\": bsn,\n        \"naam\": naam,\n        \"stad\": stad,\n        \"leeftijd\": leeftijd\n      })), _start),\n      result: {\n        url: function url(o, _ref) {\n          var sessionPtr = _ref.sessionPtr,\n              sessionToken = _ref.sessionToken;\n          return \"\".concat(o.url, \"/session/scenario-3/\").concat(sessionToken, \"/result\");\n        },\n        method: 'GET'\n      }\n    }\n  });\n  irma.use(Web);\n  irma.use(Client);\n  document.getElementById('issuance').addEventListener('click', function () {\n    irma.start().then(function (result) {\n      return console.log(\"Successful disclosure! ðŸŽ‰\", result);\n    }).catch(function (error) {\n      return console.error(\"Couldn't do what you asked ðŸ˜¢\", error);\n    });\n  });\n  document.getElementById('abort-button').addEventListener('click', function () {\n    irma.abort();\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi9mcm9udGVuZC9lbnRyeS9pbmRleC13aXRoLWlybWEtaXNzdWVyLmpzP2Q4NWYiXSwibmFtZXMiOlsicmVxdWlyZSIsIklybWFDb3JlIiwiV2ViIiwiQ2xpZW50Iiwid2luZG93Iiwib25sb2FkIiwic2NlbmFyaW9VcmwiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlOYW1lIiwidmFsdWUiLCJic24iLCJnZXRFbGVtZW50QnlJZCIsIm5hYW0iLCJzdGFkIiwibGVlZnRpamQiLCJpcm1hIiwiZGVidWdnaW5nIiwiZWxlbWVudCIsInNlc3Npb24iLCJ1cmwiLCJzdGFydCIsIm1ldGhvZCIsIm8iLCJKU09OIiwic3RyaW5naWZ5IiwicmVzdWx0Iiwic2Vzc2lvblB0ciIsInNlc3Npb25Ub2tlbiIsInVzZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyb3IiLCJhYm9ydCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsbUJBQU8sQ0FBQyw2RkFBRCxDQUFQOztBQUVBLElBQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyxpR0FBRCxDQUF4Qjs7QUFDQSxJQUFNRSxHQUFHLEdBQVFGLG1CQUFPLENBQUMsdUdBQUQsQ0FBeEI7O0FBQ0EsSUFBTUcsTUFBTSxHQUFLSCxtQkFBTyxDQUFDLDZHQUFELENBQXhCOztBQUVBSSxNQUFNLENBQUNDLE1BQVAsR0FBZ0IsWUFBVztBQUFBOztBQUUzQixNQUFJQyxXQUFXLEdBQUlDLFFBQVEsQ0FBQ0MsaUJBQVQsQ0FBMkIsZUFBM0IsRUFBNEMsQ0FBNUMsRUFBK0NDLEtBQWxFO0FBQ0EsTUFBSUMsR0FBRyxHQUFJSCxRQUFRLENBQUNJLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0JGLEtBQTFDO0FBQ0EsTUFBSUcsSUFBSSxHQUFJTCxRQUFRLENBQUNJLGNBQVQsQ0FBd0IsTUFBeEIsRUFBZ0NGLEtBQTVDO0FBQ0EsTUFBSUksSUFBSSxHQUFJTixRQUFRLENBQUNJLGNBQVQsQ0FBd0IsTUFBeEIsRUFBZ0NGLEtBQTVDO0FBQ0EsTUFBSUssUUFBUSxHQUFFUCxRQUFRLENBQUNJLGNBQVQsQ0FBd0IsVUFBeEIsRUFBb0NGLEtBQWxEO0FBRUEsTUFBTU0sSUFBSSxHQUFHLElBQUlkLFFBQUosQ0FBYTtBQUN0QmUsYUFBUyxFQUFFLElBRFc7QUFDTTtBQUM1QkMsV0FBTyxFQUFJLGdCQUZXO0FBRU87QUFFN0I7QUFDQUMsV0FBTyxFQUFFO0FBQ0w7QUFDQUMsU0FBRyxFQUFFLDRDQUZBO0FBSVo7QUFDT0MsV0FBSztBQUNIQyxjQUFNLEVBQUUsTUFETDtBQUVERixXQUFHLEVBQUUsYUFBQUcsQ0FBQztBQUFBLDJCQUFPQSxDQUFDLENBQUNILEdBQVQ7QUFBQTtBQUZMLDJDQUdPLE1BSFAsc0NBSVM7QUFDRSx3QkFBZ0I7QUFEbEIsT0FKVCxtQ0FPUUksSUFBSSxDQUFDQyxTQUFMLENBQWU7QUFDdEIsZUFBT2QsR0FEZTtBQUV0QixnQkFBUUUsSUFGYztBQUd0QixnQkFBUUMsSUFIYztBQUl0QixvQkFBWUM7QUFKVSxPQUFmLENBUFIsVUFMQTtBQW9CTFcsWUFBTSxFQUFFO0FBQ1JOLFdBQUcsRUFBRSxhQUFDRyxDQUFEO0FBQUEsY0FBS0ksVUFBTCxRQUFLQSxVQUFMO0FBQUEsY0FBaUJDLFlBQWpCLFFBQWlCQSxZQUFqQjtBQUFBLDJCQUFzQ0wsQ0FBQyxDQUFDSCxHQUF4QyxpQ0FBa0VRLFlBQWxFO0FBQUEsU0FERztBQUVSTixjQUFNLEVBQUU7QUFGQTtBQXBCSDtBQUxhLEdBQWIsQ0FBYjtBQWlDQU4sTUFBSSxDQUFDYSxHQUFMLENBQVMxQixHQUFUO0FBQ0FhLE1BQUksQ0FBQ2EsR0FBTCxDQUFTekIsTUFBVDtBQUVBSSxVQUFRLENBQUNJLGNBQVQsQ0FBd0IsVUFBeEIsRUFBb0NrQixnQkFBcEMsQ0FBcUQsT0FBckQsRUFBOEQsWUFBTTtBQUVoRWQsUUFBSSxDQUFDSyxLQUFMLEdBQ0NVLElBREQsQ0FDTSxVQUFBTCxNQUFNO0FBQUEsYUFBSU0sT0FBTyxDQUFDQyxHQUFSLENBQVksMkJBQVosRUFBeUNQLE1BQXpDLENBQUo7QUFBQSxLQURaLEVBRUNRLEtBRkQsQ0FFTyxVQUFBQyxLQUFLO0FBQUEsYUFBSUgsT0FBTyxDQUFDRyxLQUFSLENBQWMsK0JBQWQsRUFBK0NBLEtBQS9DLENBQUo7QUFBQSxLQUZaO0FBR0MsR0FMTDtBQU9BM0IsVUFBUSxDQUFDSSxjQUFULENBQXdCLGNBQXhCLEVBQXdDa0IsZ0JBQXhDLENBQXlELE9BQXpELEVBQWtFLFlBQU07QUFDcEVkLFFBQUksQ0FBQ29CLEtBQUw7QUFDSCxHQUZEO0FBS0MsQ0F4REQiLCJmaWxlIjoiLi9zcmMvbWFpbi9mcm9udGVuZC9lbnRyeS9pbmRleC13aXRoLWlybWEtaXNzdWVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnQHByaXZhY3lieWRlc2lnbi9pcm1hLWNzcycpO1xuXG5jb25zdCBJcm1hQ29yZSA9IHJlcXVpcmUoJ0Bwcml2YWN5YnlkZXNpZ24vaXJtYS1jb3JlJyk7XG5jb25zdCBXZWIgICAgICA9IHJlcXVpcmUoJ0Bwcml2YWN5YnlkZXNpZ24vaXJtYS13ZWInKTtcbmNvbnN0IENsaWVudCAgID0gcmVxdWlyZSgnQHByaXZhY3lieWRlc2lnbi9pcm1hLWNsaWVudCcpO1xuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbnZhciBzY2VuYXJpb1VybCA9ICBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgnaXJtYS1zY2VuYXJpbycpWzBdLnZhbHVlO1xudmFyIGJzbiA9ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnNuJykudmFsdWU7XG52YXIgbmFhbSA9ICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFhbScpLnZhbHVlO1xudmFyIHN0YWQgPSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YWQnKS52YWx1ZTtcbnZhciBsZWVmdGlqZCA9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xlZWZ0aWpkJykudmFsdWU7XG5cbmNvbnN0IGlybWEgPSBuZXcgSXJtYUNvcmUoe1xuICAgIGRlYnVnZ2luZzogdHJ1ZSwgICAgICAgICAgICAvLyBFbmFibGUgdG8gZ2V0IGhlbHBmdWwgb3V0cHV0IGluIHRoZSBicm93c2VyIGNvbnNvbGVcbiAgICBlbGVtZW50OiAgICcjaXJtYS13ZWItZm9ybScsIC8vIFdoaWNoIERPTSBlbGVtZW50IHRvIHJlbmRlciB0b1xuXG4gICAgLy8gQmFjay1lbmQgb3B0aW9uc1xuICAgIHNlc3Npb246IHtcbiAgICAgICAgLy8gUG9pbnQgdGhpcyB0byB5b3VyIGNvbnRyb2xsZXI6XG4gICAgICAgIHVybDogJ2h0dHA6Ly8xOTIuMTY4LjE3OC4xNzo4MDgwL2NlcmluYS1lbmRwb2ludCcsXG5cbiAvLyBEZWZpbmUgeW91ciBkaXNjbG9zdXJlIHJlcXVlc3Q6XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB1cmw6IG8gPT4gYCR7by51cmx9L3Nlc3Npb24vc2NlbmFyaW8tMy9zdGFydGAsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgXCJic25cIjogYnNuLFxuICAgICAgICAgICAgICBcIm5hYW1cIjogbmFhbSxcbiAgICAgICAgICAgICAgXCJzdGFkXCI6IHN0YWQsXG4gICAgICAgICAgICAgIFwibGVlZnRpamRcIjogbGVlZnRpamQsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlc3VsdDoge1xuICAgICAgICB1cmw6IChvLCB7c2Vzc2lvblB0ciwgc2Vzc2lvblRva2VufSkgPT4gYCR7by51cmx9L3Nlc3Npb24vc2NlbmFyaW8tMy8ke3Nlc3Npb25Ub2tlbn0vcmVzdWx0YCxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcblxuICAgICAgICB9LFxuICAgICAgfVxufSk7XG5cbmlybWEudXNlKFdlYik7XG5pcm1hLnVzZShDbGllbnQpO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXNzdWFuY2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblxuICAgIGlybWEuc3RhcnQoKVxuICAgIC50aGVuKHJlc3VsdCA9PiBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NmdWwgZGlzY2xvc3VyZSEg8J+OiVwiLCByZXN1bHQpKVxuICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgZG8gd2hhdCB5b3UgYXNrZWQg8J+YolwiLCBlcnJvcikpO1xuICAgIH0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWJvcnQtYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaXJtYS5hYm9ydCgpO1xufSk7XG5cblxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/frontend/entry/index-with-irma-issuer.js\n");

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCk/NDgwYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* (ignored) *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCk/YmQzOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })

/******/ });